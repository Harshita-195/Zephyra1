import 'dart:math';
import 'dart:async';
import 'base_painter.dart';
import 'base_state.dart';
import 'package:google_fonts/google_fonts.dart';
import 'figma_to_flutter.dart' as globals;
import 'package:transparent_pointer/transparent_pointer.dart';
import 'package:path_drawing/path_drawing.dart';
import 'package:flutter/material.dart';
import 'dart:io';
class ComponentDescendantNotification extends Notification {
                    final String name;
                    final String id;
                    final dynamic widget;
                    const ComponentDescendantNotification({this.name="", this.id="", this.widget});
                }

        class Node_157_131 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_157_131({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(255, 255, 255, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M0 0L360 0L360 800L0 800L0 0Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(0, 0, 0, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> strokeGeometries = [((){
                    var path = parseSvgPathData('M0 0L0 -1L-1 -1L-1 0L0 0ZM360 0L361 0L361 -1L360 -1L360 0ZM360 800L360 801L361 801L361 800L360 800ZM0 800L-1 800L-1 801L0 801L0 800ZM0 1L360 1L360 -1L0 -1L0 1ZM359 0L359 800L361 800L361 0L359 0ZM360 799L0 799L0 801L360 801L360 799ZM1 800L1 0L-1 0L-1 800L1 800Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];

            @override
            bool shouldRepaint(Node_157_131 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        
                        try{
                            canvas.drawPath(
                                path.shift(Offset(0, 4))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(0, 0, 0, 0.25)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 4 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(0, 4);
                            canvas.drawShadow(path, Color.fromRGBO(0, 0, 0, 0.25), 4, true);
                            canvas.translate(0, -4);
                        }
                    canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        canvas.clipPath(fillPath);
                        
                        try{
                            canvas.drawPath(
                                path.shift(Offset(0, 4))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(0, 0, 0, 0.25)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 4 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(0, 4);
                            canvas.drawShadow(path, Color.fromRGBO(0, 0, 0, 0.25), 4, true);
                            canvas.translate(0, -4);
                        }
                    canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_1_330 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_330({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_330 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_331 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_331({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(239, 241, 245, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(255, 255, 255, 0.5)
                ..strokeWidth = 1
                ..style = PaintingStyle.stroke
            ,
];
            
            @override
            bool shouldRepaint(Node_1_331 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(22),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(22),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(Offset(0 - 0.5, 0 - 0.5), Offset(w + 0.5, h + 0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    
                        try{
                            canvas.drawPath(
                                path.shift(Offset(0, 20))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(59, 64, 86, 0.15000000596046448)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 40 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(0, 20);
                            canvas.drawShadow(path, Color.fromRGBO(59, 64, 86, 0.15000000596046448), 40, true);
                            canvas.translate(0, -20);
                        }
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_332 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_332({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_332 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = RoundedRectangleBorder(
                            borderRadius: BorderRadius.only(
                                topLeft: Radius.circular(0),
                                topRight: Radius.circular(0),
                                bottomLeft: Radius.circular(0),
                                bottomRight: Radius.circular(0),
                            ),
                            side: BorderSide()
                        ).getInnerPath(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = RoundedRectangleBorder(
                            borderRadius: BorderRadius.only(
                                topLeft: Radius.circular(0),
                                topRight: Radius.circular(0),
                                bottomLeft: Radius.circular(0),
                                bottomRight: Radius.circular(0),
                            ),
                            side: BorderSide()
                        ).getInnerPath(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_333 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_333({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_333 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = RoundedRectangleBorder(
                            borderRadius: BorderRadius.only(
                                topLeft: Radius.circular(22),
                                topRight: Radius.circular(22),
                                bottomLeft: Radius.circular(0),
                                bottomRight: Radius.circular(0),
                            ),
                            side: BorderSide()
                        ).getInnerPath(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = RoundedRectangleBorder(
                            borderRadius: BorderRadius.only(
                                topLeft: Radius.circular(22),
                                topRight: Radius.circular(22),
                                bottomLeft: Radius.circular(0),
                                bottomRight: Radius.circular(0),
                            ),
                            side: BorderSide()
                        ).getInnerPath(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_334 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_334({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_334 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_335 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_335({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(0, 0, 0, 0.10000000149011612)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M22 11C22 17.0751 17.0751 22 11 22C4.92487 22 0 17.0751 0 11C0 4.92487 4.92487 0 11 0C17.0751 0 22 4.92487 22 11Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_1_335 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        canvas.clipPath(fillPath);
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_1_337 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_337({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_337 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_338 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_338({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_338 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = RoundedRectangleBorder(
                            borderRadius: BorderRadius.only(
                                topLeft: Radius.circular(0),
                                topRight: Radius.circular(0),
                                bottomLeft: Radius.circular(0),
                                bottomRight: Radius.circular(0),
                            ),
                            side: BorderSide()
                        ).getInnerPath(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = RoundedRectangleBorder(
                            borderRadius: BorderRadius.only(
                                topLeft: Radius.circular(0),
                                topRight: Radius.circular(0),
                                bottomLeft: Radius.circular(0),
                                bottomRight: Radius.circular(0),
                            ),
                            side: BorderSide()
                        ).getInnerPath(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_341 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_341({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_341 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_342 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_342({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_342 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_344 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_344({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_344 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_I1_344_10_2584 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_344_10_2584({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(191, 195, 201, 1), Color.fromRGBO(225, 232, 241, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(0.60784316398325, -0.9999997939187463),
                    end: Alignment(-0.4705882130570771, 0.999990434072686),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(51, 31.000152587890625)))
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M15.857 0.0921522C17.597 -0.0078478 19.335 0.0001522 21.075 0.0001522C21.087 0.0001522 29.892 0.0001522 29.892 0.0001522C31.666 0.0001522 33.404 -0.0078478 35.143 0.0921522C36.724 0.182152 38.264 0.374152 39.797 0.803152C43.024 1.70515 45.842 3.58915 47.879 6.26015C49.904 8.91415 51 12.1632 51 15.4992C51 18.8392 49.904 22.0862 47.879 24.7402C45.842 27.4102 43.024 29.2952 39.797 30.1972C38.264 30.6262 36.724 30.8172 35.143 30.9082C33.404 31.0082 31.666 30.9992 29.926 30.9992C29.914 30.9992 21.107 31.0002 21.107 31.0002C19.335 30.9992 17.597 31.0082 15.857 30.9082C14.277 30.8172 12.737 30.6262 11.204 30.1972C7.977 29.2952 5.159 27.4102 3.122 24.7402C1.097 22.0862 0 18.8392 0 15.5002C0 12.1632 1.097 8.91415 3.122 6.26015C5.159 3.58915 7.977 1.70515 11.204 0.803152C12.737 0.374152 14.277 0.182152 15.857 0.0921522Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_344_10_2584 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                    canvas.clipPath(path);
                    canvas.drawPath(
                        path.shift(Offset(-0.22680413722991943, -0.45360827445983887)),
                        Paint() 
                        ..blendMode = BlendMode.srcOver
                        ..color=Color.fromRGBO(255, 255, 255, 0.4000000059604645)
                        ..style = PaintingStyle.stroke
                        ..strokeWidth = 0
                        ..maskFilter = MaskFilter.blur(BlurStyle.normal, 0 * 0.57735 + 0.5)
                    );
                   
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                    canvas.clipPath(path);
                    canvas.drawPath(
                        path.shift(Offset(-0.22680413722991943, -0.45360827445983887)),
                        Paint() 
                        ..blendMode = BlendMode.srcOver
                        ..color=Color.fromRGBO(255, 255, 255, 0.4000000059604645)
                        ..style = PaintingStyle.stroke
                        ..strokeWidth = 0
                        ..maskFilter = MaskFilter.blur(BlurStyle.normal, 0 * 0.57735 + 0.5)
                    );
                   
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_344_10_2585 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_344_10_2585({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(152, 94, 225, 1), Color.fromRGBO(242, 86, 86, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(0, -1),
                    end: Alignment(0, 0.9999999999999998),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(27, 27)))
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M13.5 27C20.9558 27 27 20.9558 27 13.5C27 6.04416 20.9558 0 13.5 0C6.04416 0 0 6.04416 0 13.5C0 20.9558 6.04416 27 13.5 27Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_344_10_2585 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        
                        try{
                            canvas.drawPath(
                                path.shift(Offset(0, 1))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(142, 155, 174, 0.20000000298023224)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 1 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(0, 1);
                            canvas.drawShadow(path, Color.fromRGBO(142, 155, 174, 0.20000000298023224), 1, true);
                            canvas.translate(0, -1);
                        }
                    canvas.drawPath(path, paint);
                    canvas.clipPath(path);
                    canvas.drawPath(
                        path.shift(Offset(0.5, 0.5)),
                        Paint() 
                        ..blendMode = BlendMode.srcOver
                        ..color=Color.fromRGBO(255, 255, 255, 0.30000001192092896)
                        ..style = PaintingStyle.stroke
                        ..strokeWidth = 0.5
                        ..maskFilter = MaskFilter.blur(BlurStyle.normal, 0.5 * 0.57735 + 0.5)
                    );
                   
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        canvas.clipPath(fillPath);
                        
                        try{
                            canvas.drawPath(
                                path.shift(Offset(0, 1))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(142, 155, 174, 0.20000000298023224)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 1 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(0, 1);
                            canvas.drawShadow(path, Color.fromRGBO(142, 155, 174, 0.20000000298023224), 1, true);
                            canvas.translate(0, -1);
                        }
                    canvas.drawPath(path, paint);
                    canvas.clipPath(path);
                    canvas.drawPath(
                        path.shift(Offset(0.5, 0.5)),
                        Paint() 
                        ..blendMode = BlendMode.srcOver
                        ..color=Color.fromRGBO(255, 255, 255, 0.30000001192092896)
                        ..style = PaintingStyle.stroke
                        ..strokeWidth = 0.5
                        ..maskFilter = MaskFilter.blur(BlurStyle.normal, 0.5 * 0.57735 + 0.5)
                    );
                   
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_1_345 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_345({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_345 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_346 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_346({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(239, 241, 245, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(255, 255, 255, 0.5)
                ..strokeWidth = 1
                ..style = PaintingStyle.stroke
            ,
];
            
            @override
            bool shouldRepaint(Node_1_346 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(22),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(22),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(Offset(0 - 0.5, 0 - 0.5), Offset(w + 0.5, h + 0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    
                        try{
                            canvas.drawPath(
                                path.shift(Offset(0, 20))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(59, 64, 86, 0.15000000596046448)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 40 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(0, 20);
                            canvas.drawShadow(path, Color.fromRGBO(59, 64, 86, 0.15000000596046448), 40, true);
                            canvas.translate(0, -20);
                        }
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_347 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_347({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_347 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = RoundedRectangleBorder(
                            borderRadius: BorderRadius.only(
                                topLeft: Radius.circular(0),
                                topRight: Radius.circular(0),
                                bottomLeft: Radius.circular(0),
                                bottomRight: Radius.circular(0),
                            ),
                            side: BorderSide()
                        ).getInnerPath(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = RoundedRectangleBorder(
                            borderRadius: BorderRadius.only(
                                topLeft: Radius.circular(0),
                                topRight: Radius.circular(0),
                                bottomLeft: Radius.circular(0),
                                bottomRight: Radius.circular(0),
                            ),
                            side: BorderSide()
                        ).getInnerPath(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_348 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_348({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_348 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = RoundedRectangleBorder(
                            borderRadius: BorderRadius.only(
                                topLeft: Radius.circular(22),
                                topRight: Radius.circular(22),
                                bottomLeft: Radius.circular(0),
                                bottomRight: Radius.circular(0),
                            ),
                            side: BorderSide()
                        ).getInnerPath(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = RoundedRectangleBorder(
                            borderRadius: BorderRadius.only(
                                topLeft: Radius.circular(22),
                                topRight: Radius.circular(22),
                                bottomLeft: Radius.circular(0),
                                bottomRight: Radius.circular(0),
                            ),
                            side: BorderSide()
                        ).getInnerPath(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_349 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_349({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_349 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_350 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_350({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(0, 0, 0, 0.10000000149011612)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M22 11C22 17.0751 17.0751 22 11 22C4.92487 22 0 17.0751 0 11C0 4.92487 4.92487 0 11 0C17.0751 0 22 4.92487 22 11Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_1_350 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        canvas.clipPath(fillPath);
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_1_352 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_352({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_352 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_353 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_353({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_353 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = RoundedRectangleBorder(
                            borderRadius: BorderRadius.only(
                                topLeft: Radius.circular(0),
                                topRight: Radius.circular(0),
                                bottomLeft: Radius.circular(0),
                                bottomRight: Radius.circular(0),
                            ),
                            side: BorderSide()
                        ).getInnerPath(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = RoundedRectangleBorder(
                            borderRadius: BorderRadius.only(
                                topLeft: Radius.circular(0),
                                topRight: Radius.circular(0),
                                bottomLeft: Radius.circular(0),
                                bottomRight: Radius.circular(0),
                            ),
                            side: BorderSide()
                        ).getInnerPath(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_356 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_356({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_356 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_357 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_357({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_357 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_359 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_359({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_359 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(8),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_361 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_361({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_361 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_I1_361_10_2584 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_361_10_2584({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(191, 195, 201, 1), Color.fromRGBO(225, 232, 241, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(0.60784316398325, -0.9999997939187463),
                    end: Alignment(-0.4705882130570771, 0.999990434072686),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(51, 31.000152587890625)))
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M15.857 0.0921522C17.597 -0.0078478 19.335 0.0001522 21.075 0.0001522C21.087 0.0001522 29.892 0.0001522 29.892 0.0001522C31.666 0.0001522 33.404 -0.0078478 35.143 0.0921522C36.724 0.182152 38.264 0.374152 39.797 0.803152C43.024 1.70515 45.842 3.58915 47.879 6.26015C49.904 8.91415 51 12.1632 51 15.4992C51 18.8392 49.904 22.0862 47.879 24.7402C45.842 27.4102 43.024 29.2952 39.797 30.1972C38.264 30.6262 36.724 30.8172 35.143 30.9082C33.404 31.0082 31.666 30.9992 29.926 30.9992C29.914 30.9992 21.107 31.0002 21.107 31.0002C19.335 30.9992 17.597 31.0082 15.857 30.9082C14.277 30.8172 12.737 30.6262 11.204 30.1972C7.977 29.2952 5.159 27.4102 3.122 24.7402C1.097 22.0862 0 18.8392 0 15.5002C0 12.1632 1.097 8.91415 3.122 6.26015C5.159 3.58915 7.977 1.70515 11.204 0.803152C12.737 0.374152 14.277 0.182152 15.857 0.0921522Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_361_10_2584 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                    canvas.clipPath(path);
                    canvas.drawPath(
                        path.shift(Offset(-0.22680413722991943, -0.45360827445983887)),
                        Paint() 
                        ..blendMode = BlendMode.srcOver
                        ..color=Color.fromRGBO(255, 255, 255, 0.4000000059604645)
                        ..style = PaintingStyle.stroke
                        ..strokeWidth = 0
                        ..maskFilter = MaskFilter.blur(BlurStyle.normal, 0 * 0.57735 + 0.5)
                    );
                   
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                    canvas.clipPath(path);
                    canvas.drawPath(
                        path.shift(Offset(-0.22680413722991943, -0.45360827445983887)),
                        Paint() 
                        ..blendMode = BlendMode.srcOver
                        ..color=Color.fromRGBO(255, 255, 255, 0.4000000059604645)
                        ..style = PaintingStyle.stroke
                        ..strokeWidth = 0
                        ..maskFilter = MaskFilter.blur(BlurStyle.normal, 0 * 0.57735 + 0.5)
                    );
                   
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_361_10_2585 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_361_10_2585({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(152, 94, 225, 1), Color.fromRGBO(242, 86, 86, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(0, -1),
                    end: Alignment(0, 0.9999999999999998),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(27, 27)))
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M13.5 27C20.9558 27 27 20.9558 27 13.5C27 6.04416 20.9558 0 13.5 0C6.04416 0 0 6.04416 0 13.5C0 20.9558 6.04416 27 13.5 27Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_361_10_2585 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        
                        try{
                            canvas.drawPath(
                                path.shift(Offset(0, 1))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(142, 155, 174, 0.20000000298023224)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 1 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(0, 1);
                            canvas.drawShadow(path, Color.fromRGBO(142, 155, 174, 0.20000000298023224), 1, true);
                            canvas.translate(0, -1);
                        }
                    canvas.drawPath(path, paint);
                    canvas.clipPath(path);
                    canvas.drawPath(
                        path.shift(Offset(0.5, 0.5)),
                        Paint() 
                        ..blendMode = BlendMode.srcOver
                        ..color=Color.fromRGBO(255, 255, 255, 0.30000001192092896)
                        ..style = PaintingStyle.stroke
                        ..strokeWidth = 0.5
                        ..maskFilter = MaskFilter.blur(BlurStyle.normal, 0.5 * 0.57735 + 0.5)
                    );
                   
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        canvas.clipPath(fillPath);
                        
                        try{
                            canvas.drawPath(
                                path.shift(Offset(0, 1))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(142, 155, 174, 0.20000000298023224)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 1 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(0, 1);
                            canvas.drawShadow(path, Color.fromRGBO(142, 155, 174, 0.20000000298023224), 1, true);
                            canvas.translate(0, -1);
                        }
                    canvas.drawPath(path, paint);
                    canvas.clipPath(path);
                    canvas.drawPath(
                        path.shift(Offset(0.5, 0.5)),
                        Paint() 
                        ..blendMode = BlendMode.srcOver
                        ..color=Color.fromRGBO(255, 255, 255, 0.30000001192092896)
                        ..style = PaintingStyle.stroke
                        ..strokeWidth = 0.5
                        ..maskFilter = MaskFilter.blur(BlurStyle.normal, 0.5 * 0.57735 + 0.5)
                    );
                   
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_1_412 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_412({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_412 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_413 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_413({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_413 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_414 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_414({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_414 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_416 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_416({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_416 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_417 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_417({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(219, 224, 231, 1), Color.fromRGBO(248, 251, 255, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(-0.608247413815486, -0.9381443143032351),
                    end: Alignment(0.5689653568061681, 0.8218391445763475),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(36, 36)))
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_417 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(10),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(10),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    
                        try{
                            canvas.drawPath(
                                path.shift(Offset(4, 4))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(59, 64, 86, 0.10000000149011612)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 10 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(4, 4);
                            canvas.drawShadow(path, Color.fromRGBO(59, 64, 86, 0.10000000149011612), 10, true);
                            canvas.translate(-4, -4);
                        }
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_419 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_419({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_419 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_420 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_420({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_420 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_422 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_422({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_422 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_423 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_423({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_423 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_424 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_424({this.properties = const {}}) : super();
            final List<Paint> fills = [];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M27 13.5C27 20.9558 20.9558 27 13.5 27C6.04416 27 0 20.9558 0 13.5C0 6.04416 6.04416 0 13.5 0C20.9558 0 27 6.04416 27 13.5Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(239, 241, 245, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> strokeGeometries = [((){
                    var path = parseSvgPathData('M25 13.5C25 19.8513 19.8513 25 13.5 25L13.5 29C22.0604 29 29 22.0604 29 13.5L25 13.5ZM13.5 25C7.14873 25 2 19.8513 2 13.5L-2 13.5C-2 22.0604 4.93959 29 13.5 29L13.5 25ZM2 13.5C2 7.14873 7.14873 2 13.5 2L13.5 -2C4.93959 -2 -2 4.93959 -2 13.5L2 13.5ZM13.5 2C19.8513 2 25 7.14873 25 13.5L29 13.5C29 4.93959 22.0604 -2 13.5 -2L13.5 2Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];

            @override
            bool shouldRepaint(Node_1_424 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        path = strokeAlign('OUTSIDE', path, fillPath, 2);
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_1_425 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_425({this.properties = const {}}) : super();
            final List<Paint> fills = [];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M27 13.5C27 20.9558 20.9558 27 13.5 27C6.04416 27 0 20.9558 0 13.5C0 6.04416 6.04416 0 13.5 0C20.9558 0 27 6.04416 27 13.5Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(239, 241, 245, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> strokeGeometries = [((){
                    var path = parseSvgPathData('M25 13.5C25 19.8513 19.8513 25 13.5 25L13.5 29C22.0604 29 29 22.0604 29 13.5L25 13.5ZM13.5 25C7.14873 25 2 19.8513 2 13.5L-2 13.5C-2 22.0604 4.93959 29 13.5 29L13.5 25ZM2 13.5C2 7.14873 7.14873 2 13.5 2L13.5 -2C4.93959 -2 -2 4.93959 -2 13.5L2 13.5ZM13.5 2C19.8513 2 25 7.14873 25 13.5L29 13.5C29 4.93959 22.0604 -2 13.5 -2L13.5 2Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];

            @override
            bool shouldRepaint(Node_1_425 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        path = strokeAlign('OUTSIDE', path, fillPath, 2);
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_1_426 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_426({this.properties = const {}}) : super();
            final List<Paint> fills = [];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M27 13.5C27 20.9558 20.9558 27 13.5 27C6.04416 27 0 20.9558 0 13.5C0 6.04416 6.04416 0 13.5 0C20.9558 0 27 6.04416 27 13.5Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(238, 240, 244, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> strokeGeometries = [((){
                    var path = parseSvgPathData('M25 13.5C25 19.8513 19.8513 25 13.5 25L13.5 29C22.0604 29 29 22.0604 29 13.5L25 13.5ZM13.5 25C7.14873 25 2 19.8513 2 13.5L-2 13.5C-2 22.0604 4.93959 29 13.5 29L13.5 25ZM2 13.5C2 7.14873 7.14873 2 13.5 2L13.5 -2C4.93959 -2 -2 4.93959 -2 13.5L2 13.5ZM13.5 2C19.8513 2 25 7.14873 25 13.5L29 13.5C29 4.93959 22.0604 -2 13.5 -2L13.5 2Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];

            @override
            bool shouldRepaint(Node_1_426 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        path = strokeAlign('OUTSIDE', path, fillPath, 2);
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_1_427 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_427({this.properties = const {}}) : super();
            final List<Paint> fills = [];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M27 13.5C27 20.9558 20.9558 27 13.5 27C6.04416 27 0 20.9558 0 13.5C0 6.04416 6.04416 0 13.5 0C20.9558 0 27 6.04416 27 13.5Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(239, 241, 245, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> strokeGeometries = [((){
                    var path = parseSvgPathData('M25 13.5C25 19.8513 19.8513 25 13.5 25L13.5 29C22.0604 29 29 22.0604 29 13.5L25 13.5ZM13.5 25C7.14873 25 2 19.8513 2 13.5L-2 13.5C-2 22.0604 4.93959 29 13.5 29L13.5 25ZM2 13.5C2 7.14873 7.14873 2 13.5 2L13.5 -2C4.93959 -2 -2 4.93959 -2 13.5L2 13.5ZM13.5 2C19.8513 2 25 7.14873 25 13.5L29 13.5C29 4.93959 22.0604 -2 13.5 -2L13.5 2Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];

            @override
            bool shouldRepaint(Node_1_427 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        path = strokeAlign('OUTSIDE', path, fillPath, 2);
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_1_398 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_398({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_398 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_399 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_399({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_399 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_400 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_400({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(152, 94, 225, 1), Color.fromRGBO(242, 86, 86, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(-0.8115500406554321, -1.5094341683239436),
                    end: Alignment(0.3677811120118126, 1),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(329, 106)))
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_400 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(22),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(22),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(Offset(0 - -0.3735632300376892, 0 - -0.3735632300376892), Offset(w + -0.3735632300376892, h + -0.3735632300376892)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_401 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_401({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_401 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_404 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_404({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_404 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_406 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_406({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_406 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_408 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_408({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_408 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_397 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_397({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(222, 226, 231, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M0 9.99999C0 4.47715 4.47715 0 10 0L319 0C324.523 0 329 4.47715 329 10L329 22.0024C329 27.5252 324.523 32.0024 319 32.0024L10 32.0024C4.47716 32.0024 0 27.5252 0 22.0024L0 9.99999Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(255, 255, 255, 0.5), Color.fromRGBO(246, 241, 244, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(0.03846157437572173, -1.03205129270741),
                    end: Alignment(0.48850589165628366, 0.9137930998648764),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(329, 32.00235366821289)))
            ,];
final List<Path> strokeGeometries = [((){
                    var path = parseSvgPathData('M10 1.07216L319 1.07216L319 -1.07216L10 -1.07216L10 1.07216ZM327.928 10L327.928 22.0024L330.072 22.0024L330.072 10L327.928 10ZM319 30.9302L10 30.9302L10 33.0745L319 33.0745L319 30.9302ZM1.07216 22.0024L1.07216 9.99999L-1.07216 9.99999L-1.07216 22.0024L1.07216 22.0024ZM10 30.9302C5.0693 30.9302 1.07216 26.9331 1.07216 22.0024L-1.07216 22.0024C-1.07216 28.1173 3.88502 33.0745 10 33.0745L10 30.9302ZM327.928 22.0024C327.928 26.9331 323.931 30.9302 319 30.9302L319 33.0745C325.115 33.0745 330.072 28.1173 330.072 22.0024L327.928 22.0024ZM319 1.07216C323.931 1.07216 327.928 5.06929 327.928 10L330.072 10C330.072 3.88501 325.115 -1.07216 319 -1.07216L319 1.07216ZM10 -1.07216C3.88501 -1.07216 -1.07216 3.885 -1.07216 9.99999L1.07216 9.99999C1.07216 5.06929 5.06929 1.07216 10 1.07216L10 -1.07216Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];

            @override
            bool shouldRepaint(Node_1_397 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                    canvas.clipPath(path);
                    canvas.drawPath(
                        path.shift(Offset(0, 0)),
                        Paint() 
                        ..blendMode = BlendMode.srcOver
                        ..color=Color.fromRGBO(65, 69, 93, 0.10000000149011612)
                        ..style = PaintingStyle.stroke
                        ..strokeWidth = 10
                        ..maskFilter = MaskFilter.blur(BlurStyle.normal, 10 * 0.57735 + 0.5)
                    );
                   
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        path = strokeAlign('OUTSIDE', path, fillPath, 1.0721648931503296);
                        canvas.drawPath(path, paint);
                    canvas.clipPath(path);
                    canvas.drawPath(
                        path.shift(Offset(0, 0)),
                        Paint() 
                        ..blendMode = BlendMode.srcOver
                        ..color=Color.fromRGBO(65, 69, 93, 0.10000000149011612)
                        ..style = PaintingStyle.stroke
                        ..strokeWidth = 10
                        ..maskFilter = MaskFilter.blur(BlurStyle.normal, 10 * 0.57735 + 0.5)
                    );
                   
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_397_135_108 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_397_135_108({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(255, 255, 255, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(0, 0, 0, 0.05000000074505806)
                ..strokeWidth = 0.5
                ..style = PaintingStyle.stroke
            ,
];
            
            @override
            bool shouldRepaint(Node_I1_397_135_108 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(6.929999828338623),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(6.929999828338623),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(Offset(0 - 0.25, 0 - 0.25), Offset(w + 0.25, h + 0.25)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    
                        try{
                            canvas.drawPath(
                                path.shift(Offset(0, 2))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(0, 0, 0, 0.03999999910593033)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 2 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(0, 2);
                            canvas.drawShadow(path, Color.fromRGBO(0, 0, 0, 0.03999999910593033), 2, true);
                            canvas.translate(0, -2);
                        }
                    

                        try{
                            canvas.drawPath(
                                path.shift(Offset(0, 2))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(0, 0, 0, 0.10000000149011612)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 6 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(0, 2);
                            canvas.drawShadow(path, Color.fromRGBO(0, 0, 0, 0.10000000149011612), 6, true);
                            canvas.translate(0, -2);
                        }
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_I1_397_135_110 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_397_135_110({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_I1_397_135_110 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_318 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_318({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(244, 247, 251, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(255, 255, 255, 0.5)
                ..strokeWidth = 1
                ..style = PaintingStyle.stroke
            ,
];
            
            @override
            bool shouldRepaint(Node_1_318 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(22),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(22),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(Offset(0 - 0.5, 0 - 0.5), Offset(w + 0.5, h + 0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    
                        try{
                            canvas.drawPath(
                                path.shift(Offset(0, 20))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(59, 64, 86, 0.15000000596046448)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 40 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(0, 20);
                            canvas.drawShadow(path, Color.fromRGBO(59, 64, 86, 0.15000000596046448), 40, true);
                            canvas.translate(0, -20);
                        }
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_319 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_319({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_319 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = RoundedRectangleBorder(
                            borderRadius: BorderRadius.only(
                                topLeft: Radius.circular(0),
                                topRight: Radius.circular(0),
                                bottomLeft: Radius.circular(0),
                                bottomRight: Radius.circular(0),
                            ),
                            side: BorderSide()
                        ).getInnerPath(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = RoundedRectangleBorder(
                            borderRadius: BorderRadius.only(
                                topLeft: Radius.circular(0),
                                topRight: Radius.circular(0),
                                bottomLeft: Radius.circular(0),
                                bottomRight: Radius.circular(0),
                            ),
                            side: BorderSide()
                        ).getInnerPath(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_320 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_320({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_320 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = RoundedRectangleBorder(
                            borderRadius: BorderRadius.only(
                                topLeft: Radius.circular(22),
                                topRight: Radius.circular(22),
                                bottomLeft: Radius.circular(0),
                                bottomRight: Radius.circular(0),
                            ),
                            side: BorderSide()
                        ).getInnerPath(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = RoundedRectangleBorder(
                            borderRadius: BorderRadius.only(
                                topLeft: Radius.circular(22),
                                topRight: Radius.circular(22),
                                bottomLeft: Radius.circular(0),
                                bottomRight: Radius.circular(0),
                            ),
                            side: BorderSide()
                        ).getInnerPath(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_321 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_321({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_321 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_322 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_322({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(0, 0, 0, 0.10000000149011612)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M22 11C22 17.0751 17.0751 22 11 22C4.92487 22 0 17.0751 0 11C0 4.92487 4.92487 0 11 0C17.0751 0 22 4.92487 22 11Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_1_322 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        canvas.clipPath(fillPath);
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_1_324 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_324({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_324 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_325 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_325({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_325 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_328 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_328({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_328 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_I1_328_131_155 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_328_131_155({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_I1_328_131_155 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_I1_328_131_157 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_328_131_157({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_I1_328_131_157 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_I1_328_131_158 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_328_131_158({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(201, 206, 215, 1), Color.fromRGBO(225, 232, 241, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(0.5689655296533958, -1.0000000000000027),
                    end: Alignment(0.5689655296533958, 0.9032258906175898),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(51, 31.000152587890625)))
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M15.857 0.0921522C17.597 -0.0078478 19.335 0.0001522 21.075 0.0001522C21.087 0.0001522 29.892 0.0001522 29.892 0.0001522C29.892 0.0001522 29.892 0.0001522 29.892 0.0001522C31.666 0.0001522 33.404 -0.0078478 35.143 0.0921522C36.724 0.182152 38.264 0.374152 39.797 0.803152C43.024 1.70515 45.842 3.58915 47.879 6.26015C49.904 8.91415 51 12.1632 51 15.4992C51 18.8392 49.904 22.0862 47.879 24.7402C45.842 27.4102 43.024 29.2952 39.797 30.1972C38.264 30.6262 36.724 30.8172 35.143 30.9082C33.404 31.0082 31.666 30.9992 29.926 30.9992C29.9141 30.9992 21.254 31.0001 21.1088 31.0002C21.1043 31.0002 21.1047 31.0002 21.1002 31.0001C19.3306 30.9992 17.5948 31.008 15.857 30.9082C14.277 30.8172 12.737 30.6262 11.204 30.1972C7.977 29.2952 5.159 27.4102 3.122 24.7402C1.097 22.0862 0 18.8392 0 15.5002C0 12.1632 1.097 8.91415 3.122 6.26015C5.159 3.58915 7.977 1.70515 11.204 0.803152C12.737 0.374152 14.277 0.182152 15.857 0.0921522Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_328_131_158 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                    canvas.clipPath(path);
                    canvas.drawPath(
                        path.shift(Offset(0, -0.5)),
                        Paint() 
                        ..blendMode = BlendMode.srcOver
                        ..color=Color.fromRGBO(255, 255, 255, 1)
                        ..style = PaintingStyle.stroke
                        ..strokeWidth = 0
                        ..maskFilter = MaskFilter.blur(BlurStyle.normal, 0 * 0.57735 + 0.5)
                    );
                   
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                    canvas.clipPath(path);
                    canvas.drawPath(
                        path.shift(Offset(0, -0.5)),
                        Paint() 
                        ..blendMode = BlendMode.srcOver
                        ..color=Color.fromRGBO(255, 255, 255, 1)
                        ..style = PaintingStyle.stroke
                        ..strokeWidth = 0
                        ..maskFilter = MaskFilter.blur(BlurStyle.normal, 0 * 0.57735 + 0.5)
                    );
                   
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_328_131_159 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_328_131_159({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(219, 224, 231, 1), Color.fromRGBO(248, 251, 255, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(-0.608247413815486, -0.9381443143032351),
                    end: Alignment(0.5689653568061681, 0.8218391445763475),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(27, 27)))
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M13.5 27C20.9558 27 27 20.9558 27 13.5C27 6.04416 20.9558 0 13.5 0C6.04416 0 0 6.04416 0 13.5C0 20.9558 6.04416 27 13.5 27Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(245, 248, 253, 1), Color.fromRGBO(189, 196, 209, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(-0.6954022803801437, -0.6609195583380747),
                    end: Alignment(0.48850583819499516, 0.9137930695982837),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(27, 27)))
            ,];
final List<Path> strokeGeometries = [((){
                    var path = parseSvgPathData('M13.5 28C21.5081 28 28 21.5081 28 13.5L26 13.5C26 20.4036 20.4036 26 13.5 26L13.5 28ZM28 13.5C28 5.49187 21.5081 -1 13.5 -1L13.5 1C20.4036 1 26 6.59644 26 13.5L28 13.5ZM13.5 -1C5.49187 -1 -1 5.49187 -1 13.5L1 13.5C1 6.59644 6.59644 1 13.5 1L13.5 -1ZM-1 13.5C-1 21.5081 5.49187 28 13.5 28L13.5 26C6.59644 26 1 20.4036 1 13.5L-1 13.5Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];

            @override
            bool shouldRepaint(Node_I1_328_131_159 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        
                        try{
                            canvas.drawPath(
                                path.shift(Offset(1, 2))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(142, 155, 174, 0.20000000298023224)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 8 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(1, 2);
                            canvas.drawShadow(path, Color.fromRGBO(142, 155, 174, 0.20000000298023224), 8, true);
                            canvas.translate(-1, -2);
                        }
                    canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        canvas.clipPath(fillPath);
                        
                        try{
                            canvas.drawPath(
                                path.shift(Offset(1, 2))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(142, 155, 174, 0.20000000298023224)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 8 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(1, 2);
                            canvas.drawShadow(path, Color.fromRGBO(142, 155, 174, 0.20000000298023224), 8, true);
                            canvas.translate(-1, -2);
                        }
                    canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_1_306 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_306({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(244, 247, 251, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(255, 255, 255, 0.5)
                ..strokeWidth = 1
                ..style = PaintingStyle.stroke
            ,
];
            
            @override
            bool shouldRepaint(Node_1_306 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(22),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(22),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(Offset(0 - 0.5, 0 - 0.5), Offset(w + 0.5, h + 0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    
                        try{
                            canvas.drawPath(
                                path.shift(Offset(0, 20))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(59, 64, 86, 0.15000000596046448)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 40 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(0, 20);
                            canvas.drawShadow(path, Color.fromRGBO(59, 64, 86, 0.15000000596046448), 40, true);
                            canvas.translate(0, -20);
                        }
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_307 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_307({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_307 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = RoundedRectangleBorder(
                            borderRadius: BorderRadius.only(
                                topLeft: Radius.circular(0),
                                topRight: Radius.circular(0),
                                bottomLeft: Radius.circular(0),
                                bottomRight: Radius.circular(0),
                            ),
                            side: BorderSide()
                        ).getInnerPath(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = RoundedRectangleBorder(
                            borderRadius: BorderRadius.only(
                                topLeft: Radius.circular(0),
                                topRight: Radius.circular(0),
                                bottomLeft: Radius.circular(0),
                                bottomRight: Radius.circular(0),
                            ),
                            side: BorderSide()
                        ).getInnerPath(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_308 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_308({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_308 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = RoundedRectangleBorder(
                            borderRadius: BorderRadius.only(
                                topLeft: Radius.circular(22),
                                topRight: Radius.circular(22),
                                bottomLeft: Radius.circular(0),
                                bottomRight: Radius.circular(0),
                            ),
                            side: BorderSide()
                        ).getInnerPath(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = RoundedRectangleBorder(
                            borderRadius: BorderRadius.only(
                                topLeft: Radius.circular(22),
                                topRight: Radius.circular(22),
                                bottomLeft: Radius.circular(0),
                                bottomRight: Radius.circular(0),
                            ),
                            side: BorderSide()
                        ).getInnerPath(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_309 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_309({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_309 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_310 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_310({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(0, 0, 0, 0.10000000149011612)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M22 11C22 17.0751 17.0751 22 11 22C4.92487 22 0 17.0751 0 11C0 4.92487 4.92487 0 11 0C17.0751 0 22 4.92487 22 11Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_1_310 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        canvas.clipPath(fillPath);
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_1_312 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_312({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_312 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_313 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_313({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_313 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_316 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_316({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_316 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_I1_316_131_163 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_316_131_163({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_I1_316_131_163 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_I1_316_131_165 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_316_131_165({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_I1_316_131_165 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_I1_316_131_166 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_316_131_166({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(201, 206, 215, 1), Color.fromRGBO(225, 232, 241, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(0.5689655296533958, -1.0000000000000027),
                    end: Alignment(0.5689655296533958, 0.9032258906175898),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(51, 31.000152587890625)))
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M15.857 0.0921522C17.597 -0.0078478 19.335 0.0001522 21.075 0.0001522C21.087 0.0001522 29.892 0.0001522 29.892 0.0001522C29.892 0.0001522 29.892 0.0001522 29.892 0.0001522C31.666 0.0001522 33.404 -0.0078478 35.143 0.0921522C36.724 0.182152 38.264 0.374152 39.797 0.803152C43.024 1.70515 45.842 3.58915 47.879 6.26015C49.904 8.91415 51 12.1632 51 15.4992C51 18.8392 49.904 22.0862 47.879 24.7402C45.842 27.4102 43.024 29.2952 39.797 30.1972C38.264 30.6262 36.724 30.8172 35.143 30.9082C33.404 31.0082 31.666 30.9992 29.926 30.9992C29.9141 30.9992 21.254 31.0001 21.1088 31.0002C21.1043 31.0002 21.1047 31.0002 21.1002 31.0001C19.3306 30.9992 17.5948 31.008 15.857 30.9082C14.277 30.8172 12.737 30.6262 11.204 30.1972C7.977 29.2952 5.159 27.4102 3.122 24.7402C1.097 22.0862 0 18.8392 0 15.5002C0 12.1632 1.097 8.91415 3.122 6.26015C5.159 3.58915 7.977 1.70515 11.204 0.803152C12.737 0.374152 14.277 0.182152 15.857 0.0921522Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_316_131_166 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                    canvas.clipPath(path);
                    canvas.drawPath(
                        path.shift(Offset(0, -0.5)),
                        Paint() 
                        ..blendMode = BlendMode.srcOver
                        ..color=Color.fromRGBO(255, 255, 255, 1)
                        ..style = PaintingStyle.stroke
                        ..strokeWidth = 0
                        ..maskFilter = MaskFilter.blur(BlurStyle.normal, 0 * 0.57735 + 0.5)
                    );
                   
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                    canvas.clipPath(path);
                    canvas.drawPath(
                        path.shift(Offset(0, -0.5)),
                        Paint() 
                        ..blendMode = BlendMode.srcOver
                        ..color=Color.fromRGBO(255, 255, 255, 1)
                        ..style = PaintingStyle.stroke
                        ..strokeWidth = 0
                        ..maskFilter = MaskFilter.blur(BlurStyle.normal, 0 * 0.57735 + 0.5)
                    );
                   
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_316_131_167 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_316_131_167({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(152, 94, 225, 1), Color.fromRGBO(242, 86, 86, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(-0.444444357359411, -0.666666715987861),
                    end: Alignment(1, 1),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(27, 27)))
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M13.5 27C20.9558 27 27 20.9558 27 13.5C27 6.04416 20.9558 0 13.5 0C6.04416 0 0 6.04416 0 13.5C0 20.9558 6.04416 27 13.5 27Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(255, 255, 255, 0.5), Color.fromRGBO(0, 0, 0, 0.5)],
                    stops: [0, 1],
                 
                    begin: Alignment(0, -1),
                    end: Alignment(0, 0.9999999999999998),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(27, 27)))
            ,];
final List<Path> strokeGeometries = [((){
                    var path = parseSvgPathData('M13.5 28C21.5081 28 28 21.5081 28 13.5L26 13.5C26 20.4036 20.4036 26 13.5 26L13.5 28ZM28 13.5C28 5.49187 21.5081 -1 13.5 -1L13.5 1C20.4036 1 26 6.59644 26 13.5L28 13.5ZM13.5 -1C5.49187 -1 -1 5.49187 -1 13.5L1 13.5C1 6.59644 6.59644 1 13.5 1L13.5 -1ZM-1 13.5C-1 21.5081 5.49187 28 13.5 28L13.5 26C6.59644 26 1 20.4036 1 13.5L-1 13.5Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];

            @override
            bool shouldRepaint(Node_I1_316_131_167 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        
                        try{
                            canvas.drawPath(
                                path.shift(Offset(1, 2))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(109, 34, 43, 0.30000001192092896)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 8 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(1, 2);
                            canvas.drawShadow(path, Color.fromRGBO(109, 34, 43, 0.30000001192092896), 8, true);
                            canvas.translate(-1, -2);
                        }
                    canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        canvas.clipPath(fillPath);
                        
                        try{
                            canvas.drawPath(
                                path.shift(Offset(1, 2))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(109, 34, 43, 0.30000001192092896)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 8 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(1, 2);
                            canvas.drawShadow(path, Color.fromRGBO(109, 34, 43, 0.30000001192092896), 8, true);
                            canvas.translate(-1, -2);
                        }
                    canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_1_428 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_428({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_428 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_429 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_429({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(255, 255, 255, 0.009999999776482582)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_429 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_430 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_430({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(83, 85, 114, 1), Color.fromRGBO(49, 55, 74, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(0, -1),
                    end: Alignment(0, 0.9999999999999998),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(175.33065795898438, 88)))
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M0 0L56 0C124.601 0 100 88 164 88C228 88 0 88 0 88L0 0Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_1_430 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        
                        try{
                            canvas.drawPath(
                                path.shift(Offset(0, -0.5))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(255, 255, 255, 0.30000001192092896)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 0 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(0, -0.5);
                            canvas.drawShadow(path, Color.fromRGBO(255, 255, 255, 0.30000001192092896), 0, true);
                            canvas.translate(0, 0.5);
                        }
                    canvas.drawPath(path, paint);
                    canvas.clipPath(path);
                    canvas.drawPath(
                        path.shift(Offset(0, 0.5)),
                        Paint() 
                        ..blendMode = BlendMode.srcOver
                        ..color=Color.fromRGBO(0, 0, 0, 0.25)
                        ..style = PaintingStyle.stroke
                        ..strokeWidth = 0
                        ..maskFilter = MaskFilter.blur(BlurStyle.normal, 0 * 0.57735 + 0.5)
                    );
                   
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        canvas.clipPath(fillPath);
                        
                        try{
                            canvas.drawPath(
                                path.shift(Offset(0, -0.5))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(255, 255, 255, 0.30000001192092896)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 0 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(0, -0.5);
                            canvas.drawShadow(path, Color.fromRGBO(255, 255, 255, 0.30000001192092896), 0, true);
                            canvas.translate(0, 0.5);
                        }
                    canvas.drawPath(path, paint);
                    canvas.clipPath(path);
                    canvas.drawPath(
                        path.shift(Offset(0, 0.5)),
                        Paint() 
                        ..blendMode = BlendMode.srcOver
                        ..color=Color.fromRGBO(0, 0, 0, 0.25)
                        ..style = PaintingStyle.stroke
                        ..strokeWidth = 0
                        ..maskFilter = MaskFilter.blur(BlurStyle.normal, 0 * 0.57735 + 0.5)
                    );
                   
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_1_431 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_431({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(83, 85, 114, 1), Color.fromRGBO(49, 55, 74, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(0, -1),
                    end: Alignment(0, 0.9999999999999998),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(175.33065795898438, 88)))
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M0 0L56 0C124.601 0 100 88 164 88C228 88 0 88 0 88L0 0Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_1_431 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        
                        try{
                            canvas.drawPath(
                                path.shift(Offset(0, -0.5))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(255, 255, 255, 0.30000001192092896)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 0 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(0, -0.5);
                            canvas.drawShadow(path, Color.fromRGBO(255, 255, 255, 0.30000001192092896), 0, true);
                            canvas.translate(0, 0.5);
                        }
                    canvas.drawPath(path, paint);
                    canvas.clipPath(path);
                    canvas.drawPath(
                        path.shift(Offset(0, 0.5)),
                        Paint() 
                        ..blendMode = BlendMode.srcOver
                        ..color=Color.fromRGBO(0, 0, 0, 0.25)
                        ..style = PaintingStyle.stroke
                        ..strokeWidth = 0
                        ..maskFilter = MaskFilter.blur(BlurStyle.normal, 0 * 0.57735 + 0.5)
                    );
                   
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        canvas.clipPath(fillPath);
                        
                        try{
                            canvas.drawPath(
                                path.shift(Offset(0, -0.5))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(255, 255, 255, 0.30000001192092896)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 0 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(0, -0.5);
                            canvas.drawShadow(path, Color.fromRGBO(255, 255, 255, 0.30000001192092896), 0, true);
                            canvas.translate(0, 0.5);
                        }
                    canvas.drawPath(path, paint);
                    canvas.clipPath(path);
                    canvas.drawPath(
                        path.shift(Offset(0, 0.5)),
                        Paint() 
                        ..blendMode = BlendMode.srcOver
                        ..color=Color.fromRGBO(0, 0, 0, 0.25)
                        ..style = PaintingStyle.stroke
                        ..strokeWidth = 0
                        ..maskFilter = MaskFilter.blur(BlurStyle.normal, 0 * 0.57735 + 0.5)
                    );
                   
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_1_432 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_432({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_432 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_433 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_433({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_433 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_5_52 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_5_52({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(255, 255, 255, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M6.96767 24L22.985 24C24.9724 24 26.1435 22.9213 26.1435 21.1781L26.1435 11.4157L27.2437 12.2547C27.5986 12.538 28.0244 12.7341 28.4503 12.7341C29.3612 12.7341 30 12.2111 30 11.4048C30 10.969 29.7871 10.555 29.3849 10.2499L26.1435 7.74396L26.1435 2.89547C26.1435 2.38338 25.7886 2.05652 25.2445 2.05652L23.0678 2.05652C22.5118 2.05652 22.1451 2.38338 22.1451 2.89547L22.1451 4.63875L17.082 0.727273C15.8281 -0.242424 14.1956 -0.242424 12.9416 0.727273L0.615142 10.2608C0.212934 10.5659 0 10.9908 0 11.3939C0 12.1566 0.603312 12.7341 1.54968 12.7341C1.98738 12.7341 2.41325 12.538 2.76814 12.2547L3.80915 11.4593L3.80915 21.1781C3.80915 22.9213 4.98028 24 6.96767 24ZM18.3833 14.303C18.3833 13.78 18.0166 13.4423 17.4487 13.4423L12.5513 13.4423C11.9834 13.4423 11.6049 13.78 11.6049 14.303L11.6049 21.189L7.96136 21.189C7.25158 21.189 6.8612 20.8185 6.8612 20.1648L6.8612 9.09499L14.3612 3.3095C14.7752 2.97174 15.2366 2.97174 15.6743 3.3095L23.0915 9.05141L23.0915 20.1648C23.0915 20.8185 22.7011 21.189 22.0032 21.189L18.3833 21.189L18.3833 14.303Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_5_52 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        path = strokeAlign('OUTSIDE', path, fillPath, 1);
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_1_435 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_435({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_435 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_I1_435_8_151 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_435_8_151({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_I1_435_8_151 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_I1_435_8_152 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_435_8_152({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(255, 59, 48, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_I1_435_8_152 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_I1_435_8_153 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_435_8_153({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(255, 59, 48, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M28 0L0 0L0 28L28 28L28 0ZM26.5 1.5L1.5 1.5L1.5 26.5L26.5 26.5L26.5 1.5Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_435_8_153 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_435_8_154 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_435_8_154({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(255, 59, 48, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_I1_435_8_154 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_I1_435_8_155 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_435_8_155({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(255, 59, 48, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_I1_435_8_155 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_436 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_436({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_436 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_I1_436_8_179 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_436_8_179({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_I1_436_8_179 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_I1_436_8_180 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_436_8_180({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(255, 59, 48, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_I1_436_8_180 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_I1_436_8_181 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_436_8_181({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(255, 59, 48, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M35 0L0 0L0 36.2727L35 36.2727L35 0ZM33.125 1.94318L1.875 1.94318L1.875 34.3295L33.125 34.3295L33.125 1.94318Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_436_8_181 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_436_8_182 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_436_8_182({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(255, 59, 48, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_I1_436_8_182 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_I1_436_8_183 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_436_8_183({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(255, 59, 48, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_I1_436_8_183 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_437 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_437({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_437 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_I1_437_135_124 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_437_135_124({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(219, 224, 231, 0.20000000298023224), Color.fromRGBO(248, 251, 255, 0.20000000298023224)],
                    stops: [0, 1],
                 
                    begin: Alignment(-0.608247413815486, -0.9381443143032351),
                    end: Alignment(0.5689653568061681, 0.8218391445763475),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(84, 84)))
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M84 42C84 65.196 65.196 84 42 84C18.804 84 0 65.196 0 42C0 18.804 18.804 0 42 0C65.196 0 84 18.804 84 42Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(216, 216, 216, 0), Color.fromRGBO(255, 255, 255, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(-0.6954022803801437, -0.6609195583380747),
                    end: Alignment(0.48850583819499516, 0.9137930695982837),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(84, 84)))
            ,];
final List<Path> strokeGeometries = [((){
                    var path = parseSvgPathData('M83.6818 42C83.6818 65.0202 65.0202 83.6818 42 83.6818L42 84.3182C65.3717 84.3182 84.3182 65.3717 84.3182 42L83.6818 42ZM42 83.6818C18.9798 83.6818 0.318182 65.0202 0.318182 42L-0.318182 42C-0.318182 65.3717 18.6283 84.3182 42 84.3182L42 83.6818ZM0.318182 42C0.318182 18.9798 18.9798 0.318182 42 0.318182L42 -0.318182C18.6283 -0.318182 -0.318182 18.6283 -0.318182 42L0.318182 42ZM42 0.318182C65.0202 0.318182 83.6818 18.9798 83.6818 42L84.3182 42C84.3182 18.6283 65.3717 -0.318182 42 -0.318182L42 0.318182Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];

            @override
            bool shouldRepaint(Node_I1_437_135_124 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        
                        try{
                            canvas.drawPath(
                                path.shift(Offset(5.090909004211426, 5.090909004211426))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(142, 155, 174, 0.20000000298023224)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 12.727272033691406 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(5.090909004211426, 5.090909004211426);
                            canvas.drawShadow(path, Color.fromRGBO(142, 155, 174, 0.20000000298023224), 12.727272033691406, true);
                            canvas.translate(-5.090909004211426, -5.090909004211426);
                        }
                    canvas.drawPath(path, paint);
                    canvas.clipPath(path);
                    canvas.drawPath(
                        path.shift(Offset(-0.28865981101989746, -0.5773196220397949)),
                        Paint() 
                        ..blendMode = BlendMode.srcOver
                        ..color=Color.fromRGBO(255, 255, 255, 0.6000000238418579)
                        ..style = PaintingStyle.stroke
                        ..strokeWidth = 0
                        ..maskFilter = MaskFilter.blur(BlurStyle.normal, 0 * 0.57735 + 0.5)
                    );
                   
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        
                        try{
                            canvas.drawPath(
                                path.shift(Offset(5.090909004211426, 5.090909004211426))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(142, 155, 174, 0.20000000298023224)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 12.727272033691406 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(5.090909004211426, 5.090909004211426);
                            canvas.drawShadow(path, Color.fromRGBO(142, 155, 174, 0.20000000298023224), 12.727272033691406, true);
                            canvas.translate(-5.090909004211426, -5.090909004211426);
                        }
                    canvas.drawPath(path, paint);
                    canvas.clipPath(path);
                    canvas.drawPath(
                        path.shift(Offset(-0.28865981101989746, -0.5773196220397949)),
                        Paint() 
                        ..blendMode = BlendMode.srcOver
                        ..color=Color.fromRGBO(255, 255, 255, 0.6000000238418579)
                        ..style = PaintingStyle.stroke
                        ..strokeWidth = 0
                        ..maskFilter = MaskFilter.blur(BlurStyle.normal, 0 * 0.57735 + 0.5)
                    );
                   
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_437_135_125 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_437_135_125({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(245, 245, 249, 1), Color.fromRGBO(218, 223, 231, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(-0.6000000575515949, -0.7833333161887179),
                    end: Alignment(0.4833333169337768, 0.8499999699907175),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(60, 60)))
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M60 30C60 46.5685 46.5685 60 30 60C13.4315 60 0 46.5685 0 30C0 13.4315 13.4315 0 30 0C46.5685 0 60 13.4315 60 30Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(255, 255, 255, 1), Color.fromRGBO(174, 174, 174, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(-0.6333332995573671, -0.5666666845480595),
                    end: Alignment(0.4333333448568977, 0.9000000250339515),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(60, 60)))
            ,];
final List<Path> strokeGeometries = [((){
                    var path = parseSvgPathData('M59.8 30C59.8 46.4581 46.4581 59.8 30 59.8L30 60.2C46.679 60.2 60.2 46.679 60.2 30L59.8 30ZM30 59.8C13.5419 59.8 0.2 46.4581 0.2 30L-0.2 30C-0.2 46.679 13.321 60.2 30 60.2L30 59.8ZM0.2 30C0.2 13.5419 13.5419 0.2 30 0.2L30 -0.2C13.321 -0.2 -0.2 13.321 -0.2 30L0.2 30ZM30 0.2C46.4581 0.2 59.8 13.5419 59.8 30L60.2 30C60.2 13.321 46.679 -0.2 30 -0.2L30 0.2Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];

            @override
            bool shouldRepaint(Node_I1_437_135_125 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        
                        try{
                            canvas.drawPath(
                                path.shift(Offset(0, 9))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(142, 155, 174, 0.20000000298023224)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 18 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(0, 9);
                            canvas.drawShadow(path, Color.fromRGBO(142, 155, 174, 0.20000000298023224), 18, true);
                            canvas.translate(0, -9);
                        }
                    canvas.drawPath(path, paint);
                    canvas.clipPath(path);
                    canvas.drawPath(
                        path.shift(Offset(1, 1)),
                        Paint() 
                        ..blendMode = BlendMode.srcOver
                        ..color=Color.fromRGBO(255, 255, 255, 0.5)
                        ..style = PaintingStyle.stroke
                        ..strokeWidth = 2
                        ..maskFilter = MaskFilter.blur(BlurStyle.normal, 2 * 0.57735 + 0.5)
                    );
                   
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        canvas.clipPath(fillPath);
                        
                        try{
                            canvas.drawPath(
                                path.shift(Offset(0, 9))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(142, 155, 174, 0.20000000298023224)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 18 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(0, 9);
                            canvas.drawShadow(path, Color.fromRGBO(142, 155, 174, 0.20000000298023224), 18, true);
                            canvas.translate(0, -9);
                        }
                    canvas.drawPath(path, paint);
                    canvas.clipPath(path);
                    canvas.drawPath(
                        path.shift(Offset(1, 1)),
                        Paint() 
                        ..blendMode = BlendMode.srcOver
                        ..color=Color.fromRGBO(255, 255, 255, 0.5)
                        ..style = PaintingStyle.stroke
                        ..strokeWidth = 2
                        ..maskFilter = MaskFilter.blur(BlurStyle.normal, 2 * 0.57735 + 0.5)
                    );
                   
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_437_135_126 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_437_135_126({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(255, 255, 255, 0), Color.fromRGBO(239, 241, 245, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(-0.6000000575515949, -0.7833333161887179),
                    end: Alignment(0.4833333169337768, 0.8499999699907175),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(60, 60)))
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M60 30C60 46.5685 46.5685 60 30 60C13.4315 60 0 46.5685 0 30C0 13.4315 13.4315 0 30 0C46.5685 0 60 13.4315 60 30ZM4.5 30C4.5 44.0833 15.9167 55.5 30 55.5C44.0833 55.5 55.5 44.0833 55.5 30C55.5 15.9167 44.0833 4.5 30 4.5C15.9167 4.5 4.5 15.9167 4.5 30Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_437_135_126 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        
                    paint.maskFilter = MaskFilter.blur(BlurStyle.normal, 5 * 0.57735 + 0.5);
                    canvas.drawPath(path, paint);
                    
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        canvas.clipPath(fillPath);
                        
                    paint.maskFilter = MaskFilter.blur(BlurStyle.normal, 5 * 0.57735 + 0.5);
                    canvas.drawPath(path, paint);
                    
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_437_135_127 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_437_135_127({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(218, 223, 231, 1), Color.fromRGBO(245, 245, 249, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(-0.6999999807238583, -0.6199999938130375),
                    end: Alignment(0.579999968230724, 0.8400000216960894),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(50, 50)))
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M50 25C50 38.8071 38.8071 50 25 50C11.1929 50 0 38.8071 0 25C0 11.1929 11.1929 0 25 0C38.8071 0 50 11.1929 50 25Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(216, 216, 216, 0), Color.fromRGBO(255, 255, 255, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(-0.4600000224947921, -0.8600000030398365),
                    end: Alignment(0.5599999625086793, 0.8399999329209353),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(50, 50)))
            ,];
final List<Path> strokeGeometries = [((){
                    var path = parseSvgPathData('M49.9 25C49.9 38.7519 38.7519 49.9 25 49.9L25 50.1C38.8623 50.1 50.1 38.8623 50.1 25L49.9 25ZM25 49.9C11.2481 49.9 0.1 38.7519 0.1 25L-0.1 25C-0.1 38.8623 11.1377 50.1 25 50.1L25 49.9ZM0.1 25C0.1 11.2481 11.2481 0.1 25 0.1L25 -0.1C11.1377 -0.1 -0.1 11.1377 -0.1 25L0.1 25ZM25 0.1C38.7519 0.1 49.9 11.2481 49.9 25L50.1 25C50.1 11.1377 38.8623 -0.1 25 -0.1L25 0.1Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];

            @override
            bool shouldRepaint(Node_I1_437_135_127 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_437_135_128 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_437_135_128({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_I1_437_135_128 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_I1_437_135_128_20_155 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_437_135_128_20_155({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_I1_437_135_128_20_155 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_I1_437_135_128_20_156 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_437_135_128_20_156({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(255, 59, 48, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_I1_437_135_128_20_156 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_I1_437_135_128_20_157 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_437_135_128_20_157({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(255, 59, 48, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M28 0L0 0L0 28L28 28L28 0ZM26.5 1.5L1.5 1.5L1.5 26.5L26.5 26.5L26.5 1.5Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_437_135_128_20_157 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_437_135_128_20_158 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_437_135_128_20_158({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(255, 59, 48, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_I1_437_135_128_20_158 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_I1_437_135_128_20_159 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_437_135_128_20_159({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(255, 59, 48, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_I1_437_135_128_20_159 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Widget_1_344 extends StatefulWidget {
            
        final String nodeName = r'''Switch''';
        final String name = r'''Switch''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_344({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_344 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_344(properties:properties);
        }
            @override
                _Widget_1_344State createState() => _Widget_1_344State(this.properties);
            }
            class _Widget_1_344State extends BaseState<Widget_1_344> {
                bool visible = true;
                bool isLoaded = false;
                double width = 51;
                double height = 31;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Switch''', id: '1:344', componentName:r'''Switch''');
                
                _Widget_1_344State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Switch''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Switch');
            }            
            
            var painter = Node_1_344();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Switch''', id: '1:344', widget: this, componentName:r'''Switch''');
                ComponentDescendantNotification(name: r'''Switch''', id: '1:344', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: GestureDetector(
                                onTap:() {
                                    
            if(triggersBuiltInEvents) {
                // if(Navigator.canPop(context)){
                //     Navigator.pop(context);
                // }
                globals.navigatorKey.currentState?.pushReplacement(
                    PageRouteBuilder(
                        pageBuilder: (context, animation1, animation2) => Widget_1_25(),
                        
                    ),
                );
            }
            
                                },
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 51,
                                height: 31,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, 0.00000492219002024008),
                                                                        minWidth: 51 + 0, maxWidth: 51 + 0,
                                                                        minHeight: 31.000152587890625 + 0, maxHeight: 31.000152587890625 + 0,
                                                                        child:Container(
                                                                        alignment: Alignment(0, 0.00000492219002024008),
                                                                        margin: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 51,
                                                                        height: 31.000152587890625,
                                                                        
                                                                        child: Widget_I1_344_10_2584())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(0.392156862745098, 0),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0.392156862745098, 0),
                                                                        margin: EdgeInsets.fromLTRB((){
                            double s = constraints.widthConstraints().maxWidth, r = 0, n = 27, d = 2.3181818181818183, o = 25.5;
                            r = (((s / d + s / o + n) > s) ? (s - n) / d : r = s / d).abs();
                            return r as double;
                        }(), (){
                        double s = constraints.heightConstraints().maxHeight, r = 0, n = 27, d = 15.5, o = 15.5;
                        r = (((s / d + s / o + n) > s) ? (s - n) / d : r = s / d).abs();
                        return r as double;
                    }(), (){
                            double s = constraints.widthConstraints().maxWidth, r = 0, n = 27, d = 25.5, o = 2.3181818181818183;
                            r = (((s / d + s / o + n) > s) ? (s - n) / d : r = s / d).abs();
                            return r as double;
                        }(), (){
                        double s = constraints.heightConstraints().maxHeight, r = 0, n = 27, d = 15.5, o = 15.5;
                        r = (((s / d + s / o + n) > s) ? (s - n) / d : r = s / d).abs();
                        return r as double;
                    }()),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 27,
                                                                        height: 27,
                                                                        
                                                                        child: Widget_I1_344_10_2585()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                );
            }
        }
        

        class Widget_1_361 extends StatefulWidget {
            
        final String nodeName = r'''Switch''';
        final String name = r'''Switch''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_361({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_361 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_361(properties:properties);
        }
            @override
                _Widget_1_361State createState() => _Widget_1_361State(this.properties);
            }
            class _Widget_1_361State extends BaseState<Widget_1_361> {
                bool visible = true;
                bool isLoaded = false;
                double width = 51;
                double height = 31;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Switch''', id: '1:361', componentName:r'''Switch''');
                
                _Widget_1_361State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Switch''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Switch');
            }            
            
            var painter = Node_1_361();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Switch''', id: '1:361', widget: this, componentName:r'''Switch''');
                ComponentDescendantNotification(name: r'''Switch''', id: '1:361', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: GestureDetector(
                                onTap:() {
                                    
            if(triggersBuiltInEvents) {
                // if(Navigator.canPop(context)){
                //     Navigator.pop(context);
                // }
                globals.navigatorKey.currentState?.pushReplacement(
                    PageRouteBuilder(
                        pageBuilder: (context, animation1, animation2) => Widget_1_25(),
                        
                    ),
                );
            }
            
                                },
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 51,
                                height: 31,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, 0.00000492219002024008),
                                                                        minWidth: 51 + 0, maxWidth: 51 + 0,
                                                                        minHeight: 31.000152587890625 + 0, maxHeight: 31.000152587890625 + 0,
                                                                        child:Container(
                                                                        alignment: Alignment(0, 0.00000492219002024008),
                                                                        margin: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 51,
                                                                        height: 31.000152587890625,
                                                                        
                                                                        child: Widget_I1_361_10_2584())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(0.392156862745098, 0),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0.392156862745098, 0),
                                                                        margin: EdgeInsets.fromLTRB((){
                            double s = constraints.widthConstraints().maxWidth, r = 0, n = 27, d = 2.3181818181818183, o = 25.5;
                            r = (((s / d + s / o + n) > s) ? (s - n) / d : r = s / d).abs();
                            return r as double;
                        }(), (){
                        double s = constraints.heightConstraints().maxHeight, r = 0, n = 27, d = 15.5, o = 15.5;
                        r = (((s / d + s / o + n) > s) ? (s - n) / d : r = s / d).abs();
                        return r as double;
                    }(), (){
                            double s = constraints.widthConstraints().maxWidth, r = 0, n = 27, d = 25.5, o = 2.3181818181818183;
                            r = (((s / d + s / o + n) > s) ? (s - n) / d : r = s / d).abs();
                            return r as double;
                        }(), (){
                        double s = constraints.heightConstraints().maxHeight, r = 0, n = 27, d = 15.5, o = 15.5;
                        r = (((s / d + s / o + n) > s) ? (s - n) / d : r = s / d).abs();
                        return r as double;
                    }()),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 27,
                                                                        height: 27,
                                                                        
                                                                        child: Widget_I1_361_10_2585()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                );
            }
        }
        

        class Widget_1_397 extends StatefulWidget {
            
        final String nodeName = r'''Segmented Control''';
        final String name = r'''Segmented Control''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_397({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_397 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_397(properties:properties);
        }
            @override
                _Widget_1_397State createState() => _Widget_1_397State(this.properties);
            }
            class _Widget_1_397State extends BaseState<Widget_1_397> {
                bool visible = true;
                bool isLoaded = false;
                double width = 329;
                double height = 32.00235366821289;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Segmented Control''', id: '1:397', componentName:r'''Segmented Control''');
                
                _Widget_1_397State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Segmented Control''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Segmented Control');
            }            
            
            var painter = Node_1_397();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Segmented Control''', id: '1:397', widget: this, componentName:r'''Segmented Control''');
                ComponentDescendantNotification(name: r'''Segmented Control''', id: '1:397', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: GestureDetector(
                                onTap:() {
                                    
            if(triggersBuiltInEvents) {
                // if(Navigator.canPop(context)){
                //     Navigator.pop(context);
                // }
                globals.navigatorKey.currentState?.pushReplacement(
                    PageRouteBuilder(
                        pageBuilder: (context, animation1, animation2) => Widget_1_44(),
                        
                    ),
                );
            }
            
                                },
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 329,
                                height: 32.00235366821289,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.hardEdge,
                    children:[
            
                                                    Widget_I1_397_135_108(key:UniqueKey()), 
                                                    SizedBox(width: 0), 
                                                    Widget_I1_397_135_110(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                );
            }
        }
        

        class Widget_1_328 extends StatefulWidget {
            
        final String nodeName = r'''Switch''';
        final String name = r'''Switch''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_328({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_328 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_328(properties:properties);
        }
            @override
                _Widget_1_328State createState() => _Widget_1_328State(this.properties);
            }
            class _Widget_1_328State extends BaseState<Widget_1_328> {
                bool visible = true;
                bool isLoaded = false;
                double width = 135;
                double height = 31;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Switch''', id: '1:328', componentName:r'''Switch''');
                
                _Widget_1_328State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Switch''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Switch');
            }            
            
            var painter = Node_1_328();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Switch''', id: '1:328', widget: this, componentName:r'''Switch''');
                ComponentDescendantNotification(name: r'''Switch''', id: '1:328', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: GestureDetector(
                                onTap:() {
                                    
            if(triggersBuiltInEvents) {
                // if(Navigator.canPop(context)){
                //     Navigator.pop(context);
                // }
                globals.navigatorKey.currentState?.pushReplacement(
                    PageRouteBuilder(
                        pageBuilder: (context, animation1, animation2) => Widget_1_15(),
                        
                    ),
                );
            }
            
                                },
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 135,
                                height: 31,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.horizontal,
                    //spacing: 20,
                    //runSpacing: 20, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_I1_328_131_155(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                );
            }
        }
        

        class Widget_1_316 extends StatefulWidget {
            
        final String nodeName = r'''Switch''';
        final String name = r'''Switch''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_316({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_316 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_316(properties:properties);
        }
            @override
                _Widget_1_316State createState() => _Widget_1_316State(this.properties);
            }
            class _Widget_1_316State extends BaseState<Widget_1_316> {
                bool visible = true;
                bool isLoaded = false;
                double width = 135;
                double height = 31;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Switch''', id: '1:316', componentName:r'''Switch''');
                
                _Widget_1_316State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Switch''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Switch');
            }            
            
            var painter = Node_1_316();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Switch''', id: '1:316', widget: this, componentName:r'''Switch''');
                ComponentDescendantNotification(name: r'''Switch''', id: '1:316', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: GestureDetector(
                                onTap:() {
                                    
            if(triggersBuiltInEvents) {
                // if(Navigator.canPop(context)){
                //     Navigator.pop(context);
                // }
                globals.navigatorKey.currentState?.pushReplacement(
                    PageRouteBuilder(
                        pageBuilder: (context, animation1, animation2) => Widget_1_9(),
                        
                    ),
                );
            }
            
                                },
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 135,
                                height: 31,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.horizontal,
                    //spacing: 20,
                    //runSpacing: 20, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_I1_316_131_163(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                );
            }
        }
        

        class Widget_1_435 extends StatefulWidget {
            
        final String nodeName = r'''Stats''';
        final String name = r'''Stats''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_435({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_435 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_435(properties:properties);
        }
            @override
                _Widget_1_435State createState() => _Widget_1_435State(this.properties);
            }
            class _Widget_1_435State extends BaseState<Widget_1_435> {
                bool visible = false;
                bool isLoaded = false;
                double width = 44;
                double height = 44;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Stats''', id: '1:435', componentName:r'''Stats''');
                
                _Widget_1_435State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Stats''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Stats');
            }            
            
            var painter = Node_1_435();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Stats''', id: '1:435', widget: this, componentName:r'''Stats''');
                ComponentDescendantNotification(name: r'''Stats''', id: '1:435', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 44,
                                height: 44,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, 0),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0, 0),
                                                                        margin: EdgeInsets.fromLTRB(constraints.widthConstraints().maxWidth / 5.5, constraints.heightConstraints().maxHeight / 5.5, constraints.widthConstraints().maxWidth / 5.5, constraints.heightConstraints().maxHeight / 5.5),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                                                        
                                                                        
                                                                        
                                                                        child: 
                                                                    TransparentPointer(
                                                                        child: Widget_I1_435_8_151()
                                                                    )
                                                                    )), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, 0),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0, 0),
                                                                        margin: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        
                                                                        
                                                                        
                                                                        child: Widget_I1_435_8_156()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_436 extends StatefulWidget {
            
        final String nodeName = r'''Profile 2''';
        final String name = r'''Profile 2''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_436({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_436 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_436(properties:properties);
        }
            @override
                _Widget_1_436State createState() => _Widget_1_436State(this.properties);
            }
            class _Widget_1_436State extends BaseState<Widget_1_436> {
                bool visible = true;
                bool isLoaded = false;
                double width = 55;
                double height = 57;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Profile 2''', id: '1:436', componentName:r'''Profile 2''');
                
                _Widget_1_436State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Profile 2''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Profile 2');
            }            
            
            var painter = Node_1_436();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Profile 2''', id: '1:436', widget: this, componentName:r'''Profile 2''');
                ComponentDescendantNotification(name: r'''Profile 2''', id: '1:436', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 55,
                                height: 57,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, 0),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0, 0),
                                                                        margin: EdgeInsets.fromLTRB(constraints.widthConstraints().maxWidth / 5.5, constraints.heightConstraints().maxHeight / 5.500000184042418, constraints.widthConstraints().maxWidth / 5.5, constraints.heightConstraints().maxHeight / 5.500000184042418),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                                                        
                                                                        
                                                                        
                                                                        child: 
                                                                    TransparentPointer(
                                                                        child: Widget_I1_436_8_179()
                                                                    )
                                                                    )), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(0.23636363636363633, -0.08771929824561409),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0.23636363636363633, -0.08771929824561409),
                                                                        margin: EdgeInsets.fromLTRB(0, 0, 0, constraints.heightConstraints().maxHeight / 11.4),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        
                                                                        
                                                                        
                                                                        child: Widget_I1_436_8_184()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_1_437 extends StatefulWidget {
            
        final String nodeName = r'''Siri Icon''';
        final String name = r'''Siri Icon''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_437({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_437 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_437(properties:properties);
        }
            @override
                _Widget_1_437State createState() => _Widget_1_437State(this.properties);
            }
            class _Widget_1_437State extends BaseState<Widget_1_437> {
                bool visible = true;
                bool isLoaded = false;
                double width = 76;
                double height = 68;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Siri Icon''', id: '1:437', componentName:r'''Siri Icon''');
                
                _Widget_1_437State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Siri Icon''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Siri Icon');
            }            
            
            var painter = Node_1_437();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Siri Icon''', id: '1:437', widget: this, componentName:r'''Siri Icon''');
                ComponentDescendantNotification(name: r'''Siri Icon''', id: '1:437', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: GestureDetector(
                                onTap:() {
                                    
            if(triggersBuiltInEvents) {
                // if(Navigator.canPop(context)){
                //     Navigator.pop(context);
                // }
                globals.navigatorKey.currentState?.pushReplacement(
                    PageRouteBuilder(
                        pageBuilder: (context, animation1, animation2) => Widget_1_262(),
                        
                    ),
                );
            }
            
                                },
                                child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, -6, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: this.height, maxHeight: this.height),
                                width: mq_width,
                                height: 68,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 84 + 0, maxWidth: 84 + 0,
                                                                        minHeight: 84 + 0, maxHeight: 84 + 0,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 84,
                                                                        height: 84,
                                                                        
                                                                        child: Widget_I1_437_135_124())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 60 + 12, maxWidth: 60 + 12,
                                                                        minHeight: 60 + 12, maxHeight: 60 + 12,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(12, 12, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 60,
                                                                        height: 60,
                                                                        
                                                                        child: Widget_I1_437_135_125())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 60 + 12, maxWidth: 60 + 12,
                                                                        minHeight: 60 + 12, maxHeight: 60 + 12,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(12, 12, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 60,
                                                                        height: 60,
                                                                        
                                                                        child: Widget_I1_437_135_126())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 50 + 17, maxWidth: 50 + 17,
                                                                        minHeight: 50 + 17, maxHeight: 50 + 17,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(17, 17, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 50,
                                                                        height: 50,
                                                                        
                                                                        child: Widget_I1_437_135_127())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 44 + 20, maxWidth: 44 + 20,
                                                                        minHeight: 44 + 20, maxHeight: 44 + 20,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(20, 20, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 44,
                                                                        height: 44,
                                                                        
                                                                        child: 
                                                                    TransparentPointer(
                                                                        child: Widget_I1_437_135_128()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        ))
                        )
                        
                            )
                );
            }
        }
        

        class Widget_I1_437_135_128 extends StatefulWidget {
            
        final String nodeName = r'''Siri''';
        final String name = r'''Siri''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_437_135_128({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_437_135_128 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_437_135_128(properties:properties);
        }
            @override
                _Widget_I1_437_135_128State createState() => _Widget_I1_437_135_128State(this.properties);
            }
            class _Widget_I1_437_135_128State extends BaseState<Widget_I1_437_135_128> {
                bool visible = true;
                bool isLoaded = false;
                double width = 44;
                double height = 44;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Siri''', id: 'I1:437;135:128', componentName:r'''Siri''');
                
                _Widget_I1_437_135_128State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Siri''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Siri');
            }            
            
            var painter = Node_I1_437_135_128();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Siri''', id: 'I1:437;135:128', widget: this, componentName:r'''Siri''');
                ComponentDescendantNotification(name: r'''Siri''', id: 'I1:437;135:128', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 44,
                                height: 44,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, 0),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0, 0),
                                                                        margin: EdgeInsets.fromLTRB(constraints.widthConstraints().maxWidth / 5.5, constraints.heightConstraints().maxHeight / 5.5, constraints.widthConstraints().maxWidth / 5.5, constraints.heightConstraints().maxHeight / 5.5),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                                                        
                                                                        
                                                                        
                                                                        child: 
                                                                    TransparentPointer(
                                                                        child: Widget_I1_437_135_128_20_155()
                                                                    )
                                                                    )), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, 0),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0, 0),
                                                                        margin: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        
                                                                        
                                                                        
                                                                        child: Widget_I1_437_135_128_20_160()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_157_131 extends StatefulWidget {
            
        final String nodeName = r'''Android Large - 1''';
        final String name = r'''c_i5brexzl2u3awltemt0nm''';
        final String componentType = r'''complex''';
        final Map<String, dynamic> properties;
        
        Widget_157_131({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_157_131 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_157_131(properties:properties);
        }
            @override
                _Widget_157_131State createState() => _Widget_157_131State(this.properties);
            }
            class _Widget_157_131State extends BaseState<Widget_157_131> {
                bool visible = true;
                bool isLoaded = false;
                double width = 360;
                double height = 800;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Android Large - 1''', id: '157:131', componentName:r'''Android Large - 1''');
                
                _Widget_157_131State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Android Large - 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Android Large - 1');
            }            
            
            var painter = Node_157_131();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Android Large - 1''', id: '157:131', widget: this, componentName:r'''Android Large - 1''');
                ComponentDescendantNotification(name: r'''Android Large - 1''', id: '157:131', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            SingleChildScrollView(
                                scrollDirection: Axis.vertical,
                                child: RepaintBoundary(
                                    child:  SizedBox(
                                        width: mq_width,
                                        child: FittedBox(fit: BoxFit.fitWidth, child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 360,
                                height: 800,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 155 + 11, maxWidth: 155 + 11,
                                                                        minHeight: 262 + 566, maxHeight: 262 + 566,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(11, 566, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 155,
                                                                        height: 262,
                                                                        
                                                                        child: Widget_1_330())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 155 + 186, maxWidth: 155 + 186,
                                                                        minHeight: 262 + 566, maxHeight: 262 + 566,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(186, 566, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 155,
                                                                        height: 262,
                                                                        
                                                                        child: Widget_1_345())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 360 + 0, maxWidth: 360 + 0,
                                                                        minHeight: 88 + 39, maxHeight: 88 + 39,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(0, 39, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 360,
                                                                        height: 88,
                                                                        
                                                                        child: 
                                                                    TransparentPointer(
                                                                        child: Widget_1_412()
                                                                    )
                                                                    )), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 329 + 16, maxWidth: 329 + 16,
                                                                        minHeight: 106 + 156, maxHeight: 106 + 156,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(16, 156, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 329,
                                                                        height: 106,
                                                                        
                                                                        child: Widget_1_398())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 329 + 19, maxWidth: 329 + 19,
                                                                        minHeight: 32.00235366821289 + 279, maxHeight: 32.00235366821289 + 279,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(19, 279, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(2, 2, 2, 2),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 329,
                                                                        height: 32.00235366821289,
                                                                        
                                                                        child: Widget_1_397())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 155 + 189, maxWidth: 155 + 189,
                                                                        minHeight: 233 + 319, maxHeight: 233 + 319,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(189, 319, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 20),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 155,
                                                                        height: 233,
                                                                        
                                                                        child: Widget_1_318())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 155 + 13, maxWidth: 155 + 13,
                                                                        minHeight: 233 + 322, maxHeight: 233 + 322,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(13, 322, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 20),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 155,
                                                                        height: 233,
                                                                        
                                                                        child: Widget_1_306())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 390 + 0, maxWidth: 390 + 0,
                                                                        minHeight: 106 + 710, maxHeight: 106 + 710,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(0, 710, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 390,
                                                                        height: 106,
                                                                        
                                                                        child: 
                                                                    TransparentPointer(
                                                                        child: Widget_1_428()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        ))))
                            
                );
            }
        }
        

        class Widget_1_330 extends StatefulWidget {
            
        final String nodeName = r'''Card''';
        final String name = r'''Card''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_330({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_330 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_330(properties:properties);
        }
            @override
                _Widget_1_330State createState() => _Widget_1_330State(this.properties);
            }
            class _Widget_1_330State extends BaseState<Widget_1_330> {
                bool visible = true;
                bool isLoaded = false;
                double width = 155;
                double height = 262;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Card''', id: '1:330', componentName:r'''Card''');
                
                _Widget_1_330State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Card''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Card');
            }            
            
            var painter = Node_1_330();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Card''', id: '1:330', widget: this, componentName:r'''Card''');
                ComponentDescendantNotification(name: r'''Card''', id: '1:330', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 155,
                                height: 262,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.horizontal,
                    //spacing: 10,
                    //runSpacing: 10, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_1_331(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_331 extends StatefulWidget {
            
        final String nodeName = r'''Card''';
        final String name = r'''Card''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_331({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_331 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_331(properties:properties);
        }
            @override
                _Widget_1_331State createState() => _Widget_1_331State(this.properties);
            }
            class _Widget_1_331State extends BaseState<Widget_1_331> {
                bool visible = true;
                bool isLoaded = false;
                double width = 155;
                double height = 262;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Card''', id: '1:331', componentName:r'''Card''');
                
                _Widget_1_331State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Card''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Card');
            }            
            
            var painter = Node_1_331();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Card''', id: '1:331', widget: this, componentName:r'''Card''');
                ComponentDescendantNotification(name: r'''Card''', id: '1:331', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 155,
                                height: 262,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 10,
                    //runSpacing: 10, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_1_332(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    SizedBox(height: 10), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_1_337(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_332 extends StatefulWidget {
            
        final String nodeName = r'''Group 12''';
        final String name = r'''Group 12''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_332({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_332 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_332(properties:properties);
        }
            @override
                _Widget_1_332State createState() => _Widget_1_332State(this.properties);
            }
            class _Widget_1_332State extends BaseState<Widget_1_332> {
                bool visible = true;
                bool isLoaded = false;
                double width = 155;
                double height = 120;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Group 12''', id: '1:332', componentName:r'''Group 12''');
                
                _Widget_1_332State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Group 12''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Group 12');
            }            
            
            var painter = Node_1_332();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Group 12''', id: '1:332', widget: this, componentName:r'''Group 12''');
                ComponentDescendantNotification(name: r'''Group 12''', id: '1:332', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 155,
                                height: 120,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 155 + 0, maxWidth: 155 + 0,
                                                                        minHeight: 120 + 0, maxHeight: 120 + 0,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 155,
                                                                        height: 120,
                                                                        
                                                                        child: Widget_1_333())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 22 + 123, maxWidth: 22 + 123,
                                                                        minHeight: 22 + 10, maxHeight: 22 + 10,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(123, 10, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 22,
                                                                        height: 22,
                                                                        
                                                                        child: Widget_1_334()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_1_333 extends StatefulWidget {
            
        final String nodeName = r'''img''';
        final String name = r'''img''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_333({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_333 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_333(properties:properties);
        }
            @override
                _Widget_1_333State createState() => _Widget_1_333State(this.properties);
            }
            class _Widget_1_333State extends BaseState<Widget_1_333> {
                bool visible = true;
                bool isLoaded = false;
                double width = 155;
                double height = 120;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''img''', id: '1:333', componentName:r'''img''');
                
                _Widget_1_333State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''img''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'img');
            }            
            
                    var image = Image(
                        image: AssetImage('images/1_333', package:'zephyra_1390242811_f2f'),
                    );
                    @override
                    void didChangeDependencies() {
                        precacheImage(image.image, context);
                        super.didChangeDependencies();
                    }
                    
            var painter = Node_1_333();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''img''', id: '1:333', widget: this, componentName:r'''img''');
                ComponentDescendantNotification(name: r'''img''', id: '1:333', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                        if(properties.containsKey('image')){
                            image = Image.network(properties['image'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageAsset')){
                            image = Image.asset(properties['imageAsset'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageFile')){
                            image = Image.file(File(properties['imageFile'] as String), fit: BoxFit.contain,);
                        }
                        
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 155,
                                height: 120,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    
                                                            RepaintBoundary( child: 
                                                                Transform(
                                                                    transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                                                                    alignment: FractionalOffset.center,
                                                                    child: FittedBox(
                                                                        child: image,
                                                                        fit: BoxFit.cover,
                                                                    ),
                                                                )
                                                            )
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_334 extends StatefulWidget {
            
        final String nodeName = r'''more icon''';
        final String name = r'''more icon''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_334({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_334 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_334(properties:properties);
        }
            @override
                _Widget_1_334State createState() => _Widget_1_334State(this.properties);
            }
            class _Widget_1_334State extends BaseState<Widget_1_334> {
                bool visible = true;
                bool isLoaded = false;
                double width = 22;
                double height = 22;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''more icon''', id: '1:334', componentName:r'''more icon''');
                
                _Widget_1_334State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''more icon''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'more icon');
            }            
            
            var painter = Node_1_334();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''more icon''', id: '1:334', widget: this, componentName:r'''more icon''');
                ComponentDescendantNotification(name: r'''more icon''', id: '1:334', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(6.123234262925839e-17, -1, 0, 0, 1, 6.123234262925839e-17, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 22,
                                height: 22,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 22 + 0, maxWidth: 22 + 0,
                                                                        minHeight: 22 + 0, maxHeight: 22 + 0,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 22,
                                                                        height: 22,
                                                                        
                                                                        child: Widget_1_335())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 18 + 2, maxWidth: 18 + 2,
                                                                        minHeight: 21 + 1, maxHeight: 21 + 1,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(2, 1, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 18,
                                                                        height: 21,
                                                                        
                                                                        child: Widget_1_336()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_335 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 9''';
        final String name = r'''Ellipse 9''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_335({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_335 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_335(properties:properties);
        }
            @override
                _Widget_1_335State createState() => _Widget_1_335State(this.properties);
            }
            class _Widget_1_335State extends BaseState<Widget_1_335> {
                bool visible = true;
                bool isLoaded = false;
                double width = 22;
                double height = 22;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 9''', id: '1:335', componentName:r'''Ellipse 9''');
                
                _Widget_1_335State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 9''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 9');
            }            
            
            var painter = Node_1_335();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 9''', id: '1:335', widget: this, componentName:r'''Ellipse 9''');
                ComponentDescendantNotification(name: r'''Ellipse 9''', id: '1:335', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 22,
                                height: 22,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_336 extends StatefulWidget {
            
        final String nodeName = r'''􀍠''';
        final String name = r'''􀍠''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_336({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_336 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_336(properties:properties);
        }
            @override
                _Widget_1_336State createState() => _Widget_1_336State(this.properties);
            }
            class _Widget_1_336State extends BaseState<Widget_1_336> {
                bool visible = true;
                bool isLoaded = false;
                double width = 18;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''􀍠''', id: '1:336', componentName:r'''􀍠''');
                
                _Widget_1_336State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''􀍠''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((21/21).floor()) <=1 ? 1 : (21/21).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 16,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w600,
                                letterSpacing: -0.3199999928474426,
                                fontStyle: FontStyle.normal,
                                height: 1.3125,
                                color: Color.fromRGBO(255, 255, 255, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''􀍠''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, '􀍠');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''􀍠''', id: '1:336', widget: this, componentName:r'''􀍠''');
                ComponentDescendantNotification(name: r'''􀍠''', id: '1:336', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 18,
                                height: 21,
                                alignment: Alignment(-1, -1),
                                child: Align(
                                    alignment: Alignment(0, -1),
                                    child: this.textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_337 extends StatefulWidget {
            
        final String nodeName = r'''Contents''';
        final String name = r'''Contents''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_337({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_337 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_337(properties:properties);
        }
            @override
                _Widget_1_337State createState() => _Widget_1_337State(this.properties);
            }
            class _Widget_1_337State extends BaseState<Widget_1_337> {
                bool visible = true;
                bool isLoaded = false;
                double width = 155;
                double height = 112;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Contents''', id: '1:337', componentName:r'''Contents''');
                
                _Widget_1_337State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Contents''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Contents');
            }            
            
            var painter = Node_1_337();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Contents''', id: '1:337', widget: this, componentName:r'''Contents''');
                ComponentDescendantNotification(name: r'''Contents''', id: '1:337', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 155,
                                height: 112,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 10,
                    //runSpacing: 10, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_1_338(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    SizedBox(height: 10), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_1_341(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        ))
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_1_338 extends StatefulWidget {
            
        final String nodeName = r'''Group 2''';
        final String name = r'''Group 2''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_338({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_338 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_338(properties:properties);
        }
            @override
                _Widget_1_338State createState() => _Widget_1_338State(this.properties);
            }
            class _Widget_1_338State extends BaseState<Widget_1_338> {
                bool visible = true;
                bool isLoaded = false;
                double width = 102;
                double height = 36;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Group 2''', id: '1:338', componentName:r'''Group 2''');
                
                _Widget_1_338State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Group 2''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Group 2');
            }            
            
            var painter = Node_1_338();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Group 2''', id: '1:338', widget: this, componentName:r'''Group 2''');
                ComponentDescendantNotification(name: r'''Group 2''', id: '1:338', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 102,
                                height: 36,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 102 + 0, maxWidth: 102 + 0,
                                                                        minHeight: 22 + 0, maxHeight: 22 + 0,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 102,
                                                                        height: 22,
                                                                        
                                                                        child: Widget_1_339())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 60 + 0, maxWidth: 60 + 0,
                                                                        minHeight: 16 + 20, maxHeight: 16 + 20,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(0, 20, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 60,
                                                                        height: 16,
                                                                        
                                                                        child: Widget_1_340()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_1_339 extends StatefulWidget {
            
        final String nodeName = r'''Dining Room''';
        final String name = r'''Dining Room''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_339({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_339 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_339(properties:properties);
        }
            @override
                _Widget_1_339State createState() => _Widget_1_339State(this.properties);
            }
            class _Widget_1_339State extends BaseState<Widget_1_339> {
                bool visible = true;
                bool isLoaded = false;
                double width = 102;
                double height = 22;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Dining Room''', id: '1:339', componentName:r'''Dining Room''');
                
                _Widget_1_339State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Dining Room''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((22/22).floor()) <=1 ? 1 : (22/22).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 17,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w600,
                                letterSpacing: -0.40799999237060547,
                                fontStyle: FontStyle.normal,
                                height: 1.2941176470588236,
                                color: Color.fromRGBO(60, 60, 67, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Dining Room''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Dining Room');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Dining Room''', id: '1:339', widget: this, componentName:r'''Dining Room''');
                ComponentDescendantNotification(name: r'''Dining Room''', id: '1:339', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 102,
                                height: 22,
                                alignment: Alignment(-1, -1),
                                child: Align(
                                    alignment: Alignment(-1, -1),
                                    child: this.textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_340 extends StatefulWidget {
            
        final String nodeName = r'''10 devices''';
        final String name = r'''10 devices''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_340({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_340 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_340(properties:properties);
        }
            @override
                _Widget_1_340State createState() => _Widget_1_340State(this.properties);
            }
            class _Widget_1_340State extends BaseState<Widget_1_340> {
                bool visible = true;
                bool isLoaded = false;
                double width = 60;
                double height = 16;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''10 devices''', id: '1:340', componentName:r'''10 devices''');
                
                _Widget_1_340State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''10 devices''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((16/16).floor()) <=1 ? 1 : (16/16).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 12,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w400,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.3333333333333333,
                                color: Color.fromRGBO(60, 60, 67, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''10 devices''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, '10 devices');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''10 devices''', id: '1:340', widget: this, componentName:r'''10 devices''');
                ComponentDescendantNotification(name: r'''10 devices''', id: '1:340', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 60,
                                height: 16,
                                alignment: Alignment(-1, -1),
                                child: Align(
                                    alignment: Alignment(-1, -1),
                                    child: this.textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_341 extends StatefulWidget {
            
        final String nodeName = r'''Frame 3604''';
        final String name = r'''Frame 3604''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_341({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_341 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_341(properties:properties);
        }
            @override
                _Widget_1_341State createState() => _Widget_1_341State(this.properties);
            }
            class _Widget_1_341State extends BaseState<Widget_1_341> {
                bool visible = true;
                bool isLoaded = false;
                double width = 135;
                double height = 31;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Frame 3604''', id: '1:341', componentName:r'''Frame 3604''');
                
                _Widget_1_341State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Frame 3604''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Frame 3604');
            }            
            
            var painter = Node_1_341();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Frame 3604''', id: '1:341', widget: this, componentName:r'''Frame 3604''');
                ComponentDescendantNotification(name: r'''Frame 3604''', id: '1:341', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 135,
                                height: 31,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 58,
                    //runSpacing: 58, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_1_342(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    SizedBox(width: 58), 
                                                    Widget_1_344(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_1_342 extends StatefulWidget {
            
        final String nodeName = r'''Frame 2''';
        final String name = r'''Frame 2''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_342({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_342 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_342(properties:properties);
        }
            @override
                _Widget_1_342State createState() => _Widget_1_342State(this.properties);
            }
            class _Widget_1_342State extends BaseState<Widget_1_342> {
                bool visible = true;
                bool isLoaded = false;
                double width = 20;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Frame 2''', id: '1:342', componentName:r'''Frame 2''');
                
                _Widget_1_342State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Frame 2''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Frame 2');
            }            
            
            var painter = Node_1_342();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Frame 2''', id: '1:342', widget: this, componentName:r'''Frame 2''');
                ComponentDescendantNotification(name: r'''Frame 2''', id: '1:342', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 20,
                                height: 20,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 6,
                    //runSpacing: 6, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_1_343(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_1_343 extends StatefulWidget {
            
        final String nodeName = r'''✏️ Label''';
        final String name = r'''✏️ Label''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_343({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_343 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_343(properties:properties);
        }
            @override
                _Widget_1_343State createState() => _Widget_1_343State(this.properties);
            }
            class _Widget_1_343State extends BaseState<Widget_1_343> {
                bool visible = true;
                bool isLoaded = false;
                double width = 20;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''✏️ Label''', id: '1:343', componentName:r'''✏️ Label''');
                
                _Widget_1_343State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''ON''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((20/20).floor()) <=1 ? 1 : (20/20).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 13,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w400,
                                letterSpacing: -0.23999999463558197,
                                fontStyle: FontStyle.normal,
                                height: 1.5384615384615385,
                                color: Color.fromRGBO(130, 130, 130, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''✏️ Label''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, '✏️ Label');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''✏️ Label''', id: '1:343', widget: this, componentName:r'''✏️ Label''');
                ComponentDescendantNotification(name: r'''✏️ Label''', id: '1:343', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 20,
                                height: 20,
                                alignment: Alignment(-1, 0),
                                child: Align(
                                    alignment: Alignment(0, -1),
                                    child: this.textWidgets)
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_344_10_2584 extends StatefulWidget {
            
        final String nodeName = r'''Background''';
        final String name = r'''Background''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_344_10_2584({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_344_10_2584 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_344_10_2584(properties:properties);
        }
            @override
                _Widget_I1_344_10_2584State createState() => _Widget_I1_344_10_2584State(this.properties);
            }
            class _Widget_I1_344_10_2584State extends BaseState<Widget_I1_344_10_2584> {
                bool visible = true;
                bool isLoaded = false;
                double width = 51;
                double height = 31.000152587890625;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Background''', id: 'I1:344;10:2584', componentName:r'''Background''');
                
                _Widget_I1_344_10_2584State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Background''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Background');
            }            
            
            var painter = Node_I1_344_10_2584();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Background''', id: 'I1:344;10:2584', widget: this, componentName:r'''Background''');
                ComponentDescendantNotification(name: r'''Background''', id: 'I1:344;10:2584', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 51,
                                height: 31.000152587890625,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_344_10_2585 extends StatefulWidget {
            
        final String nodeName = r'''Knob''';
        final String name = r'''Knob''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_344_10_2585({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_344_10_2585 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_344_10_2585(properties:properties);
        }
            @override
                _Widget_I1_344_10_2585State createState() => _Widget_I1_344_10_2585State(this.properties);
            }
            class _Widget_I1_344_10_2585State extends BaseState<Widget_I1_344_10_2585> {
                bool visible = true;
                bool isLoaded = false;
                double width = 27;
                double height = 27;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Knob''', id: 'I1:344;10:2585', componentName:r'''Knob''');
                
                _Widget_I1_344_10_2585State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Knob''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Knob');
            }            
            
            var painter = Node_I1_344_10_2585();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Knob''', id: 'I1:344;10:2585', widget: this, componentName:r'''Knob''');
                ComponentDescendantNotification(name: r'''Knob''', id: 'I1:344;10:2585', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 27,
                                height: 27,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_1_345 extends StatefulWidget {
            
        final String nodeName = r'''Card''';
        final String name = r'''Card''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_345({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_345 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_345(properties:properties);
        }
            @override
                _Widget_1_345State createState() => _Widget_1_345State(this.properties);
            }
            class _Widget_1_345State extends BaseState<Widget_1_345> {
                bool visible = true;
                bool isLoaded = false;
                double width = 155;
                double height = 262;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Card''', id: '1:345', componentName:r'''Card''');
                
                _Widget_1_345State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Card''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Card');
            }            
            
            var painter = Node_1_345();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Card''', id: '1:345', widget: this, componentName:r'''Card''');
                ComponentDescendantNotification(name: r'''Card''', id: '1:345', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 155,
                                height: 262,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 10,
                    //runSpacing: 10, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_1_346(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_346 extends StatefulWidget {
            
        final String nodeName = r'''Card''';
        final String name = r'''Card''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_346({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_346 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_346(properties:properties);
        }
            @override
                _Widget_1_346State createState() => _Widget_1_346State(this.properties);
            }
            class _Widget_1_346State extends BaseState<Widget_1_346> {
                bool visible = true;
                bool isLoaded = false;
                double width = 155;
                double height = 262;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Card''', id: '1:346', componentName:r'''Card''');
                
                _Widget_1_346State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Card''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Card');
            }            
            
            var painter = Node_1_346();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Card''', id: '1:346', widget: this, componentName:r'''Card''');
                ComponentDescendantNotification(name: r'''Card''', id: '1:346', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 155,
                                height: 262,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 10,
                    //runSpacing: 10, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_1_347(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    SizedBox(height: 10), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_1_352(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_347 extends StatefulWidget {
            
        final String nodeName = r'''Group 13''';
        final String name = r'''Group 13''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_347({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_347 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_347(properties:properties);
        }
            @override
                _Widget_1_347State createState() => _Widget_1_347State(this.properties);
            }
            class _Widget_1_347State extends BaseState<Widget_1_347> {
                bool visible = true;
                bool isLoaded = false;
                double width = 155;
                double height = 120;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Group 13''', id: '1:347', componentName:r'''Group 13''');
                
                _Widget_1_347State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Group 13''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Group 13');
            }            
            
            var painter = Node_1_347();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Group 13''', id: '1:347', widget: this, componentName:r'''Group 13''');
                ComponentDescendantNotification(name: r'''Group 13''', id: '1:347', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 155,
                                height: 120,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 155 + 0, maxWidth: 155 + 0,
                                                                        minHeight: 120 + 0, maxHeight: 120 + 0,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 155,
                                                                        height: 120,
                                                                        
                                                                        child: Widget_1_348())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 22 + 123, maxWidth: 22 + 123,
                                                                        minHeight: 22 + 10, maxHeight: 22 + 10,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(123, 10, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 22,
                                                                        height: 22,
                                                                        
                                                                        child: Widget_1_349()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_1_348 extends StatefulWidget {
            
        final String nodeName = r'''img''';
        final String name = r'''img''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_348({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_348 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_348(properties:properties);
        }
            @override
                _Widget_1_348State createState() => _Widget_1_348State(this.properties);
            }
            class _Widget_1_348State extends BaseState<Widget_1_348> {
                bool visible = true;
                bool isLoaded = false;
                double width = 155;
                double height = 120;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''img''', id: '1:348', componentName:r'''img''');
                
                _Widget_1_348State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''img''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'img');
            }            
            
                    var image = Image(
                        image: AssetImage('images/1_348', package:'zephyra_1390242811_f2f'),
                    );
                    @override
                    void didChangeDependencies() {
                        precacheImage(image.image, context);
                        super.didChangeDependencies();
                    }
                    
            var painter = Node_1_348();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''img''', id: '1:348', widget: this, componentName:r'''img''');
                ComponentDescendantNotification(name: r'''img''', id: '1:348', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                        if(properties.containsKey('image')){
                            image = Image.network(properties['image'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageAsset')){
                            image = Image.asset(properties['imageAsset'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageFile')){
                            image = Image.file(File(properties['imageFile'] as String), fit: BoxFit.contain,);
                        }
                        
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 155,
                                height: 120,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    
                                                            RepaintBoundary( child: 
                                                                Transform(
                                                                    transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                                                                    alignment: FractionalOffset.center,
                                                                    child: FittedBox(
                                                                        child: image,
                                                                        fit: BoxFit.cover,
                                                                    ),
                                                                )
                                                            )
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_349 extends StatefulWidget {
            
        final String nodeName = r'''more icon''';
        final String name = r'''more icon''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_349({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_349 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_349(properties:properties);
        }
            @override
                _Widget_1_349State createState() => _Widget_1_349State(this.properties);
            }
            class _Widget_1_349State extends BaseState<Widget_1_349> {
                bool visible = true;
                bool isLoaded = false;
                double width = 22;
                double height = 22;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''more icon''', id: '1:349', componentName:r'''more icon''');
                
                _Widget_1_349State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''more icon''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'more icon');
            }            
            
            var painter = Node_1_349();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''more icon''', id: '1:349', widget: this, componentName:r'''more icon''');
                ComponentDescendantNotification(name: r'''more icon''', id: '1:349', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(6.123234262925839e-17, -1, 0, 0, 1, 6.123234262925839e-17, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 22,
                                height: 22,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 22 + 0, maxWidth: 22 + 0,
                                                                        minHeight: 22 + 0, maxHeight: 22 + 0,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 22,
                                                                        height: 22,
                                                                        
                                                                        child: Widget_1_350())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 18 + 2, maxWidth: 18 + 2,
                                                                        minHeight: 21 + 1, maxHeight: 21 + 1,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(2, 1, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 18,
                                                                        height: 21,
                                                                        
                                                                        child: Widget_1_351()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_350 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 9''';
        final String name = r'''Ellipse 9''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_350({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_350 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_350(properties:properties);
        }
            @override
                _Widget_1_350State createState() => _Widget_1_350State(this.properties);
            }
            class _Widget_1_350State extends BaseState<Widget_1_350> {
                bool visible = true;
                bool isLoaded = false;
                double width = 22;
                double height = 22;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 9''', id: '1:350', componentName:r'''Ellipse 9''');
                
                _Widget_1_350State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 9''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 9');
            }            
            
            var painter = Node_1_350();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 9''', id: '1:350', widget: this, componentName:r'''Ellipse 9''');
                ComponentDescendantNotification(name: r'''Ellipse 9''', id: '1:350', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 22,
                                height: 22,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_351 extends StatefulWidget {
            
        final String nodeName = r'''􀍠''';
        final String name = r'''􀍠''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_351({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_351 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_351(properties:properties);
        }
            @override
                _Widget_1_351State createState() => _Widget_1_351State(this.properties);
            }
            class _Widget_1_351State extends BaseState<Widget_1_351> {
                bool visible = true;
                bool isLoaded = false;
                double width = 18;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''􀍠''', id: '1:351', componentName:r'''􀍠''');
                
                _Widget_1_351State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''􀍠''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((21/21).floor()) <=1 ? 1 : (21/21).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 16,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w600,
                                letterSpacing: -0.3199999928474426,
                                fontStyle: FontStyle.normal,
                                height: 1.3125,
                                color: Color.fromRGBO(255, 255, 255, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''􀍠''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, '􀍠');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''􀍠''', id: '1:351', widget: this, componentName:r'''􀍠''');
                ComponentDescendantNotification(name: r'''􀍠''', id: '1:351', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 18,
                                height: 21,
                                alignment: Alignment(-1, -1),
                                child: Align(
                                    alignment: Alignment(0, -1),
                                    child: this.textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_352 extends StatefulWidget {
            
        final String nodeName = r'''Contents''';
        final String name = r'''Contents''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_352({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_352 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_352(properties:properties);
        }
            @override
                _Widget_1_352State createState() => _Widget_1_352State(this.properties);
            }
            class _Widget_1_352State extends BaseState<Widget_1_352> {
                bool visible = true;
                bool isLoaded = false;
                double width = 155;
                double height = 112;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Contents''', id: '1:352', componentName:r'''Contents''');
                
                _Widget_1_352State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Contents''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Contents');
            }            
            
            var painter = Node_1_352();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Contents''', id: '1:352', widget: this, componentName:r'''Contents''');
                ComponentDescendantNotification(name: r'''Contents''', id: '1:352', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 155,
                                height: 112,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 10,
                    //runSpacing: 10, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_1_353(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    SizedBox(height: 10), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_1_356(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        ))
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_1_353 extends StatefulWidget {
            
        final String nodeName = r'''Group 2''';
        final String name = r'''Group 2''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_353({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_353 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_353(properties:properties);
        }
            @override
                _Widget_1_353State createState() => _Widget_1_353State(this.properties);
            }
            class _Widget_1_353State extends BaseState<Widget_1_353> {
                bool visible = true;
                bool isLoaded = false;
                double width = 119;
                double height = 36;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Group 2''', id: '1:353', componentName:r'''Group 2''');
                
                _Widget_1_353State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Group 2''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Group 2');
            }            
            
            var painter = Node_1_353();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Group 2''', id: '1:353', widget: this, componentName:r'''Group 2''');
                ComponentDescendantNotification(name: r'''Group 2''', id: '1:353', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 119,
                                height: 36,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 119 + 0, maxWidth: 119 + 0,
                                                                        minHeight: 22 + 0, maxHeight: 22 + 0,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 119,
                                                                        height: 22,
                                                                        
                                                                        child: Widget_1_354())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 55 + 0, maxWidth: 55 + 0,
                                                                        minHeight: 16 + 20, maxHeight: 16 + 20,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(0, 20, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 55,
                                                                        height: 16,
                                                                        
                                                                        child: Widget_1_355()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_1_354 extends StatefulWidget {
            
        final String nodeName = r'''Washing Room''';
        final String name = r'''Washing Room''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_354({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_354 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_354(properties:properties);
        }
            @override
                _Widget_1_354State createState() => _Widget_1_354State(this.properties);
            }
            class _Widget_1_354State extends BaseState<Widget_1_354> {
                bool visible = true;
                bool isLoaded = false;
                double width = 119;
                double height = 22;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Washing Room''', id: '1:354', componentName:r'''Washing Room''');
                
                _Widget_1_354State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Washing Room''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((22/22).floor()) <=1 ? 1 : (22/22).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 17,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w600,
                                letterSpacing: -0.40799999237060547,
                                fontStyle: FontStyle.normal,
                                height: 1.2941176470588236,
                                color: Color.fromRGBO(60, 60, 67, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Washing Room''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Washing Room');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Washing Room''', id: '1:354', widget: this, componentName:r'''Washing Room''');
                ComponentDescendantNotification(name: r'''Washing Room''', id: '1:354', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 119,
                                height: 22,
                                alignment: Alignment(-1, -1),
                                child: Align(
                                    alignment: Alignment(-1, -1),
                                    child: this.textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_355 extends StatefulWidget {
            
        final String nodeName = r'''2 devices''';
        final String name = r'''2 devices''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_355({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_355 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_355(properties:properties);
        }
            @override
                _Widget_1_355State createState() => _Widget_1_355State(this.properties);
            }
            class _Widget_1_355State extends BaseState<Widget_1_355> {
                bool visible = true;
                bool isLoaded = false;
                double width = 55;
                double height = 16;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''2 devices''', id: '1:355', componentName:r'''2 devices''');
                
                _Widget_1_355State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''2 devices''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((16/16).floor()) <=1 ? 1 : (16/16).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 12,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w400,
                                letterSpacing: 0,
                                fontStyle: FontStyle.normal,
                                height: 1.3333333333333333,
                                color: Color.fromRGBO(60, 60, 67, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''2 devices''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, '2 devices');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''2 devices''', id: '1:355', widget: this, componentName:r'''2 devices''');
                ComponentDescendantNotification(name: r'''2 devices''', id: '1:355', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 55,
                                height: 16,
                                alignment: Alignment(-1, -1),
                                child: Align(
                                    alignment: Alignment(-1, -1),
                                    child: this.textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_356 extends StatefulWidget {
            
        final String nodeName = r'''Frame 3604''';
        final String name = r'''Frame 3604''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_356({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_356 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_356(properties:properties);
        }
            @override
                _Widget_1_356State createState() => _Widget_1_356State(this.properties);
            }
            class _Widget_1_356State extends BaseState<Widget_1_356> {
                bool visible = true;
                bool isLoaded = false;
                double width = 135;
                double height = 31;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Frame 3604''', id: '1:356', componentName:r'''Frame 3604''');
                
                _Widget_1_356State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Frame 3604''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Frame 3604');
            }            
            
            var painter = Node_1_356();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Frame 3604''', id: '1:356', widget: this, componentName:r'''Frame 3604''');
                ComponentDescendantNotification(name: r'''Frame 3604''', id: '1:356', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 135,
                                height: 31,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 58,
                    //runSpacing: 58, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_1_357(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    SizedBox(width: 58), 
                                                    Widget_1_359(key:UniqueKey()), 
                                                    SizedBox(width: 58), 
                                                    Widget_1_361(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_1_357 extends StatefulWidget {
            
        final String nodeName = r'''Frame 2''';
        final String name = r'''Frame 2''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_357({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_357 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_357(properties:properties);
        }
            @override
                _Widget_1_357State createState() => _Widget_1_357State(this.properties);
            }
            class _Widget_1_357State extends BaseState<Widget_1_357> {
                bool visible = true;
                bool isLoaded = false;
                double width = 20;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Frame 2''', id: '1:357', componentName:r'''Frame 2''');
                
                _Widget_1_357State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Frame 2''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Frame 2');
            }            
            
            var painter = Node_1_357();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Frame 2''', id: '1:357', widget: this, componentName:r'''Frame 2''');
                ComponentDescendantNotification(name: r'''Frame 2''', id: '1:357', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 20,
                                height: 20,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 6,
                    //runSpacing: 6, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_1_358(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_1_358 extends StatefulWidget {
            
        final String nodeName = r'''✏️ Label''';
        final String name = r'''✏️ Label''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_358({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_358 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_358(properties:properties);
        }
            @override
                _Widget_1_358State createState() => _Widget_1_358State(this.properties);
            }
            class _Widget_1_358State extends BaseState<Widget_1_358> {
                bool visible = true;
                bool isLoaded = false;
                double width = 20;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''✏️ Label''', id: '1:358', componentName:r'''✏️ Label''');
                
                _Widget_1_358State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''ON''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((20/20).floor()) <=1 ? 1 : (20/20).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 13,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w400,
                                letterSpacing: -0.23999999463558197,
                                fontStyle: FontStyle.normal,
                                height: 1.5384615384615385,
                                color: Color.fromRGBO(130, 130, 130, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''✏️ Label''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, '✏️ Label');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''✏️ Label''', id: '1:358', widget: this, componentName:r'''✏️ Label''');
                ComponentDescendantNotification(name: r'''✏️ Label''', id: '1:358', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 20,
                                height: 20,
                                alignment: Alignment(-1, 0),
                                child: Align(
                                    alignment: Alignment(0, -1),
                                    child: this.textWidgets)
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_1_359 extends StatefulWidget {
            
        final String nodeName = r'''Frame 3610''';
        final String name = r'''Frame 3610''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_359({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_359 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_359(properties:properties);
        }
            @override
                _Widget_1_359State createState() => _Widget_1_359State(this.properties);
            }
            class _Widget_1_359State extends BaseState<Widget_1_359> {
                bool visible = false;
                bool isLoaded = false;
                double width = 52;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Frame 3610''', id: '1:359', componentName:r'''Frame 3610''');
                
                _Widget_1_359State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Frame 3610''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Frame 3610');
            }            
            
            var painter = Node_1_359();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Frame 3610''', id: '1:359', widget: this, componentName:r'''Frame 3610''');
                ComponentDescendantNotification(name: r'''Frame 3610''', id: '1:359', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 52,
                                height: 21,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.end,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.horizontal,
                    //spacing: 10,
                    //runSpacing: 10, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.hardEdge,
                    children:[
            
                                                    Widget_1_360(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_360 extends StatefulWidget {
            
        final String nodeName = r'''􀊴 200''';
        final String name = r'''􀊴 200''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_360({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_360 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_360(properties:properties);
        }
            @override
                _Widget_1_360State createState() => _Widget_1_360State(this.properties);
            }
            class _Widget_1_360State extends BaseState<Widget_1_360> {
                bool visible = true;
                bool isLoaded = false;
                double width = 44;
                double height = 13;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''􀊴 200''', id: '1:360', componentName:r'''􀊴 200''');
                
                _Widget_1_360State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''􀊴 200''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((13/13).floor()) <=1 ? 1 : (13/13).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 13,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w400,
                                letterSpacing: 0.06599999964237213,
                                fontStyle: FontStyle.normal,
                                height: 1,
                                color: Color.fromRGBO(130, 130, 130, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''􀊴 200''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, '􀊴 200');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''􀊴 200''', id: '1:360', widget: this, componentName:r'''􀊴 200''');
                ComponentDescendantNotification(name: r'''􀊴 200''', id: '1:360', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 44,
                                height: 13,
                                alignment: Alignment(-1, -1),
                                child: Align(
                                    alignment: Alignment(0, -1),
                                    child: this.textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_I1_361_10_2584 extends StatefulWidget {
            
        final String nodeName = r'''Background''';
        final String name = r'''Background''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_361_10_2584({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_361_10_2584 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_361_10_2584(properties:properties);
        }
            @override
                _Widget_I1_361_10_2584State createState() => _Widget_I1_361_10_2584State(this.properties);
            }
            class _Widget_I1_361_10_2584State extends BaseState<Widget_I1_361_10_2584> {
                bool visible = true;
                bool isLoaded = false;
                double width = 51;
                double height = 31.000152587890625;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Background''', id: 'I1:361;10:2584', componentName:r'''Background''');
                
                _Widget_I1_361_10_2584State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Background''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Background');
            }            
            
            var painter = Node_I1_361_10_2584();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Background''', id: 'I1:361;10:2584', widget: this, componentName:r'''Background''');
                ComponentDescendantNotification(name: r'''Background''', id: 'I1:361;10:2584', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 51,
                                height: 31.000152587890625,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_361_10_2585 extends StatefulWidget {
            
        final String nodeName = r'''Knob''';
        final String name = r'''Knob''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_361_10_2585({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_361_10_2585 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_361_10_2585(properties:properties);
        }
            @override
                _Widget_I1_361_10_2585State createState() => _Widget_I1_361_10_2585State(this.properties);
            }
            class _Widget_I1_361_10_2585State extends BaseState<Widget_I1_361_10_2585> {
                bool visible = true;
                bool isLoaded = false;
                double width = 27;
                double height = 27;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Knob''', id: 'I1:361;10:2585', componentName:r'''Knob''');
                
                _Widget_I1_361_10_2585State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Knob''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Knob');
            }            
            
            var painter = Node_I1_361_10_2585();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Knob''', id: 'I1:361;10:2585', widget: this, componentName:r'''Knob''');
                ComponentDescendantNotification(name: r'''Knob''', id: 'I1:361;10:2585', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 27,
                                height: 27,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_1_412 extends StatefulWidget {
            
        final String nodeName = r'''Content''';
        final String name = r'''Content''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_412({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_412 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_412(properties:properties);
        }
            @override
                _Widget_1_412State createState() => _Widget_1_412State(this.properties);
            }
            class _Widget_1_412State extends BaseState<Widget_1_412> {
                bool visible = true;
                bool isLoaded = false;
                double width = 360;
                double height = 88;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Content''', id: '1:412', componentName:r'''Content''');
                
                _Widget_1_412State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Content''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Content');
            }            
            
            var painter = Node_1_412();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Content''', id: '1:412', widget: this, componentName:r'''Content''');
                ComponentDescendantNotification(name: r'''Content''', id: '1:412', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 360,
                                height: 88,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 8,
                    //runSpacing: 8, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_1_413(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    SizedBox(height: 8), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_1_419(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_1_413 extends StatefulWidget {
            
        final String nodeName = r'''Left, Title, Right''';
        final String name = r'''Left, Title, Right''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_413({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_413 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_413(properties:properties);
        }
            @override
                _Widget_1_413State createState() => _Widget_1_413State(this.properties);
            }
            class _Widget_1_413State extends BaseState<Widget_1_413> {
                bool visible = true;
                bool isLoaded = false;
                double width = 360;
                double height = 44;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Left, Title, Right''', id: '1:413', componentName:r'''Left, Title, Right''');
                
                _Widget_1_413State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Left, Title, Right''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Left, Title, Right');
            }            
            
            var painter = Node_1_413();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Left, Title, Right''', id: '1:413', widget: this, componentName:r'''Left, Title, Right''');
                ComponentDescendantNotification(name: r'''Left, Title, Right''', id: '1:413', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 360,
                                height: 44,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.end,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_1_414(key:UniqueKey()), 
                                                    SizedBox(width: 0), 
                                                    Widget_1_416(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        ))
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_1_414 extends StatefulWidget {
            
        final String nodeName = r'''Title''';
        final String name = r'''Title''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_414({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_414 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_414(properties:properties);
        }
            @override
                _Widget_1_414State createState() => _Widget_1_414State(this.properties);
            }
            class _Widget_1_414State extends BaseState<Widget_1_414> {
                bool visible = true;
                bool isLoaded = false;
                double width = 180;
                double height = 33;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Title''', id: '1:414', componentName:r'''Title''');
                
                _Widget_1_414State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Title''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Title');
            }            
            
            var painter = Node_1_414();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Title''', id: '1:414', widget: this, componentName:r'''Title''');
                ComponentDescendantNotification(name: r'''Title''', id: '1:414', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 180,
                                height: 33,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 10,
                    //runSpacing: 10, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_1_415(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_1_415 extends StatefulWidget {
            
        final String nodeName = r'''Title''';
        final String name = r'''Title''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_415({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_415 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_415(properties:properties);
        }
            @override
                _Widget_1_415State createState() => _Widget_1_415State(this.properties);
            }
            class _Widget_1_415State extends BaseState<Widget_1_415> {
                bool visible = true;
                bool isLoaded = false;
                double width = 78;
                double height = 33;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Title''', id: '1:415', componentName:r'''Title''');
                
                _Widget_1_415State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Home''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((33/33.4140625).floor()) <=1 ? 1 : (33/33.4140625).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 28,
                                fontFamily: 'SF Pro Display',
                                fontWeight: FontWeight.w700,
                                letterSpacing: 0.36000001430511475,
                                fontStyle: FontStyle.normal,
                                height: 1.1785714285714286,
                                color: Color.fromRGBO(0, 0, 0, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Display',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Title''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Title');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Title''', id: '1:415', widget: this, componentName:r'''Title''');
                ComponentDescendantNotification(name: r'''Title''', id: '1:415', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 78,
                                height: 33,
                                alignment: Alignment(-0.23333333333333328, -1),
                                child: Align(
                                    alignment: Alignment(-1, -1),
                                    child: this.textWidgets)
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_1_416 extends StatefulWidget {
            
        final String nodeName = r'''Right Accessory''';
        final String name = r'''Right Accessory''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_416({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_416 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_416(properties:properties);
        }
            @override
                _Widget_1_416State createState() => _Widget_1_416State(this.properties);
            }
            class _Widget_1_416State extends BaseState<Widget_1_416> {
                bool visible = true;
                bool isLoaded = false;
                double width = 180;
                double height = 44;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Right Accessory''', id: '1:416', componentName:r'''Right Accessory''');
                
                _Widget_1_416State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Right Accessory''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Right Accessory');
            }            
            
            var painter = Node_1_416();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Right Accessory''', id: '1:416', widget: this, componentName:r'''Right Accessory''');
                ComponentDescendantNotification(name: r'''Right Accessory''', id: '1:416', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 180,
                                height: 44,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.end,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 10,
                    //runSpacing: 10, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_1_417(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_1_417 extends StatefulWidget {
            
        final String nodeName = r'''Icon''';
        final String name = r'''Icon''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_417({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_417 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_417(properties:properties);
        }
            @override
                _Widget_1_417State createState() => _Widget_1_417State(this.properties);
            }
            class _Widget_1_417State extends BaseState<Widget_1_417> {
                bool visible = true;
                bool isLoaded = false;
                double width = 36;
                double height = 36;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Icon''', id: '1:417', componentName:r'''Icon''');
                
                _Widget_1_417State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Icon''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Icon');
            }            
            
            var painter = Node_1_417();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Icon''', id: '1:417', widget: this, componentName:r'''Icon''');
                ComponentDescendantNotification(name: r'''Icon''', id: '1:417', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 36,
                                height: 36,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 21 + 7.5, maxWidth: 21 + 7.5,
                                                                        minHeight: 22 + 7, maxHeight: 22 + 7,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(7.5, 7, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 21,
                                                                        height: 22,
                                                                        
                                                                        child: Widget_1_418()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_418 extends StatefulWidget {
            
        final String nodeName = r'''Right Title''';
        final String name = r'''Right Title''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_418({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_418 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_418(properties:properties);
        }
            @override
                _Widget_1_418State createState() => _Widget_1_418State(this.properties);
            }
            class _Widget_1_418State extends BaseState<Widget_1_418> {
                bool visible = true;
                bool isLoaded = false;
                double width = 21;
                double height = 22;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Right Title''', id: '1:418', componentName:r'''Right Title''');
                
                _Widget_1_418State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''􀣋''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.end
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.end,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((22/22).floor()) <=1 ? 1 : (22/22).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 17,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w400,
                                letterSpacing: -0.40799999237060547,
                                fontStyle: FontStyle.normal,
                                height: 1.2941176470588236,
                                color: Color.fromRGBO(0, 0, 0, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Right Title''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Right Title');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Right Title''', id: '1:418', widget: this, componentName:r'''Right Title''');
                ComponentDescendantNotification(name: r'''Right Title''', id: '1:418', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 21,
                                height: 22,
                                alignment: Alignment(-1, -1),
                                child: Align(
                                    alignment: Alignment(1, 0),
                                    child: this.textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_419 extends StatefulWidget {
            
        final String nodeName = r'''Left, Title, Right''';
        final String name = r'''Left, Title, Right''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_419({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_419 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_419(properties:properties);
        }
            @override
                _Widget_1_419State createState() => _Widget_1_419State(this.properties);
            }
            class _Widget_1_419State extends BaseState<Widget_1_419> {
                bool visible = true;
                bool isLoaded = false;
                double width = 360;
                double height = 36;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Left, Title, Right''', id: '1:419', componentName:r'''Left, Title, Right''');
                
                _Widget_1_419State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Left, Title, Right''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Left, Title, Right');
            }            
            
            var painter = Node_1_419();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Left, Title, Right''', id: '1:419', widget: this, componentName:r'''Left, Title, Right''');
                ComponentDescendantNotification(name: r'''Left, Title, Right''', id: '1:419', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 360,
                                height: 36,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.end,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_1_420(key:UniqueKey()), 
                                                    SizedBox(width: 0), 
                                                    Widget_1_422(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_1_420 extends StatefulWidget {
            
        final String nodeName = r'''Title''';
        final String name = r'''Title''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_420({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_420 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_420(properties:properties);
        }
            @override
                _Widget_1_420State createState() => _Widget_1_420State(this.properties);
            }
            class _Widget_1_420State extends BaseState<Widget_1_420> {
                bool visible = true;
                bool isLoaded = false;
                double width = 180;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Title''', id: '1:420', componentName:r'''Title''');
                
                _Widget_1_420State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Title''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Title');
            }            
            
            var painter = Node_1_420();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Title''', id: '1:420', widget: this, componentName:r'''Title''');
                ComponentDescendantNotification(name: r'''Title''', id: '1:420', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 180,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 10,
                    //runSpacing: 10, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_1_421(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_1_421 extends StatefulWidget {
            
        final String nodeName = r'''Title''';
        final String name = r'''Title''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_421({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_421 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_421(properties:properties);
        }
            @override
                _Widget_1_421State createState() => _Widget_1_421State(this.properties);
            }
            class _Widget_1_421State extends BaseState<Widget_1_421> {
                bool visible = true;
                bool isLoaded = false;
                double width = 150;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Title''', id: '1:421', componentName:r'''Title''');
                
                _Widget_1_421State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Family Members''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((24/24).floor()) <=1 ? 1 : (24/24).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 20,
                                fontFamily: 'SF Pro Display',
                                fontWeight: FontWeight.w600,
                                letterSpacing: 0.3799999952316284,
                                fontStyle: FontStyle.normal,
                                height: 1.2,
                                color: Color.fromRGBO(60, 60, 67, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Display',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Title''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Title');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Title''', id: '1:421', widget: this, componentName:r'''Title''');
                ComponentDescendantNotification(name: r'''Title''', id: '1:421', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 150,
                                height: 24,
                                alignment: Alignment(0.16666666666666674, -1),
                                child: Align(
                                    alignment: Alignment(-1, 0),
                                    child: this.textWidgets)
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_1_422 extends StatefulWidget {
            
        final String nodeName = r'''Right Accessory''';
        final String name = r'''Right Accessory''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_422({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_422 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_422(properties:properties);
        }
            @override
                _Widget_1_422State createState() => _Widget_1_422State(this.properties);
            }
            class _Widget_1_422State extends BaseState<Widget_1_422> {
                bool visible = true;
                bool isLoaded = false;
                double width = 180;
                double height = 36;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Right Accessory''', id: '1:422', componentName:r'''Right Accessory''');
                
                _Widget_1_422State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Right Accessory''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Right Accessory');
            }            
            
            var painter = Node_1_422();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Right Accessory''', id: '1:422', widget: this, componentName:r'''Right Accessory''');
                ComponentDescendantNotification(name: r'''Right Accessory''', id: '1:422', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 180,
                                height: 36,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.end,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 10,
                    //runSpacing: 10, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_1_423(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_423 extends StatefulWidget {
            
        final String nodeName = r'''Avatars''';
        final String name = r'''Avatars''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_423({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_423 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_423(properties:properties);
        }
            @override
                _Widget_1_423State createState() => _Widget_1_423State(this.properties);
            }
            class _Widget_1_423State extends BaseState<Widget_1_423> {
                bool visible = true;
                bool isLoaded = false;
                double width = 179;
                double height = 36;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Avatars''', id: '1:423', componentName:r'''Avatars''');
                
                _Widget_1_423State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Avatars''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Avatars');
            }            
            
                    var image = Image(
                        image: AssetImage('images/1_423', package:'zephyra_1390242811_f2f'),
                    );
                    @override
                    void didChangeDependencies() {
                        precacheImage(image.image, context);
                        super.didChangeDependencies();
                    }
                    
            var painter = Node_1_423();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Avatars''', id: '1:423', widget: this, componentName:r'''Avatars''');
                ComponentDescendantNotification(name: r'''Avatars''', id: '1:423', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                        if(properties.containsKey('image')){
                            image = Image.network(properties['image'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageAsset')){
                            image = Image.asset(properties['imageAsset'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageFile')){
                            image = Image.file(File(properties['imageFile'] as String), fit: BoxFit.contain,);
                        }
                        
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, -15, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 179,
                                height: 36,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    
                                                            RepaintBoundary( child: 
                                                                Transform(
                                                                    transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, -15, 0, 0, 1),
                                                                    alignment: FractionalOffset.center,
                                                                    child: FittedBox(
                                                                        child: image,
                                                                        fit: BoxFit.cover,
                                                                    ),
                                                                )
                                                            ), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 27 + 152, maxWidth: 27 + 152,
                                                                        minHeight: 27 + 4, maxHeight: 27 + 4,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(152, 4, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 27,
                                                                        height: 27,
                                                                        
                                                                        child: Widget_1_424())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 27 + 132, maxWidth: 27 + 132,
                                                                        minHeight: 27 + 4, maxHeight: 27 + 4,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(132, 4, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 27,
                                                                        height: 27,
                                                                        
                                                                        child: Widget_1_425())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 27 + 112, maxWidth: 27 + 112,
                                                                        minHeight: 27 + 4, maxHeight: 27 + 4,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(112, 4, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 27,
                                                                        height: 27,
                                                                        
                                                                        child: Widget_1_426())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 27 + 92, maxWidth: 27 + 92,
                                                                        minHeight: 27 + 4, maxHeight: 27 + 4,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(92, 4, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 27,
                                                                        height: 27,
                                                                        
                                                                        child: Widget_1_427()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_424 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 10''';
        final String name = r'''Ellipse 10''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_424({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_424 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_424(properties:properties);
        }
            @override
                _Widget_1_424State createState() => _Widget_1_424State(this.properties);
            }
            class _Widget_1_424State extends BaseState<Widget_1_424> {
                bool visible = true;
                bool isLoaded = false;
                double width = 27;
                double height = 27;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 10''', id: '1:424', componentName:r'''Ellipse 10''');
                
                _Widget_1_424State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 10''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 10');
            }            
            
                    var image = Image(
                        image: AssetImage('images/1_424', package:'zephyra_1390242811_f2f'),
                    );
                    @override
                    void didChangeDependencies() {
                        precacheImage(image.image, context);
                        super.didChangeDependencies();
                    }
                    
            var painter = Node_1_424();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 10''', id: '1:424', widget: this, componentName:r'''Ellipse 10''');
                ComponentDescendantNotification(name: r'''Ellipse 10''', id: '1:424', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                        if(properties.containsKey('image')){
                            image = Image.network(properties['image'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageAsset')){
                            image = Image.asset(properties['imageAsset'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageFile')){
                            image = Image.file(File(properties['imageFile'] as String), fit: BoxFit.contain,);
                        }
                        
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 27,
                                height: 27,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    
                                                            RepaintBoundary( child: 
                                                                Transform(
                                                                    transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                                                                    alignment: FractionalOffset.center,
                                                                    child: FittedBox(
                                                                        child: image,
                                                                        fit: BoxFit.cover,
                                                                    ),
                                                                )
                                                            )
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_425 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 11''';
        final String name = r'''Ellipse 11''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_425({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_425 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_425(properties:properties);
        }
            @override
                _Widget_1_425State createState() => _Widget_1_425State(this.properties);
            }
            class _Widget_1_425State extends BaseState<Widget_1_425> {
                bool visible = true;
                bool isLoaded = false;
                double width = 27;
                double height = 27;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 11''', id: '1:425', componentName:r'''Ellipse 11''');
                
                _Widget_1_425State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 11''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 11');
            }            
            
                    var image = Image(
                        image: AssetImage('images/1_425', package:'zephyra_1390242811_f2f'),
                    );
                    @override
                    void didChangeDependencies() {
                        precacheImage(image.image, context);
                        super.didChangeDependencies();
                    }
                    
            var painter = Node_1_425();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 11''', id: '1:425', widget: this, componentName:r'''Ellipse 11''');
                ComponentDescendantNotification(name: r'''Ellipse 11''', id: '1:425', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                        if(properties.containsKey('image')){
                            image = Image.network(properties['image'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageAsset')){
                            image = Image.asset(properties['imageAsset'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageFile')){
                            image = Image.file(File(properties['imageFile'] as String), fit: BoxFit.contain,);
                        }
                        
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 27,
                                height: 27,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    
                                                            RepaintBoundary( child: 
                                                                Transform(
                                                                    transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                                                                    alignment: FractionalOffset.center,
                                                                    child: FittedBox(
                                                                        child: image,
                                                                        fit: BoxFit.cover,
                                                                    ),
                                                                )
                                                            )
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_426 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 12''';
        final String name = r'''Ellipse 12''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_426({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_426 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_426(properties:properties);
        }
            @override
                _Widget_1_426State createState() => _Widget_1_426State(this.properties);
            }
            class _Widget_1_426State extends BaseState<Widget_1_426> {
                bool visible = true;
                bool isLoaded = false;
                double width = 27;
                double height = 27;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 12''', id: '1:426', componentName:r'''Ellipse 12''');
                
                _Widget_1_426State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 12''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 12');
            }            
            
                    var image = Image(
                        image: AssetImage('images/1_426', package:'zephyra_1390242811_f2f'),
                    );
                    @override
                    void didChangeDependencies() {
                        precacheImage(image.image, context);
                        super.didChangeDependencies();
                    }
                    
            var painter = Node_1_426();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 12''', id: '1:426', widget: this, componentName:r'''Ellipse 12''');
                ComponentDescendantNotification(name: r'''Ellipse 12''', id: '1:426', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                        if(properties.containsKey('image')){
                            image = Image.network(properties['image'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageAsset')){
                            image = Image.asset(properties['imageAsset'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageFile')){
                            image = Image.file(File(properties['imageFile'] as String), fit: BoxFit.contain,);
                        }
                        
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 27,
                                height: 27,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    
                                                            RepaintBoundary( child: 
                                                                Transform(
                                                                    transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                                                                    alignment: FractionalOffset.center,
                                                                    child: FittedBox(
                                                                        child: image,
                                                                        fit: BoxFit.cover,
                                                                    ),
                                                                )
                                                            )
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_427 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 13''';
        final String name = r'''Ellipse 13''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_427({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_427 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_427(properties:properties);
        }
            @override
                _Widget_1_427State createState() => _Widget_1_427State(this.properties);
            }
            class _Widget_1_427State extends BaseState<Widget_1_427> {
                bool visible = true;
                bool isLoaded = false;
                double width = 27;
                double height = 27;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 13''', id: '1:427', componentName:r'''Ellipse 13''');
                
                _Widget_1_427State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 13''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 13');
            }            
            
                    var image = Image(
                        image: AssetImage('images/1_427', package:'zephyra_1390242811_f2f'),
                    );
                    @override
                    void didChangeDependencies() {
                        precacheImage(image.image, context);
                        super.didChangeDependencies();
                    }
                    
            var painter = Node_1_427();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 13''', id: '1:427', widget: this, componentName:r'''Ellipse 13''');
                ComponentDescendantNotification(name: r'''Ellipse 13''', id: '1:427', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                        if(properties.containsKey('image')){
                            image = Image.network(properties['image'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageAsset')){
                            image = Image.asset(properties['imageAsset'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageFile')){
                            image = Image.file(File(properties['imageFile'] as String), fit: BoxFit.contain,);
                        }
                        
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 27,
                                height: 27,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    
                                                            RepaintBoundary( child: 
                                                                Transform(
                                                                    transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                                                                    alignment: FractionalOffset.center,
                                                                    child: FittedBox(
                                                                        child: image,
                                                                        fit: BoxFit.cover,
                                                                    ),
                                                                )
                                                            )
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_398 extends StatefulWidget {
            
        final String nodeName = r'''Weather - Widget''';
        final String name = r'''Weather - Widget''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_398({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_398 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_398(properties:properties);
        }
            @override
                _Widget_1_398State createState() => _Widget_1_398State(this.properties);
            }
            class _Widget_1_398State extends BaseState<Widget_1_398> {
                bool visible = true;
                bool isLoaded = false;
                double width = 329;
                double height = 106;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Weather - Widget''', id: '1:398', componentName:r'''Weather - Widget''');
                
                _Widget_1_398State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Weather - Widget''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Weather - Widget');
            }            
            
            var painter = Node_1_398();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Weather - Widget''', id: '1:398', widget: this, componentName:r'''Weather - Widget''');
                ComponentDescendantNotification(name: r'''Weather - Widget''', id: '1:398', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 329,
                                height: 106,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, -1),
                                                                        
                                                                        minHeight: 106 + 0, maxHeight: 106 + 0,
                                                                        child:Container(
                                                                        alignment: Alignment(0, -1),
                                                                        margin: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: this.height, maxHeight: this.height),
                                                                        
                                                                        height: 106,
                                                                        
                                                                        child: Widget_1_399())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(1, -1),
                                                                        minWidth: 120 + 0, maxWidth: 120 + 0,
                                                                        minHeight: 103 + 1, maxHeight: 103 + 1,
                                                                        child:Container(
                                                                        alignment: Alignment(1, -1),
                                                                        margin: EdgeInsets.fromLTRB(0, 1, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(16, 10, 16, 10),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 120,
                                                                        height: 103,
                                                                        
                                                                        child: Widget_1_401())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 237 + 0, maxWidth: 237 + 0,
                                                                        minHeight: 105 + 1, maxHeight: 105 + 1,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(0, 1, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 237,
                                                                        height: 105,
                                                                        
                                                                        child: Widget_1_404()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_399 extends StatefulWidget {
            
        final String nodeName = r'''Frame 2384''';
        final String name = r'''Frame 2384''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_399({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_399 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_399(properties:properties);
        }
            @override
                _Widget_1_399State createState() => _Widget_1_399State(this.properties);
            }
            class _Widget_1_399State extends BaseState<Widget_1_399> {
                bool visible = true;
                bool isLoaded = false;
                double width = 329;
                double height = 106;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Frame 2384''', id: '1:399', componentName:r'''Frame 2384''');
                
                _Widget_1_399State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Frame 2384''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Frame 2384');
            }            
            
            var painter = Node_1_399();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Frame 2384''', id: '1:399', widget: this, componentName:r'''Frame 2384''');
                ComponentDescendantNotification(name: r'''Frame 2384''', id: '1:399', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: this.height, maxHeight: this.height),
                                width: mq_width,
                                height: 106,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, -1),
                                                                        
                                                                        minHeight: 106 + 0, maxHeight: 106 + 0,
                                                                        child:Container(
                                                                        alignment: Alignment(0, -1),
                                                                        margin: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: this.height, maxHeight: this.height),
                                                                        
                                                                        height: 106,
                                                                        
                                                                        child: Widget_1_400()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_1_400 extends StatefulWidget {
            
        final String nodeName = r'''Rectangle 349''';
        final String name = r'''Rectangle 349''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_400({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_400 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_400(properties:properties);
        }
            @override
                _Widget_1_400State createState() => _Widget_1_400State(this.properties);
            }
            class _Widget_1_400State extends BaseState<Widget_1_400> {
                bool visible = true;
                bool isLoaded = false;
                double width = 329;
                double height = 106;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Rectangle 349''', id: '1:400', componentName:r'''Rectangle 349''');
                
                _Widget_1_400State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Rectangle 349''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Rectangle 349');
            }            
            
            var painter = Node_1_400();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Rectangle 349''', id: '1:400', widget: this, componentName:r'''Rectangle 349''');
                ComponentDescendantNotification(name: r'''Rectangle 349''', id: '1:400', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: this.height, maxHeight: this.height),
                                width: mq_width,
                                height: 106,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_1_401 extends StatefulWidget {
            
        final String nodeName = r'''Degre''';
        final String name = r'''Degre''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_401({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_401 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_401(properties:properties);
        }
            @override
                _Widget_1_401State createState() => _Widget_1_401State(this.properties);
            }
            class _Widget_1_401State extends BaseState<Widget_1_401> {
                bool visible = true;
                bool isLoaded = false;
                double width = 120;
                double height = 103;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Degre''', id: '1:401', componentName:r'''Degre''');
                
                _Widget_1_401State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Degre''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Degre');
            }            
            
            var painter = Node_1_401();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Degre''', id: '1:401', widget: this, componentName:r'''Degre''');
                ComponentDescendantNotification(name: r'''Degre''', id: '1:401', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 120,
                                height: 103,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 24,
                    //runSpacing: 24, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_1_402(key:UniqueKey()), 
                                                    SizedBox(height: 24), 
                                                    Widget_1_403(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_402 extends StatefulWidget {
            
        final String nodeName = r'''-10°''';
        final String name = r'''-10°''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_402({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_402 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_402(properties:properties);
        }
            @override
                _Widget_1_402State createState() => _Widget_1_402State(this.properties);
            }
            class _Widget_1_402State extends BaseState<Widget_1_402> {
                bool visible = true;
                bool isLoaded = false;
                double width = 88;
                double height = 41;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''-10°''', id: '1:402', componentName:r'''-10°''');
                
                _Widget_1_402State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''-10°''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.end
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.end,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((41/41).floor()) <=1 ? 1 : (41/41).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 48,
                                fontFamily: 'SF Pro Display',
                                fontWeight: FontWeight.w300,
                                letterSpacing: 0.37400001287460327,
                                fontStyle: FontStyle.normal,
                                height: 0.8541666666666666,
                                color: Color.fromRGBO(255, 255, 255, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Display',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''-10°''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, '-10°');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''-10°''', id: '1:402', widget: this, componentName:r'''-10°''');
                ComponentDescendantNotification(name: r'''-10°''', id: '1:402', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 88,
                                height: 41,
                                alignment: Alignment(-1, -1),
                                child: Align(
                                    alignment: Alignment(1, -1),
                                    child: this.textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_403 extends StatefulWidget {
            
        final String nodeName = r'''H:2° L:12°''';
        final String name = r'''H:2° L:12°''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_403({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_403 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_403(properties:properties);
        }
            @override
                _Widget_1_403State createState() => _Widget_1_403State(this.properties);
            }
            class _Widget_1_403State extends BaseState<Widget_1_403> {
                bool visible = true;
                bool isLoaded = false;
                double width = 66;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''H:2° L:12°''', id: '1:403', componentName:r'''H:2° L:12°''');
                
                _Widget_1_403State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''H:2°  L:12°''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.end
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.end,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((18/18).floor()) <=1 ? 1 : (18/18).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 13,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w400,
                                letterSpacing: -0.07800000160932541,
                                fontStyle: FontStyle.normal,
                                height: 1.3846153846153846,
                                color: Color.fromRGBO(235, 235, 245, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''H:2° L:12°''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'H:2° L:12°');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''H:2° L:12°''', id: '1:403', widget: this, componentName:r'''H:2° L:12°''');
                ComponentDescendantNotification(name: r'''H:2° L:12°''', id: '1:403', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 66,
                                height: 18,
                                alignment: Alignment(-1, -1),
                                child: Align(
                                    alignment: Alignment(1, -1),
                                    child: this.textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_404 extends StatefulWidget {
            
        final String nodeName = r'''Content''';
        final String name = r'''Content''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_404({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_404 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_404(properties:properties);
        }
            @override
                _Widget_1_404State createState() => _Widget_1_404State(this.properties);
            }
            class _Widget_1_404State extends BaseState<Widget_1_404> {
                bool visible = true;
                bool isLoaded = false;
                double width = 237;
                double height = 105;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Content''', id: '1:404', componentName:r'''Content''');
                
                _Widget_1_404State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Content''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Content');
            }            
            
            var painter = Node_1_404();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Content''', id: '1:404', widget: this, componentName:r'''Content''');
                ComponentDescendantNotification(name: r'''Content''', id: '1:404', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 237,
                                height: 105,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 126 + 16, maxWidth: 126 + 16,
                                                                        minHeight: 45 + 7, maxHeight: 45 + 7,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(16, 7, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 126,
                                                                        height: 45,
                                                                        
                                                                        child: Widget_1_405())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 225 + 15, maxWidth: 225 + 15,
                                                                        minHeight: 38 + 56, maxHeight: 38 + 56,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(15, 56, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 225,
                                                                        height: 38,
                                                                        
                                                                        child: Widget_1_406()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_405 extends StatefulWidget {
            
        final String nodeName = r'''My Location Montreal''';
        final String name = r'''My Location Montreal''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_405({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_405 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_405(properties:properties);
        }
            @override
                _Widget_1_405State createState() => _Widget_1_405State(this.properties);
            }
            class _Widget_1_405State extends BaseState<Widget_1_405> {
                bool visible = true;
                bool isLoaded = false;
                double width = 126;
                double height = 45;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''My Location Montreal''', id: '1:405', componentName:r'''My Location Montreal''');
                
                _Widget_1_405State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''My Location
Montreal''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((45/20).floor()) <=1 ? 1 : (45/20).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 15,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w400,
                                letterSpacing: -0.23999999463558197,
                                fontStyle: FontStyle.normal,
                                height: 1.3333333333333333,
                                color: Color.fromRGBO(255, 255, 255, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''My Location Montreal''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'My Location Montreal');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''My Location Montreal''', id: '1:405', widget: this, componentName:r'''My Location Montreal''');
                ComponentDescendantNotification(name: r'''My Location Montreal''', id: '1:405', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 126,
                                height: 45,
                                alignment: Alignment(-1, -1),
                                child: Align(
                                    alignment: Alignment(-1, -1),
                                    child: this.textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_406 extends StatefulWidget {
            
        final String nodeName = r'''Frame 2375''';
        final String name = r'''Frame 2375''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_406({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_406 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_406(properties:properties);
        }
            @override
                _Widget_1_406State createState() => _Widget_1_406State(this.properties);
            }
            class _Widget_1_406State extends BaseState<Widget_1_406> {
                bool visible = true;
                bool isLoaded = false;
                double width = 225;
                double height = 38;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Frame 2375''', id: '1:406', componentName:r'''Frame 2375''');
                
                _Widget_1_406State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Frame 2375''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Frame 2375');
            }            
            
            var painter = Node_1_406();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Frame 2375''', id: '1:406', widget: this, componentName:r'''Frame 2375''');
                ComponentDescendantNotification(name: r'''Frame 2375''', id: '1:406', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 225,
                                height: 38,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 103 + 0, maxWidth: 103 + 0,
                                                                        minHeight: 18 + 20, maxHeight: 18 + 20,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(0, 20, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 103,
                                                                        height: 18,
                                                                        
                                                                        child: Widget_1_407())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 16 + 0, maxWidth: 16 + 0,
                                                                        minHeight: 18 + 0, maxHeight: 18 + 0,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 16,
                                                                        height: 18,
                                                                        
                                                                        child: Widget_1_408()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_407 extends StatefulWidget {
            
        final String nodeName = r'''􀇕 Partly Cloudy''';
        final String name = r'''􀇕 Partly Cloudy''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_407({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_407 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_407(properties:properties);
        }
            @override
                _Widget_1_407State createState() => _Widget_1_407State(this.properties);
            }
            class _Widget_1_407State extends BaseState<Widget_1_407> {
                bool visible = true;
                bool isLoaded = false;
                double width = 103;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''􀇕 Partly Cloudy''', id: '1:407', componentName:r'''􀇕 Partly Cloudy''');
                
                _Widget_1_407State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''􀇕 Partly Cloudy''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((18/18).floor()) <=1 ? 1 : (18/18).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 13,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w400,
                                letterSpacing: -0.07800000160932541,
                                fontStyle: FontStyle.normal,
                                height: 1.3846153846153846,
                                color: Color.fromRGBO(235, 235, 245, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''􀇕 Partly Cloudy''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, '􀇕 Partly Cloudy');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''􀇕 Partly Cloudy''', id: '1:407', widget: this, componentName:r'''􀇕 Partly Cloudy''');
                ComponentDescendantNotification(name: r'''􀇕 Partly Cloudy''', id: '1:407', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 103,
                                height: 18,
                                alignment: Alignment(-1, -1),
                                child: Align(
                                    alignment: Alignment(-1, -1),
                                    child: this.textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_408 extends StatefulWidget {
            
        final String nodeName = r'''Symbol''';
        final String name = r'''Symbol''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_408({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_408 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_408(properties:properties);
        }
            @override
                _Widget_1_408State createState() => _Widget_1_408State(this.properties);
            }
            class _Widget_1_408State extends BaseState<Widget_1_408> {
                bool visible = false;
                bool isLoaded = false;
                double width = 16;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Symbol''', id: '1:408', componentName:r'''Symbol''');
                
                _Widget_1_408State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Symbol''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Symbol');
            }            
            
            var painter = Node_1_408();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Symbol''', id: '1:408', widget: this, componentName:r'''Symbol''');
                ComponentDescendantNotification(name: r'''Symbol''', id: '1:408', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 16,
                                height: 18,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 16 + 0, maxWidth: 16 + 0,
                                                                        minHeight: 18 + 0, maxHeight: 18 + 0,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 16,
                                                                        height: 18,
                                                                        
                                                                        child: Widget_1_409()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_409 extends StatefulWidget {
            
        final String nodeName = r'''􀇿''';
        final String name = r'''􀇿''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_409({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_409 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_409(properties:properties);
        }
            @override
                _Widget_1_409State createState() => _Widget_1_409State(this.properties);
            }
            class _Widget_1_409State extends BaseState<Widget_1_409> {
                bool visible = true;
                bool isLoaded = false;
                double width = 16;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''􀇿''', id: '1:409', componentName:r'''􀇿''');
                
                _Widget_1_409State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''􀇿''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((18/18).floor()) <=1 ? 1 : (18/18).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 13,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w400,
                                letterSpacing: -0.07800000160932541,
                                fontStyle: FontStyle.normal,
                                height: 1.3846153846153846,
                                color: Color.fromRGBO(235, 235, 245, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''􀇿''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, '􀇿');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''􀇿''', id: '1:409', widget: this, componentName:r'''􀇿''');
                ComponentDescendantNotification(name: r'''􀇿''', id: '1:409', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 16,
                                height: 18,
                                alignment: Alignment(-1, -1),
                                child: Align(
                                    alignment: Alignment(-1, -1),
                                    child: this.textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_I1_397_135_108 extends StatefulWidget {
            
        final String nodeName = r'''Segmented Control''';
        final String name = r'''Segmented Control''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_397_135_108({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_397_135_108 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_397_135_108(properties:properties);
        }
            @override
                _Widget_I1_397_135_108State createState() => _Widget_I1_397_135_108State(this.properties);
            }
            class _Widget_I1_397_135_108State extends BaseState<Widget_I1_397_135_108> {
                bool visible = true;
                bool isLoaded = false;
                double width = 162.5;
                double height = 28.00235366821289;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Segmented Control''', id: 'I1:397;135:108', componentName:r'''Segmented Control''');
                
                _Widget_I1_397_135_108State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Segmented Control''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Segmented Control');
            }            
            
            var painter = Node_I1_397_135_108();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Segmented Control''', id: 'I1:397;135:108', widget: this, componentName:r'''Segmented Control''');
                ComponentDescendantNotification(name: r'''Segmented Control''', id: 'I1:397;135:108', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: this.width, minHeight: 0, maxHeight: this.height),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(0.003076923076922977, -0.00008405251361287558),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0.003076923076922977, -0.00008405251361287558),
                                                                        margin: EdgeInsets.fromLTRB(constraints.widthConstraints().maxWidth / 20.3125, (){
                        double s = constraints.heightConstraints().maxHeight, r = 0, n = 16, d = 4.667058944702148, o = 4.66522887788286;
                        r = (((s / d + s / o + n) > s) ? (s - n) / d : r = s / d).abs();
                        return r as double;
                    }(), constraints.widthConstraints().maxWidth / 21.666666666666668, (){
                        double s = constraints.heightConstraints().maxHeight, r = 0, n = 16, d = 4.66522887788286, o = 4.667058944702148;
                        r = (((s / d + s / o + n) > s) ? (s - n) / d : r = s / d).abs();
                        return r as double;
                    }()),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: this.height, maxHeight: this.height),
                                                                        
                                                                        height: 16,
                                                                        
                                                                        child: Widget_I1_397_135_109()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_397_135_109 extends StatefulWidget {
            
        final String nodeName = r''' Label''';
        final String name = r''' Label''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_397_135_109({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_397_135_109 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_397_135_109(properties:properties);
        }
            @override
                _Widget_I1_397_135_109State createState() => _Widget_I1_397_135_109State(this.properties);
            }
            class _Widget_I1_397_135_109State extends BaseState<Widget_I1_397_135_109> {
                bool visible = true;
                bool isLoaded = false;
                double width = 147;
                double height = 16;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r''' Label''', id: 'I1:397;135:109', componentName:r''' Label''');
                
                _Widget_I1_397_135_109State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Room''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((16/20).floor()) <=1 ? 1 : (16/20).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 13,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w600,
                                letterSpacing: -0.07999999821186066,
                                fontStyle: FontStyle.normal,
                                height: 1.2307692307692308,
                                color: Color.fromRGBO(0, 0, 0, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r''' Label''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, ' Label');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r''' Label''', id: 'I1:397;135:109', widget: this, componentName:r''' Label''');
                ComponentDescendantNotification(name: r''' Label''', id: 'I1:397;135:109', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: this.height, maxHeight: this.height),
                                width: mq_width,
                                height: 16,
                                alignment: Alignment(0.003076923076922977, -0.00008405251361287558),
                                child: Align(
                                    alignment: Alignment(0, 0),
                                    child: this.textWidgets)
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_397_135_110 extends StatefulWidget {
            
        final String nodeName = r'''Segmented Control''';
        final String name = r'''Segmented Control''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_397_135_110({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_397_135_110 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_397_135_110(properties:properties);
        }
            @override
                _Widget_I1_397_135_110State createState() => _Widget_I1_397_135_110State(this.properties);
            }
            class _Widget_I1_397_135_110State extends BaseState<Widget_I1_397_135_110> {
                bool visible = true;
                bool isLoaded = false;
                double width = 162.5;
                double height = 28.00235366821289;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Segmented Control''', id: 'I1:397;135:110', componentName:r'''Segmented Control''');
                
                _Widget_I1_397_135_110State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Segmented Control''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Segmented Control');
            }            
            
            var painter = Node_I1_397_135_110();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Segmented Control''', id: 'I1:397;135:110', widget: this, componentName:r'''Segmented Control''');
                ComponentDescendantNotification(name: r'''Segmented Control''', id: 'I1:397;135:110', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: this.width, minHeight: 0, maxHeight: this.height),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(0.003076923076922977, -0.00008405251361287558),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0.003076923076922977, -0.00008405251361287558),
                                                                        margin: EdgeInsets.fromLTRB(constraints.widthConstraints().maxWidth / 20.3125, (){
                        double s = constraints.heightConstraints().maxHeight, r = 0, n = 16, d = 4.667058944702148, o = 4.66522887788286;
                        r = (((s / d + s / o + n) > s) ? (s - n) / d : r = s / d).abs();
                        return r as double;
                    }(), constraints.widthConstraints().maxWidth / 21.666666666666668, (){
                        double s = constraints.heightConstraints().maxHeight, r = 0, n = 16, d = 4.66522887788286, o = 4.667058944702148;
                        r = (((s / d + s / o + n) > s) ? (s - n) / d : r = s / d).abs();
                        return r as double;
                    }()),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: this.height, maxHeight: this.height),
                                                                        
                                                                        height: 16,
                                                                        
                                                                        child: Widget_I1_397_135_111()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_397_135_111 extends StatefulWidget {
            
        final String nodeName = r'''Label''';
        final String name = r'''Label''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_397_135_111({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_397_135_111 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_397_135_111(properties:properties);
        }
            @override
                _Widget_I1_397_135_111State createState() => _Widget_I1_397_135_111State(this.properties);
            }
            class _Widget_I1_397_135_111State extends BaseState<Widget_I1_397_135_111> {
                bool visible = true;
                bool isLoaded = false;
                double width = 147;
                double height = 16;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Label''', id: 'I1:397;135:111', componentName:r'''Label''');
                
                _Widget_I1_397_135_111State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Devices''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((16/20).floor()) <=1 ? 1 : (16/20).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 13,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w500,
                                letterSpacing: -0.07999999821186066,
                                fontStyle: FontStyle.normal,
                                height: 1.2307692307692308,
                                color: Color.fromRGBO(60, 60, 67, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Label''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Label');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Label''', id: 'I1:397;135:111', widget: this, componentName:r'''Label''');
                ComponentDescendantNotification(name: r'''Label''', id: 'I1:397;135:111', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: this.height, maxHeight: this.height),
                                width: mq_width,
                                height: 16,
                                alignment: Alignment(0.003076923076922977, -0.00008405251361287558),
                                child: Align(
                                    alignment: Alignment(0, 0),
                                    child: this.textWidgets)
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_1_318 extends StatefulWidget {
            
        final String nodeName = r'''Card''';
        final String name = r'''Card''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_318({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_318 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_318(properties:properties);
        }
            @override
                _Widget_1_318State createState() => _Widget_1_318State(this.properties);
            }
            class _Widget_1_318State extends BaseState<Widget_1_318> {
                bool visible = true;
                bool isLoaded = false;
                double width = 155;
                double height = 233;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Card''', id: '1:318', componentName:r'''Card''');
                
                _Widget_1_318State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Card''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Card');
            }            
            
            var painter = Node_1_318();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Card''', id: '1:318', widget: this, componentName:r'''Card''');
                ComponentDescendantNotification(name: r'''Card''', id: '1:318', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 155,
                                height: 233,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 10,
                    //runSpacing: 10, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_1_319(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    SizedBox(height: 10), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_1_324(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_319 extends StatefulWidget {
            
        final String nodeName = r'''Group 11''';
        final String name = r'''Group 11''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_319({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_319 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_319(properties:properties);
        }
            @override
                _Widget_1_319State createState() => _Widget_1_319State(this.properties);
            }
            class _Widget_1_319State extends BaseState<Widget_1_319> {
                bool visible = true;
                bool isLoaded = false;
                double width = 155;
                double height = 120;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Group 11''', id: '1:319', componentName:r'''Group 11''');
                
                _Widget_1_319State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Group 11''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Group 11');
            }            
            
            var painter = Node_1_319();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Group 11''', id: '1:319', widget: this, componentName:r'''Group 11''');
                ComponentDescendantNotification(name: r'''Group 11''', id: '1:319', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 155,
                                height: 120,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 155 + 0, maxWidth: 155 + 0,
                                                                        minHeight: 120 + 0, maxHeight: 120 + 0,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 155,
                                                                        height: 120,
                                                                        
                                                                        child: Widget_1_320())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 22 + 123, maxWidth: 22 + 123,
                                                                        minHeight: 22 + 10, maxHeight: 22 + 10,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(123, 10, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 22,
                                                                        height: 22,
                                                                        
                                                                        child: Widget_1_321()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_1_320 extends StatefulWidget {
            
        final String nodeName = r'''img''';
        final String name = r'''img''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_320({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_320 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_320(properties:properties);
        }
            @override
                _Widget_1_320State createState() => _Widget_1_320State(this.properties);
            }
            class _Widget_1_320State extends BaseState<Widget_1_320> {
                bool visible = true;
                bool isLoaded = false;
                double width = 155;
                double height = 120;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''img''', id: '1:320', componentName:r'''img''');
                
                _Widget_1_320State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''img''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'img');
            }            
            
                    var image = Image(
                        image: AssetImage('images/1_320', package:'zephyra_1390242811_f2f'),
                    );
                    @override
                    void didChangeDependencies() {
                        precacheImage(image.image, context);
                        super.didChangeDependencies();
                    }
                    
            var painter = Node_1_320();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''img''', id: '1:320', widget: this, componentName:r'''img''');
                ComponentDescendantNotification(name: r'''img''', id: '1:320', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                        if(properties.containsKey('image')){
                            image = Image.network(properties['image'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageAsset')){
                            image = Image.asset(properties['imageAsset'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageFile')){
                            image = Image.file(File(properties['imageFile'] as String), fit: BoxFit.contain,);
                        }
                        
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 155,
                                height: 120,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    
                                                            RepaintBoundary( child: 
                                                                Transform(
                                                                    transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                                                                    alignment: FractionalOffset.center,
                                                                    child: FittedBox(
                                                                        child: image,
                                                                        fit: BoxFit.cover,
                                                                    ),
                                                                )
                                                            )
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_321 extends StatefulWidget {
            
        final String nodeName = r'''more icon''';
        final String name = r'''more icon''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_321({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_321 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_321(properties:properties);
        }
            @override
                _Widget_1_321State createState() => _Widget_1_321State(this.properties);
            }
            class _Widget_1_321State extends BaseState<Widget_1_321> {
                bool visible = true;
                bool isLoaded = false;
                double width = 22;
                double height = 22;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''more icon''', id: '1:321', componentName:r'''more icon''');
                
                _Widget_1_321State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''more icon''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'more icon');
            }            
            
            var painter = Node_1_321();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''more icon''', id: '1:321', widget: this, componentName:r'''more icon''');
                ComponentDescendantNotification(name: r'''more icon''', id: '1:321', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(6.123234262925839e-17, -1, 0, 0, 1, 6.123234262925839e-17, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 22,
                                height: 22,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 22 + 0, maxWidth: 22 + 0,
                                                                        minHeight: 22 + 0, maxHeight: 22 + 0,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 22,
                                                                        height: 22,
                                                                        
                                                                        child: Widget_1_322())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 18 + 2, maxWidth: 18 + 2,
                                                                        minHeight: 21 + 1, maxHeight: 21 + 1,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(2, 1, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 18,
                                                                        height: 21,
                                                                        
                                                                        child: Widget_1_323()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_322 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 9''';
        final String name = r'''Ellipse 9''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_322({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_322 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_322(properties:properties);
        }
            @override
                _Widget_1_322State createState() => _Widget_1_322State(this.properties);
            }
            class _Widget_1_322State extends BaseState<Widget_1_322> {
                bool visible = true;
                bool isLoaded = false;
                double width = 22;
                double height = 22;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 9''', id: '1:322', componentName:r'''Ellipse 9''');
                
                _Widget_1_322State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 9''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 9');
            }            
            
            var painter = Node_1_322();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 9''', id: '1:322', widget: this, componentName:r'''Ellipse 9''');
                ComponentDescendantNotification(name: r'''Ellipse 9''', id: '1:322', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 22,
                                height: 22,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_323 extends StatefulWidget {
            
        final String nodeName = r'''􀍠''';
        final String name = r'''􀍠''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_323({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_323 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_323(properties:properties);
        }
            @override
                _Widget_1_323State createState() => _Widget_1_323State(this.properties);
            }
            class _Widget_1_323State extends BaseState<Widget_1_323> {
                bool visible = true;
                bool isLoaded = false;
                double width = 18;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''􀍠''', id: '1:323', componentName:r'''􀍠''');
                
                _Widget_1_323State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''􀍠''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((21/21).floor()) <=1 ? 1 : (21/21).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 16,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w600,
                                letterSpacing: -0.3199999928474426,
                                fontStyle: FontStyle.normal,
                                height: 1.3125,
                                color: Color.fromRGBO(255, 255, 255, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''􀍠''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, '􀍠');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''􀍠''', id: '1:323', widget: this, componentName:r'''􀍠''');
                ComponentDescendantNotification(name: r'''􀍠''', id: '1:323', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 18,
                                height: 21,
                                alignment: Alignment(-1, -1),
                                child: Align(
                                    alignment: Alignment(0, -1),
                                    child: this.textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_324 extends StatefulWidget {
            
        final String nodeName = r'''Contents''';
        final String name = r'''Contents''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_324({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_324 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_324(properties:properties);
        }
            @override
                _Widget_1_324State createState() => _Widget_1_324State(this.properties);
            }
            class _Widget_1_324State extends BaseState<Widget_1_324> {
                bool visible = true;
                bool isLoaded = false;
                double width = 155;
                double height = 83;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Contents''', id: '1:324', componentName:r'''Contents''');
                
                _Widget_1_324State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Contents''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Contents');
            }            
            
            var painter = Node_1_324();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Contents''', id: '1:324', widget: this, componentName:r'''Contents''');
                ComponentDescendantNotification(name: r'''Contents''', id: '1:324', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 155,
                                height: 83,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 10,
                    //runSpacing: 10, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_1_325(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    SizedBox(height: 10), 
                                                    Widget_1_328(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        ))
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_1_325 extends StatefulWidget {
            
        final String nodeName = r'''Frame 2''';
        final String name = r'''Frame 2''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_325({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_325 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_325(properties:properties);
        }
            @override
                _Widget_1_325State createState() => _Widget_1_325State(this.properties);
            }
            class _Widget_1_325State extends BaseState<Widget_1_325> {
                bool visible = true;
                bool isLoaded = false;
                double width = 98;
                double height = 42;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Frame 2''', id: '1:325', componentName:r'''Frame 2''');
                
                _Widget_1_325State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Frame 2''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Frame 2');
            }            
            
            var painter = Node_1_325();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Frame 2''', id: '1:325', widget: this, componentName:r'''Frame 2''');
                ComponentDescendantNotification(name: r'''Frame 2''', id: '1:325', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 98,
                                height: 42,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_1_326(key:UniqueKey()), 
                                                    SizedBox(height: 0), 
                                                    Widget_1_327(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_1_326 extends StatefulWidget {
            
        final String nodeName = r'''Living Room''';
        final String name = r'''Living Room''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_326({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_326 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_326(properties:properties);
        }
            @override
                _Widget_1_326State createState() => _Widget_1_326State(this.properties);
            }
            class _Widget_1_326State extends BaseState<Widget_1_326> {
                bool visible = true;
                bool isLoaded = false;
                double width = 98;
                double height = 22;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Living Room''', id: '1:326', componentName:r'''Living Room''');
                
                _Widget_1_326State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Living Room''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((22/22).floor()) <=1 ? 1 : (22/22).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 17,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w600,
                                letterSpacing: -0.40799999237060547,
                                fontStyle: FontStyle.normal,
                                height: 1.2941176470588236,
                                color: Color.fromRGBO(60, 60, 67, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Living Room''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Living Room');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Living Room''', id: '1:326', widget: this, componentName:r'''Living Room''');
                ComponentDescendantNotification(name: r'''Living Room''', id: '1:326', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 98,
                                height: 22,
                                alignment: Alignment(-1, -1),
                                child: Align(
                                    alignment: Alignment(0, -1),
                                    child: this.textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_327 extends StatefulWidget {
            
        final String nodeName = r'''15 devices''';
        final String name = r'''15 devices''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_327({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_327 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_327(properties:properties);
        }
            @override
                _Widget_1_327State createState() => _Widget_1_327State(this.properties);
            }
            class _Widget_1_327State extends BaseState<Widget_1_327> {
                bool visible = true;
                bool isLoaded = false;
                double width = 73;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''15 devices''', id: '1:327', componentName:r'''15 devices''');
                
                _Widget_1_327State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''15 devices''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((20/20).floor()) <=1 ? 1 : (20/20).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 15,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w400,
                                letterSpacing: -0.23999999463558197,
                                fontStyle: FontStyle.normal,
                                height: 1.3333333333333333,
                                color: Color.fromRGBO(60, 60, 67, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''15 devices''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, '15 devices');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''15 devices''', id: '1:327', widget: this, componentName:r'''15 devices''');
                ComponentDescendantNotification(name: r'''15 devices''', id: '1:327', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 73,
                                height: 20,
                                alignment: Alignment(-1, -1),
                                child: Align(
                                    alignment: Alignment(0, -1),
                                    child: this.textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_I1_328_131_155 extends StatefulWidget {
            
        final String nodeName = r'''Switch''';
        final String name = r'''Switch''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_328_131_155({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_328_131_155 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_328_131_155(properties:properties);
        }
            @override
                _Widget_I1_328_131_155State createState() => _Widget_I1_328_131_155State(this.properties);
            }
            class _Widget_I1_328_131_155State extends BaseState<Widget_I1_328_131_155> {
                bool visible = true;
                bool isLoaded = false;
                double width = 135;
                double height = 31;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Switch''', id: 'I1:328;131:155', componentName:r'''Switch''');
                
                _Widget_I1_328_131_155State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Switch''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Switch');
            }            
            
            var painter = Node_I1_328_131_155();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Switch''', id: 'I1:328;131:155', widget: this, componentName:r'''Switch''');
                ComponentDescendantNotification(name: r'''Switch''', id: 'I1:328;131:155', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: 0, maxWidth: this.width, minHeight: 0, maxHeight: this.height),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 58,
                    //runSpacing: 58, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_I1_328_131_156(key:UniqueKey()), 
                                                    SizedBox(width: 58), 
                                                    Widget_I1_328_131_157(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        ))
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_I1_328_131_156 extends StatefulWidget {
            
        final String nodeName = r'''Label''';
        final String name = r'''Label''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_328_131_156({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_328_131_156 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_328_131_156(properties:properties);
        }
            @override
                _Widget_I1_328_131_156State createState() => _Widget_I1_328_131_156State(this.properties);
            }
            class _Widget_I1_328_131_156State extends BaseState<Widget_I1_328_131_156> {
                bool visible = true;
                bool isLoaded = false;
                double width = 33;
                double height = 22;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Label''', id: 'I1:328;131:156', componentName:r'''Label''');
                
                _Widget_I1_328_131_156State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''OFF''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((22/22).floor()) <=1 ? 1 : (22/22).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 17,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w600,
                                letterSpacing: -0.40799999237060547,
                                fontStyle: FontStyle.normal,
                                height: 1.2941176470588236,
                                color: Color.fromRGBO(60, 60, 67, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Label''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Label');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Label''', id: 'I1:328;131:156', widget: this, componentName:r'''Label''');
                ComponentDescendantNotification(name: r'''Label''', id: 'I1:328;131:156', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 33,
                                height: 22,
                                alignment: Alignment(-1, 0),
                                child: Align(
                                    alignment: Alignment(0, -1),
                                    child: this.textWidgets)
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_328_131_157 extends StatefulWidget {
            
        final String nodeName = r'''Switch''';
        final String name = r'''Switch''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_328_131_157({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_328_131_157 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_328_131_157(properties:properties);
        }
            @override
                _Widget_I1_328_131_157State createState() => _Widget_I1_328_131_157State(this.properties);
            }
            class _Widget_I1_328_131_157State extends BaseState<Widget_I1_328_131_157> {
                bool visible = true;
                bool isLoaded = false;
                double width = 51;
                double height = 31;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Switch''', id: 'I1:328;131:157', componentName:r'''Switch''');
                
                _Widget_I1_328_131_157State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Switch''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Switch');
            }            
            
            var painter = Node_I1_328_131_157();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Switch''', id: 'I1:328;131:157', widget: this, componentName:r'''Switch''');
                ComponentDescendantNotification(name: r'''Switch''', id: 'I1:328;131:157', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 51,
                                height: 31,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, 0.00000492219002024008),
                                                                        minWidth: 51 + 0, maxWidth: 51 + 0,
                                                                        minHeight: 31.000152587890625 + 0, maxHeight: 31.000152587890625 + 0,
                                                                        child:Container(
                                                                        alignment: Alignment(0, 0.00000492219002024008),
                                                                        margin: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 51,
                                                                        height: 31.000152587890625,
                                                                        
                                                                        child: Widget_I1_328_131_158())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-0.3921568627450981, 0),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(-0.3921568627450981, 0),
                                                                        margin: EdgeInsets.fromLTRB((){
                            double s = constraints.widthConstraints().maxWidth, r = 0, n = 27, d = 25.5, o = 2.3181818181818183;
                            r = (((s / d + s / o + n) > s) ? (s - n) / d : r = s / d).abs();
                            return r as double;
                        }(), (){
                        double s = constraints.heightConstraints().maxHeight, r = 0, n = 27, d = 15.5, o = 15.5;
                        r = (((s / d + s / o + n) > s) ? (s - n) / d : r = s / d).abs();
                        return r as double;
                    }(), (){
                            double s = constraints.widthConstraints().maxWidth, r = 0, n = 27, d = 2.3181818181818183, o = 25.5;
                            r = (((s / d + s / o + n) > s) ? (s - n) / d : r = s / d).abs();
                            return r as double;
                        }(), (){
                        double s = constraints.heightConstraints().maxHeight, r = 0, n = 27, d = 15.5, o = 15.5;
                        r = (((s / d + s / o + n) > s) ? (s - n) / d : r = s / d).abs();
                        return r as double;
                    }()),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 27,
                                                                        height: 27,
                                                                        
                                                                        child: Widget_I1_328_131_159()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_I1_328_131_158 extends StatefulWidget {
            
        final String nodeName = r'''Background''';
        final String name = r'''Background''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_328_131_158({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_328_131_158 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_328_131_158(properties:properties);
        }
            @override
                _Widget_I1_328_131_158State createState() => _Widget_I1_328_131_158State(this.properties);
            }
            class _Widget_I1_328_131_158State extends BaseState<Widget_I1_328_131_158> {
                bool visible = true;
                bool isLoaded = false;
                double width = 51;
                double height = 31.000152587890625;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Background''', id: 'I1:328;131:158', componentName:r'''Background''');
                
                _Widget_I1_328_131_158State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Background''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Background');
            }            
            
            var painter = Node_I1_328_131_158();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Background''', id: 'I1:328;131:158', widget: this, componentName:r'''Background''');
                ComponentDescendantNotification(name: r'''Background''', id: 'I1:328;131:158', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 51,
                                height: 31.000152587890625,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_328_131_159 extends StatefulWidget {
            
        final String nodeName = r'''Knob''';
        final String name = r'''Knob''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_328_131_159({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_328_131_159 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_328_131_159(properties:properties);
        }
            @override
                _Widget_I1_328_131_159State createState() => _Widget_I1_328_131_159State(this.properties);
            }
            class _Widget_I1_328_131_159State extends BaseState<Widget_I1_328_131_159> {
                bool visible = true;
                bool isLoaded = false;
                double width = 27;
                double height = 27;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Knob''', id: 'I1:328;131:159', componentName:r'''Knob''');
                
                _Widget_I1_328_131_159State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Knob''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Knob');
            }            
            
            var painter = Node_I1_328_131_159();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Knob''', id: 'I1:328;131:159', widget: this, componentName:r'''Knob''');
                ComponentDescendantNotification(name: r'''Knob''', id: 'I1:328;131:159', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 27,
                                height: 27,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_1_306 extends StatefulWidget {
            
        final String nodeName = r'''Card''';
        final String name = r'''Card''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_306({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_306 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_306(properties:properties);
        }
            @override
                _Widget_1_306State createState() => _Widget_1_306State(this.properties);
            }
            class _Widget_1_306State extends BaseState<Widget_1_306> {
                bool visible = true;
                bool isLoaded = false;
                double width = 155;
                double height = 233;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Card''', id: '1:306', componentName:r'''Card''');
                
                _Widget_1_306State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Card''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Card');
            }            
            
            var painter = Node_1_306();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Card''', id: '1:306', widget: this, componentName:r'''Card''');
                ComponentDescendantNotification(name: r'''Card''', id: '1:306', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 155,
                                height: 233,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 10,
                    //runSpacing: 10, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_1_307(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    SizedBox(height: 10), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_1_312(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_307 extends StatefulWidget {
            
        final String nodeName = r'''Group 10''';
        final String name = r'''Group 10''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_307({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_307 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_307(properties:properties);
        }
            @override
                _Widget_1_307State createState() => _Widget_1_307State(this.properties);
            }
            class _Widget_1_307State extends BaseState<Widget_1_307> {
                bool visible = true;
                bool isLoaded = false;
                double width = 155;
                double height = 120;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Group 10''', id: '1:307', componentName:r'''Group 10''');
                
                _Widget_1_307State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Group 10''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Group 10');
            }            
            
            var painter = Node_1_307();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Group 10''', id: '1:307', widget: this, componentName:r'''Group 10''');
                ComponentDescendantNotification(name: r'''Group 10''', id: '1:307', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 155,
                                height: 120,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 155 + 0, maxWidth: 155 + 0,
                                                                        minHeight: 120 + 0, maxHeight: 120 + 0,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 155,
                                                                        height: 120,
                                                                        
                                                                        child: Widget_1_308())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 22 + 123, maxWidth: 22 + 123,
                                                                        minHeight: 22 + 10, maxHeight: 22 + 10,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(123, 10, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 22,
                                                                        height: 22,
                                                                        
                                                                        child: Widget_1_309()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_1_308 extends StatefulWidget {
            
        final String nodeName = r'''img''';
        final String name = r'''img''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_308({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_308 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_308(properties:properties);
        }
            @override
                _Widget_1_308State createState() => _Widget_1_308State(this.properties);
            }
            class _Widget_1_308State extends BaseState<Widget_1_308> {
                bool visible = true;
                bool isLoaded = false;
                double width = 155;
                double height = 120;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''img''', id: '1:308', componentName:r'''img''');
                
                _Widget_1_308State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''img''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'img');
            }            
            
                    var image = Image(
                        image: AssetImage('images/1_308', package:'zephyra_1390242811_f2f'),
                    );
                    @override
                    void didChangeDependencies() {
                        precacheImage(image.image, context);
                        super.didChangeDependencies();
                    }
                    
            var painter = Node_1_308();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''img''', id: '1:308', widget: this, componentName:r'''img''');
                ComponentDescendantNotification(name: r'''img''', id: '1:308', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                        if(properties.containsKey('image')){
                            image = Image.network(properties['image'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageAsset')){
                            image = Image.asset(properties['imageAsset'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageFile')){
                            image = Image.file(File(properties['imageFile'] as String), fit: BoxFit.contain,);
                        }
                        
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 155,
                                height: 120,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    
                                                            RepaintBoundary( child: 
                                                                Transform(
                                                                    transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                                                                    alignment: FractionalOffset.center,
                                                                    child: FittedBox(
                                                                        child: image,
                                                                        fit: BoxFit.cover,
                                                                    ),
                                                                )
                                                            )
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_309 extends StatefulWidget {
            
        final String nodeName = r'''more icon''';
        final String name = r'''more icon''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_309({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_309 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_309(properties:properties);
        }
            @override
                _Widget_1_309State createState() => _Widget_1_309State(this.properties);
            }
            class _Widget_1_309State extends BaseState<Widget_1_309> {
                bool visible = true;
                bool isLoaded = false;
                double width = 22;
                double height = 22;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''more icon''', id: '1:309', componentName:r'''more icon''');
                
                _Widget_1_309State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''more icon''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'more icon');
            }            
            
            var painter = Node_1_309();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''more icon''', id: '1:309', widget: this, componentName:r'''more icon''');
                ComponentDescendantNotification(name: r'''more icon''', id: '1:309', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(6.123234262925839e-17, -1, 0, 0, 1, 6.123234262925839e-17, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 22,
                                height: 22,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 22 + 0, maxWidth: 22 + 0,
                                                                        minHeight: 22 + 0, maxHeight: 22 + 0,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 22,
                                                                        height: 22,
                                                                        
                                                                        child: Widget_1_310())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 18 + 2, maxWidth: 18 + 2,
                                                                        minHeight: 21 + 1, maxHeight: 21 + 1,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(2, 1, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 18,
                                                                        height: 21,
                                                                        
                                                                        child: Widget_1_311()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_310 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 9''';
        final String name = r'''Ellipse 9''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_310({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_310 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_310(properties:properties);
        }
            @override
                _Widget_1_310State createState() => _Widget_1_310State(this.properties);
            }
            class _Widget_1_310State extends BaseState<Widget_1_310> {
                bool visible = true;
                bool isLoaded = false;
                double width = 22;
                double height = 22;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 9''', id: '1:310', componentName:r'''Ellipse 9''');
                
                _Widget_1_310State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 9''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 9');
            }            
            
            var painter = Node_1_310();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 9''', id: '1:310', widget: this, componentName:r'''Ellipse 9''');
                ComponentDescendantNotification(name: r'''Ellipse 9''', id: '1:310', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 22,
                                height: 22,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_311 extends StatefulWidget {
            
        final String nodeName = r'''􀍠''';
        final String name = r'''􀍠''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_311({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_311 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_311(properties:properties);
        }
            @override
                _Widget_1_311State createState() => _Widget_1_311State(this.properties);
            }
            class _Widget_1_311State extends BaseState<Widget_1_311> {
                bool visible = true;
                bool isLoaded = false;
                double width = 18;
                double height = 21;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''􀍠''', id: '1:311', componentName:r'''􀍠''');
                
                _Widget_1_311State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''􀍠''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((21/21).floor()) <=1 ? 1 : (21/21).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 16,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w600,
                                letterSpacing: -0.3199999928474426,
                                fontStyle: FontStyle.normal,
                                height: 1.3125,
                                color: Color.fromRGBO(255, 255, 255, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''􀍠''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, '􀍠');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''􀍠''', id: '1:311', widget: this, componentName:r'''􀍠''');
                ComponentDescendantNotification(name: r'''􀍠''', id: '1:311', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 18,
                                height: 21,
                                alignment: Alignment(-1, -1),
                                child: Align(
                                    alignment: Alignment(0, -1),
                                    child: this.textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_312 extends StatefulWidget {
            
        final String nodeName = r'''Contents''';
        final String name = r'''Contents''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_312({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_312 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_312(properties:properties);
        }
            @override
                _Widget_1_312State createState() => _Widget_1_312State(this.properties);
            }
            class _Widget_1_312State extends BaseState<Widget_1_312> {
                bool visible = true;
                bool isLoaded = false;
                double width = 155;
                double height = 83;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Contents''', id: '1:312', componentName:r'''Contents''');
                
                _Widget_1_312State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Contents''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Contents');
            }            
            
            var painter = Node_1_312();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Contents''', id: '1:312', widget: this, componentName:r'''Contents''');
                ComponentDescendantNotification(name: r'''Contents''', id: '1:312', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 155,
                                height: 83,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 10,
                    //runSpacing: 10, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_1_313(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    SizedBox(height: 10), 
                                                    Widget_1_316(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_1_313 extends StatefulWidget {
            
        final String nodeName = r'''Frame 2''';
        final String name = r'''Frame 2''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_313({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_313 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_313(properties:properties);
        }
            @override
                _Widget_1_313State createState() => _Widget_1_313State(this.properties);
            }
            class _Widget_1_313State extends BaseState<Widget_1_313> {
                bool visible = true;
                bool isLoaded = false;
                double width = 133;
                double height = 42;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Frame 2''', id: '1:313', componentName:r'''Frame 2''');
                
                _Widget_1_313State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Frame 2''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Frame 2');
            }            
            
            var painter = Node_1_313();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Frame 2''', id: '1:313', widget: this, componentName:r'''Frame 2''');
                ComponentDescendantNotification(name: r'''Frame 2''', id: '1:313', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 133,
                                height: 42,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_1_314(key:UniqueKey()), 
                                                    SizedBox(height: 0), 
                                                    Widget_1_315(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_1_314 extends StatefulWidget {
            
        final String nodeName = r'''Master Bedroom''';
        final String name = r'''Master Bedroom''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_314({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_314 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_314(properties:properties);
        }
            @override
                _Widget_1_314State createState() => _Widget_1_314State(this.properties);
            }
            class _Widget_1_314State extends BaseState<Widget_1_314> {
                bool visible = true;
                bool isLoaded = false;
                double width = 133;
                double height = 22;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Master Bedroom''', id: '1:314', componentName:r'''Master Bedroom''');
                
                _Widget_1_314State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Master Bedroom''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((22/22).floor()) <=1 ? 1 : (22/22).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 17,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w600,
                                letterSpacing: -0.40799999237060547,
                                fontStyle: FontStyle.normal,
                                height: 1.2941176470588236,
                                color: Color.fromRGBO(60, 60, 67, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Master Bedroom''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Master Bedroom');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Master Bedroom''', id: '1:314', widget: this, componentName:r'''Master Bedroom''');
                ComponentDescendantNotification(name: r'''Master Bedroom''', id: '1:314', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 133,
                                height: 22,
                                alignment: Alignment(-1, -1),
                                child: Align(
                                    alignment: Alignment(0, -1),
                                    child: this.textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_315 extends StatefulWidget {
            
        final String nodeName = r'''4 devices''';
        final String name = r'''4 devices''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_315({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_315 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_315(properties:properties);
        }
            @override
                _Widget_1_315State createState() => _Widget_1_315State(this.properties);
            }
            class _Widget_1_315State extends BaseState<Widget_1_315> {
                bool visible = true;
                bool isLoaded = false;
                double width = 67;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''4 devices''', id: '1:315', componentName:r'''4 devices''');
                
                _Widget_1_315State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''4 devices''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((20/20).floor()) <=1 ? 1 : (20/20).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 15,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w400,
                                letterSpacing: -0.23999999463558197,
                                fontStyle: FontStyle.normal,
                                height: 1.3333333333333333,
                                color: Color.fromRGBO(60, 60, 67, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''4 devices''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, '4 devices');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''4 devices''', id: '1:315', widget: this, componentName:r'''4 devices''');
                ComponentDescendantNotification(name: r'''4 devices''', id: '1:315', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 67,
                                height: 20,
                                alignment: Alignment(-1, -1),
                                child: Align(
                                    alignment: Alignment(0, -1),
                                    child: this.textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_I1_316_131_163 extends StatefulWidget {
            
        final String nodeName = r'''Switch''';
        final String name = r'''Switch''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_316_131_163({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_316_131_163 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_316_131_163(properties:properties);
        }
            @override
                _Widget_I1_316_131_163State createState() => _Widget_I1_316_131_163State(this.properties);
            }
            class _Widget_I1_316_131_163State extends BaseState<Widget_I1_316_131_163> {
                bool visible = true;
                bool isLoaded = false;
                double width = 135;
                double height = 31;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Switch''', id: 'I1:316;131:163', componentName:r'''Switch''');
                
                _Widget_I1_316_131_163State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Switch''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Switch');
            }            
            
            var painter = Node_I1_316_131_163();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Switch''', id: 'I1:316;131:163', widget: this, componentName:r'''Switch''');
                ComponentDescendantNotification(name: r'''Switch''', id: 'I1:316;131:163', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: 0, maxWidth: this.width, minHeight: 0, maxHeight: this.height),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 58,
                    //runSpacing: 58, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_I1_316_131_164(key:UniqueKey()), 
                                                    SizedBox(width: 58), 
                                                    Widget_I1_316_131_165(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        ))
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_I1_316_131_164 extends StatefulWidget {
            
        final String nodeName = r'''Label''';
        final String name = r'''Label''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_316_131_164({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_316_131_164 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_316_131_164(properties:properties);
        }
            @override
                _Widget_I1_316_131_164State createState() => _Widget_I1_316_131_164State(this.properties);
            }
            class _Widget_I1_316_131_164State extends BaseState<Widget_I1_316_131_164> {
                bool visible = true;
                bool isLoaded = false;
                double width = 26;
                double height = 22;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Label''', id: 'I1:316;131:164', componentName:r'''Label''');
                
                _Widget_I1_316_131_164State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''ON''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((22/22).floor()) <=1 ? 1 : (22/22).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 17,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w600,
                                letterSpacing: -0.40799999237060547,
                                fontStyle: FontStyle.normal,
                                height: 1.2941176470588236,
                                color: Color.fromRGBO(60, 60, 67, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Label''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Label');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Label''', id: 'I1:316;131:164', widget: this, componentName:r'''Label''');
                ComponentDescendantNotification(name: r'''Label''', id: 'I1:316;131:164', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 26,
                                height: 22,
                                alignment: Alignment(-1, 0),
                                child: Align(
                                    alignment: Alignment(0, -1),
                                    child: this.textWidgets)
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_316_131_165 extends StatefulWidget {
            
        final String nodeName = r'''Switch''';
        final String name = r'''Switch''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_316_131_165({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_316_131_165 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_316_131_165(properties:properties);
        }
            @override
                _Widget_I1_316_131_165State createState() => _Widget_I1_316_131_165State(this.properties);
            }
            class _Widget_I1_316_131_165State extends BaseState<Widget_I1_316_131_165> {
                bool visible = true;
                bool isLoaded = false;
                double width = 51;
                double height = 31;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Switch''', id: 'I1:316;131:165', componentName:r'''Switch''');
                
                _Widget_I1_316_131_165State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Switch''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Switch');
            }            
            
            var painter = Node_I1_316_131_165();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Switch''', id: 'I1:316;131:165', widget: this, componentName:r'''Switch''');
                ComponentDescendantNotification(name: r'''Switch''', id: 'I1:316;131:165', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 51,
                                height: 31,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, 0.00000492219002024008),
                                                                        minWidth: 51 + 0, maxWidth: 51 + 0,
                                                                        minHeight: 31.000152587890625 + 0, maxHeight: 31.000152587890625 + 0,
                                                                        child:Container(
                                                                        alignment: Alignment(0, 0.00000492219002024008),
                                                                        margin: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 51,
                                                                        height: 31.000152587890625,
                                                                        
                                                                        child: Widget_I1_316_131_166())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(0.392156862745098, 0),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0.392156862745098, 0),
                                                                        margin: EdgeInsets.fromLTRB((){
                            double s = constraints.widthConstraints().maxWidth, r = 0, n = 27, d = 2.3181818181818183, o = 25.5;
                            r = (((s / d + s / o + n) > s) ? (s - n) / d : r = s / d).abs();
                            return r as double;
                        }(), (){
                        double s = constraints.heightConstraints().maxHeight, r = 0, n = 27, d = 15.5, o = 15.5;
                        r = (((s / d + s / o + n) > s) ? (s - n) / d : r = s / d).abs();
                        return r as double;
                    }(), (){
                            double s = constraints.widthConstraints().maxWidth, r = 0, n = 27, d = 25.5, o = 2.3181818181818183;
                            r = (((s / d + s / o + n) > s) ? (s - n) / d : r = s / d).abs();
                            return r as double;
                        }(), (){
                        double s = constraints.heightConstraints().maxHeight, r = 0, n = 27, d = 15.5, o = 15.5;
                        r = (((s / d + s / o + n) > s) ? (s - n) / d : r = s / d).abs();
                        return r as double;
                    }()),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 27,
                                                                        height: 27,
                                                                        
                                                                        child: Widget_I1_316_131_167()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_I1_316_131_166 extends StatefulWidget {
            
        final String nodeName = r'''Background''';
        final String name = r'''Background''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_316_131_166({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_316_131_166 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_316_131_166(properties:properties);
        }
            @override
                _Widget_I1_316_131_166State createState() => _Widget_I1_316_131_166State(this.properties);
            }
            class _Widget_I1_316_131_166State extends BaseState<Widget_I1_316_131_166> {
                bool visible = true;
                bool isLoaded = false;
                double width = 51;
                double height = 31.000152587890625;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Background''', id: 'I1:316;131:166', componentName:r'''Background''');
                
                _Widget_I1_316_131_166State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Background''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Background');
            }            
            
            var painter = Node_I1_316_131_166();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Background''', id: 'I1:316;131:166', widget: this, componentName:r'''Background''');
                ComponentDescendantNotification(name: r'''Background''', id: 'I1:316;131:166', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 51,
                                height: 31.000152587890625,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_316_131_167 extends StatefulWidget {
            
        final String nodeName = r'''Knob''';
        final String name = r'''Knob''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_316_131_167({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_316_131_167 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_316_131_167(properties:properties);
        }
            @override
                _Widget_I1_316_131_167State createState() => _Widget_I1_316_131_167State(this.properties);
            }
            class _Widget_I1_316_131_167State extends BaseState<Widget_I1_316_131_167> {
                bool visible = true;
                bool isLoaded = false;
                double width = 27;
                double height = 27;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Knob''', id: 'I1:316;131:167', componentName:r'''Knob''');
                
                _Widget_I1_316_131_167State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Knob''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Knob');
            }            
            
            var painter = Node_I1_316_131_167();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Knob''', id: 'I1:316;131:167', widget: this, componentName:r'''Knob''');
                ComponentDescendantNotification(name: r'''Knob''', id: 'I1:316;131:167', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 27,
                                height: 27,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_1_428 extends StatefulWidget {
            
        final String nodeName = r'''TabBar''';
        final String name = r'''TabBar''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_428({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_428 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_428(properties:properties);
        }
            @override
                _Widget_1_428State createState() => _Widget_1_428State(this.properties);
            }
            class _Widget_1_428State extends BaseState<Widget_1_428> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 106;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''TabBar''', id: '1:428', componentName:r'''TabBar''');
                
                _Widget_1_428State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''TabBar''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'TabBar');
            }            
            
            var painter = Node_1_428();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''TabBar''', id: '1:428', widget: this, componentName:r'''TabBar''');
                ComponentDescendantNotification(name: r'''TabBar''', id: '1:428', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, -6, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 390,
                                height: 106,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, -1),
                                                                        
                                                                        minHeight: 88 + 18, maxHeight: 88 + 18,
                                                                        child:Container(
                                                                        alignment: Alignment(0, -1),
                                                                        margin: EdgeInsets.fromLTRB(0, 18, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: this.height, maxHeight: this.height),
                                                                        
                                                                        height: 88,
                                                                        
                                                                        child: Widget_1_429())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-0.05128205128205132, -1),
                                                                        
                                                                        minHeight: 68 + 0, maxHeight: 68 + 0,
                                                                        child:Container(
                                                                        alignment: Alignment(-0.05128205128205132, -1),
                                                                        margin: EdgeInsets.fromLTRB(constraints.widthConstraints().maxWidth / 2.6530612244897958, 0, constraints.widthConstraints().maxWidth / 2.3353293413173652, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: this.height, maxHeight: this.height),
                                                                        
                                                                        height: 68,
                                                                        
                                                                        child: Widget_1_437()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_1_429 extends StatefulWidget {
            
        final String nodeName = r'''Frame 3654''';
        final String name = r'''Frame 3654''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_429({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_429 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_429(properties:properties);
        }
            @override
                _Widget_1_429State createState() => _Widget_1_429State(this.properties);
            }
            class _Widget_1_429State extends BaseState<Widget_1_429> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 88;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Frame 3654''', id: '1:429', componentName:r'''Frame 3654''');
                
                _Widget_1_429State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Frame 3654''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Frame 3654');
            }            
            
            var painter = Node_1_429();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Frame 3654''', id: '1:429', widget: this, componentName:r'''Frame 3654''');
                ComponentDescendantNotification(name: r'''Frame 3654''', id: '1:429', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: this.height, maxHeight: this.height),
                                width: mq_width,
                                height: 88,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 175.33065795898438 + 0, maxWidth: 175.33065795898438 + 0,
                                                                        minHeight: 88 + 0, maxHeight: 88 + 0,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 175.33065795898438,
                                                                        height: 88,
                                                                        
                                                                        child: Widget_1_430())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 175.33065795898438 + 390, maxWidth: 175.33065795898438 + 390,
                                                                        minHeight: 88 + 0, maxHeight: 88 + 0,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(390, 0, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 175.33065795898438,
                                                                        height: 88,
                                                                        
                                                                        child: Widget_1_431())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 330 + 30, maxWidth: 330 + 30,
                                                                        minHeight: 64 + 15, maxHeight: 64 + 15,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(30, 15, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 330,
                                                                        height: 64,
                                                                        
                                                                        child: 
                                                                    TransparentPointer(
                                                                        child: Widget_1_432()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_1_430 extends StatefulWidget {
            
        final String nodeName = r'''Rectangle 8''';
        final String name = r'''Rectangle 8''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_430({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_430 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_430(properties:properties);
        }
            @override
                _Widget_1_430State createState() => _Widget_1_430State(this.properties);
            }
            class _Widget_1_430State extends BaseState<Widget_1_430> {
                bool visible = true;
                bool isLoaded = false;
                double width = 175.33065795898438;
                double height = 88;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Rectangle 8''', id: '1:430', componentName:r'''Rectangle 8''');
                
                _Widget_1_430State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Rectangle 8''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Rectangle 8');
            }            
            
            var painter = Node_1_430();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Rectangle 8''', id: '1:430', widget: this, componentName:r'''Rectangle 8''');
                ComponentDescendantNotification(name: r'''Rectangle 8''', id: '1:430', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 175.33065795898438,
                                height: 88,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_431 extends StatefulWidget {
            
        final String nodeName = r'''Rectangle 9''';
        final String name = r'''Rectangle 9''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_431({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_431 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_431(properties:properties);
        }
            @override
                _Widget_1_431State createState() => _Widget_1_431State(this.properties);
            }
            class _Widget_1_431State extends BaseState<Widget_1_431> {
                bool visible = true;
                bool isLoaded = false;
                double width = 175.33065795898438;
                double height = 88;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Rectangle 9''', id: '1:431', componentName:r'''Rectangle 9''');
                
                _Widget_1_431State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Rectangle 9''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Rectangle 9');
            }            
            
            var painter = Node_1_431();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Rectangle 9''', id: '1:431', widget: this, componentName:r'''Rectangle 9''');
                ComponentDescendantNotification(name: r'''Rectangle 9''', id: '1:431', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(-1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 175.33065795898438,
                                height: 88,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_432 extends StatefulWidget {
            
        final String nodeName = r'''Frame 3''';
        final String name = r'''Frame 3''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_432({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_432 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_432(properties:properties);
        }
            @override
                _Widget_1_432State createState() => _Widget_1_432State(this.properties);
            }
            class _Widget_1_432State extends BaseState<Widget_1_432> {
                bool visible = true;
                bool isLoaded = false;
                double width = 330;
                double height = 64;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Frame 3''', id: '1:432', componentName:r'''Frame 3''');
                
                _Widget_1_432State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Frame 3''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Frame 3');
            }            
            
            var painter = Node_1_432();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Frame 3''', id: '1:432', widget: this, componentName:r'''Frame 3''');
                ComponentDescendantNotification(name: r'''Frame 3''', id: '1:432', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 330,
                                height: 64,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.horizontal,
                    //spacing: 107,
                    //runSpacing: 107, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_1_433(key:UniqueKey()), 
                                                    SizedBox(width: 107), 
                                                    Widget_1_435(key:UniqueKey()), 
                                                    SizedBox(width: 107), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_1_436(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_1_433 extends StatefulWidget {
            
        final String nodeName = r'''Icon''';
        final String name = r'''Icon''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_433({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_433 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_433(properties:properties);
        }
            @override
                _Widget_1_433State createState() => _Widget_1_433State(this.properties);
            }
            class _Widget_1_433State extends BaseState<Widget_1_433> {
                bool visible = true;
                bool isLoaded = false;
                double width = 44;
                double height = 44;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Icon''', id: '1:433', componentName:r'''Icon''');
                
                _Widget_1_433State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Icon''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Icon');
            }            
            
            var painter = Node_1_433();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Icon''', id: '1:433', widget: this, componentName:r'''Icon''');
                ComponentDescendantNotification(name: r'''Icon''', id: '1:433', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 44,
                                height: 44,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(-0.31818181818181823, 0),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(-0.31818181818181823, 0),
                                                                        margin: EdgeInsets.fromLTRB(0, constraints.heightConstraints().maxHeight / 4.4, constraints.widthConstraints().maxWidth / 3.142857142857143, constraints.heightConstraints().maxHeight / 4.4),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        
                                                                        
                                                                        
                                                                        child: Widget_5_52()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_5_52 extends StatefulWidget {
            
        final String nodeName = r'''􀎞''';
        final String name = r'''􀎞''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_5_52({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_5_52 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_5_52(properties:properties);
        }
            @override
                _Widget_5_52State createState() => _Widget_5_52State(this.properties);
            }
            class _Widget_5_52State extends BaseState<Widget_5_52> {
                bool visible = true;
                bool isLoaded = false;
                double width = 30;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''􀎞''', id: '5:52', componentName:r'''􀎞''');
                
                _Widget_5_52State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''􀎞''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, '􀎞');
            }            
            
            var painter = Node_5_52();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''􀎞''', id: '5:52', widget: this, componentName:r'''􀎞''');
                ComponentDescendantNotification(name: r'''􀎞''', id: '5:52', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_435_8_151 extends StatefulWidget {
            
        final String nodeName = r'''Size Guide''';
        final String name = r'''Size Guide''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_435_8_151({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_435_8_151 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_435_8_151(properties:properties);
        }
            @override
                _Widget_I1_435_8_151State createState() => _Widget_I1_435_8_151State(this.properties);
            }
            class _Widget_I1_435_8_151State extends BaseState<Widget_I1_435_8_151> {
                bool visible = false;
                bool isLoaded = false;
                double width = 28;
                double height = 28;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Size Guide''', id: 'I1:435;8:151', componentName:r'''Size Guide''');
                
                _Widget_I1_435_8_151State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Size Guide''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Size Guide');
            }            
            
            var painter = Node_I1_435_8_151();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Size Guide''', id: 'I1:435;8:151', widget: this, componentName:r'''Size Guide''');
                ComponentDescendantNotification(name: r'''Size Guide''', id: 'I1:435;8:151', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, 0),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0, 0),
                                                                        margin: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                                                        
                                                                        
                                                                        
                                                                        child: Widget_I1_435_8_152())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, 0),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0, 0),
                                                                        margin: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                                                        
                                                                        
                                                                        
                                                                        child: Widget_I1_435_8_153()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        ))
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_I1_435_8_152 extends StatefulWidget {
            
        final String nodeName = r'''Max Width or Height @2x: 28pt x 28pt''';
        final String name = r'''Max Width or Height @2x: 28pt x 28pt''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_435_8_152({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_435_8_152 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_435_8_152(properties:properties);
        }
            @override
                _Widget_I1_435_8_152State createState() => _Widget_I1_435_8_152State(this.properties);
            }
            class _Widget_I1_435_8_152State extends BaseState<Widget_I1_435_8_152> {
                bool visible = true;
                bool isLoaded = false;
                double width = 28;
                double height = 28;
                double opacity = 0.30000001192092896;
                globals.Elem elem = globals.Elem(name: r'''Max Width or Height @2x: 28pt x 28pt''', id: 'I1:435;8:152', componentName:r'''Max Width or Height @2x: 28pt x 28pt''');
                
                _Widget_I1_435_8_152State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Max Width or Height @2x: 28pt x 28pt''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Max Width or Height @2x: 28pt x 28pt');
            }            
            
            var painter = Node_I1_435_8_152();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Max Width or Height @2x: 28pt x 28pt''', id: 'I1:435;8:152', widget: this, componentName:r'''Max Width or Height @2x: 28pt x 28pt''');
                ComponentDescendantNotification(name: r'''Max Width or Height @2x: 28pt x 28pt''', id: 'I1:435;8:152', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_435_8_153 extends StatefulWidget {
            
        final String nodeName = r'''Target Size @2x: 25pt x 25pt''';
        final String name = r'''Target Size @2x: 25pt x 25pt''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_435_8_153({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_435_8_153 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_435_8_153(properties:properties);
        }
            @override
                _Widget_I1_435_8_153State createState() => _Widget_I1_435_8_153State(this.properties);
            }
            class _Widget_I1_435_8_153State extends BaseState<Widget_I1_435_8_153> {
                bool visible = true;
                bool isLoaded = false;
                double width = 28;
                double height = 28;
                double opacity = 0.30000001192092896;
                globals.Elem elem = globals.Elem(name: r'''Target Size @2x: 25pt x 25pt''', id: 'I1:435;8:153', componentName:r'''Target Size @2x: 25pt x 25pt''');
                
                _Widget_I1_435_8_153State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Target Size @2x: 25pt x 25pt''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Target Size @2x: 25pt x 25pt');
            }            
            
            var painter = Node_I1_435_8_153();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Target Size @2x: 25pt x 25pt''', id: 'I1:435;8:153', widget: this, componentName:r'''Target Size @2x: 25pt x 25pt''');
                ComponentDescendantNotification(name: r'''Target Size @2x: 25pt x 25pt''', id: 'I1:435;8:153', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_435_8_154 extends StatefulWidget {
            
        final String nodeName = r'''Rectangle''';
        final String name = r'''Rectangle''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_435_8_154({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_435_8_154 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_435_8_154(properties:properties);
        }
            @override
                _Widget_I1_435_8_154State createState() => _Widget_I1_435_8_154State(this.properties);
            }
            class _Widget_I1_435_8_154State extends BaseState<Widget_I1_435_8_154> {
                bool visible = true;
                bool isLoaded = false;
                double width = 28;
                double height = 28;
                double opacity = 0.30000001192092896;
                globals.Elem elem = globals.Elem(name: r'''Rectangle''', id: 'I1:435;8:154', componentName:r'''Rectangle''');
                
                _Widget_I1_435_8_154State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Rectangle''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Rectangle');
            }            
            
            var painter = Node_I1_435_8_154();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Rectangle''', id: 'I1:435;8:154', widget: this, componentName:r'''Rectangle''');
                ComponentDescendantNotification(name: r'''Rectangle''', id: 'I1:435;8:154', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_435_8_155 extends StatefulWidget {
            
        final String nodeName = r'''Rectangle''';
        final String name = r'''Rectangle''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_435_8_155({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_435_8_155 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_435_8_155(properties:properties);
        }
            @override
                _Widget_I1_435_8_155State createState() => _Widget_I1_435_8_155State(this.properties);
            }
            class _Widget_I1_435_8_155State extends BaseState<Widget_I1_435_8_155> {
                bool visible = true;
                bool isLoaded = false;
                double width = 25;
                double height = 25;
                double opacity = 0.30000001192092896;
                globals.Elem elem = globals.Elem(name: r'''Rectangle''', id: 'I1:435;8:155', componentName:r'''Rectangle''');
                
                _Widget_I1_435_8_155State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Rectangle''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Rectangle');
            }            
            
            var painter = Node_I1_435_8_155();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Rectangle''', id: 'I1:435;8:155', widget: this, componentName:r'''Rectangle''');
                ComponentDescendantNotification(name: r'''Rectangle''', id: 'I1:435;8:155', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_435_8_156 extends StatefulWidget {
            
        final String nodeName = r'''Symbol''';
        final String name = r'''Symbol''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_435_8_156({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_435_8_156 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_435_8_156(properties:properties);
        }
            @override
                _Widget_I1_435_8_156State createState() => _Widget_I1_435_8_156State(this.properties);
            }
            class _Widget_I1_435_8_156State extends BaseState<Widget_I1_435_8_156> {
                bool visible = false;
                bool isLoaded = false;
                double width = 44;
                double height = 44;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Symbol''', id: 'I1:435;8:156', componentName:r'''Symbol''');
                
                _Widget_I1_435_8_156State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''􀐿''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((44/26.25390625).floor()) <=1 ? 1 : (44/26.25390625).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 22,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w100,
                                letterSpacing: 0.023181816563010216,
                                fontStyle: FontStyle.normal,
                                height: 1.193359375,
                                color: Color.fromRGBO(242, 242, 242, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Symbol''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Symbol');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Symbol''', id: 'I1:435;8:156', widget: this, componentName:r'''Symbol''');
                ComponentDescendantNotification(name: r'''Symbol''', id: 'I1:435;8:156', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: mq_width,
                                height: mq_height,
                                alignment: Alignment(0, 0),
                                child: Align(
                                    alignment: Alignment(0, 0),
                                    child: this.textWidgets)
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_436_8_179 extends StatefulWidget {
            
        final String nodeName = r'''Size Guide''';
        final String name = r'''Size Guide''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_436_8_179({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_436_8_179 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_436_8_179(properties:properties);
        }
            @override
                _Widget_I1_436_8_179State createState() => _Widget_I1_436_8_179State(this.properties);
            }
            class _Widget_I1_436_8_179State extends BaseState<Widget_I1_436_8_179> {
                bool visible = false;
                bool isLoaded = false;
                double width = 35;
                double height = 36.272727966308594;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Size Guide''', id: 'I1:436;8:179', componentName:r'''Size Guide''');
                
                _Widget_I1_436_8_179State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Size Guide''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Size Guide');
            }            
            
            var painter = Node_I1_436_8_179();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Size Guide''', id: 'I1:436;8:179', widget: this, componentName:r'''Size Guide''');
                ComponentDescendantNotification(name: r'''Size Guide''', id: 'I1:436;8:179', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, 0),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0, 0),
                                                                        margin: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                                                        
                                                                        
                                                                        
                                                                        child: Widget_I1_436_8_180())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, 0),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0, 0),
                                                                        margin: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                                                        
                                                                        
                                                                        
                                                                        child: Widget_I1_436_8_181()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        ))
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_I1_436_8_180 extends StatefulWidget {
            
        final String nodeName = r'''Max Width or Height @2x: 28pt x 28pt''';
        final String name = r'''Max Width or Height @2x: 28pt x 28pt''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_436_8_180({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_436_8_180 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_436_8_180(properties:properties);
        }
            @override
                _Widget_I1_436_8_180State createState() => _Widget_I1_436_8_180State(this.properties);
            }
            class _Widget_I1_436_8_180State extends BaseState<Widget_I1_436_8_180> {
                bool visible = true;
                bool isLoaded = false;
                double width = 35;
                double height = 36.272727966308594;
                double opacity = 0.30000001192092896;
                globals.Elem elem = globals.Elem(name: r'''Max Width or Height @2x: 28pt x 28pt''', id: 'I1:436;8:180', componentName:r'''Max Width or Height @2x: 28pt x 28pt''');
                
                _Widget_I1_436_8_180State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Max Width or Height @2x: 28pt x 28pt''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Max Width or Height @2x: 28pt x 28pt');
            }            
            
            var painter = Node_I1_436_8_180();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Max Width or Height @2x: 28pt x 28pt''', id: 'I1:436;8:180', widget: this, componentName:r'''Max Width or Height @2x: 28pt x 28pt''');
                ComponentDescendantNotification(name: r'''Max Width or Height @2x: 28pt x 28pt''', id: 'I1:436;8:180', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_436_8_181 extends StatefulWidget {
            
        final String nodeName = r'''Target Size @2x: 25pt x 25pt''';
        final String name = r'''Target Size @2x: 25pt x 25pt''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_436_8_181({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_436_8_181 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_436_8_181(properties:properties);
        }
            @override
                _Widget_I1_436_8_181State createState() => _Widget_I1_436_8_181State(this.properties);
            }
            class _Widget_I1_436_8_181State extends BaseState<Widget_I1_436_8_181> {
                bool visible = true;
                bool isLoaded = false;
                double width = 35;
                double height = 36.272727966308594;
                double opacity = 0.30000001192092896;
                globals.Elem elem = globals.Elem(name: r'''Target Size @2x: 25pt x 25pt''', id: 'I1:436;8:181', componentName:r'''Target Size @2x: 25pt x 25pt''');
                
                _Widget_I1_436_8_181State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Target Size @2x: 25pt x 25pt''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Target Size @2x: 25pt x 25pt');
            }            
            
            var painter = Node_I1_436_8_181();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Target Size @2x: 25pt x 25pt''', id: 'I1:436;8:181', widget: this, componentName:r'''Target Size @2x: 25pt x 25pt''');
                ComponentDescendantNotification(name: r'''Target Size @2x: 25pt x 25pt''', id: 'I1:436;8:181', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_436_8_182 extends StatefulWidget {
            
        final String nodeName = r'''Rectangle''';
        final String name = r'''Rectangle''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_436_8_182({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_436_8_182 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_436_8_182(properties:properties);
        }
            @override
                _Widget_I1_436_8_182State createState() => _Widget_I1_436_8_182State(this.properties);
            }
            class _Widget_I1_436_8_182State extends BaseState<Widget_I1_436_8_182> {
                bool visible = true;
                bool isLoaded = false;
                double width = 35;
                double height = 36.272727966308594;
                double opacity = 0.30000001192092896;
                globals.Elem elem = globals.Elem(name: r'''Rectangle''', id: 'I1:436;8:182', componentName:r'''Rectangle''');
                
                _Widget_I1_436_8_182State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Rectangle''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Rectangle');
            }            
            
            var painter = Node_I1_436_8_182();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Rectangle''', id: 'I1:436;8:182', widget: this, componentName:r'''Rectangle''');
                ComponentDescendantNotification(name: r'''Rectangle''', id: 'I1:436;8:182', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_436_8_183 extends StatefulWidget {
            
        final String nodeName = r'''Rectangle''';
        final String name = r'''Rectangle''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_436_8_183({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_436_8_183 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_436_8_183(properties:properties);
        }
            @override
                _Widget_I1_436_8_183State createState() => _Widget_I1_436_8_183State(this.properties);
            }
            class _Widget_I1_436_8_183State extends BaseState<Widget_I1_436_8_183> {
                bool visible = true;
                bool isLoaded = false;
                double width = 31.25;
                double height = 32.38636779785156;
                double opacity = 0.30000001192092896;
                globals.Elem elem = globals.Elem(name: r'''Rectangle''', id: 'I1:436;8:183', componentName:r'''Rectangle''');
                
                _Widget_I1_436_8_183State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Rectangle''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Rectangle');
            }            
            
            var painter = Node_I1_436_8_183();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Rectangle''', id: 'I1:436;8:183', widget: this, componentName:r'''Rectangle''');
                ComponentDescendantNotification(name: r'''Rectangle''', id: 'I1:436;8:183', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_436_8_184 extends StatefulWidget {
            
        final String nodeName = r'''Symbol''';
        final String name = r'''Symbol''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_436_8_184({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_436_8_184 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_436_8_184(properties:properties);
        }
            @override
                _Widget_I1_436_8_184State createState() => _Widget_I1_436_8_184State(this.properties);
            }
            class _Widget_I1_436_8_184State extends BaseState<Widget_I1_436_8_184> {
                bool visible = true;
                bool isLoaded = false;
                double width = 68;
                double height = 52;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Symbol''', id: 'I1:436;8:184', componentName:r'''Symbol''');
                
                _Widget_I1_436_8_184State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''􀉩''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((52/26.25390625).floor()) <=1 ? 1 : (52/26.25390625).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 22,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w700,
                                letterSpacing: 0.023181816563010216,
                                fontStyle: FontStyle.normal,
                                height: 1.193359375,
                                color: Color.fromRGBO(255, 255, 255, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Symbol''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Symbol');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Symbol''', id: 'I1:436;8:184', widget: this, componentName:r'''Symbol''');
                ComponentDescendantNotification(name: r'''Symbol''', id: 'I1:436;8:184', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: mq_width,
                                height: mq_height,
                                alignment: Alignment(0.23636363636363633, -0.08771929824561409),
                                child: Align(
                                    alignment: Alignment(0, 0),
                                    child: this.textWidgets)
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_437_135_124 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 1''';
        final String name = r'''Ellipse 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_437_135_124({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_437_135_124 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_437_135_124(properties:properties);
        }
            @override
                _Widget_I1_437_135_124State createState() => _Widget_I1_437_135_124State(this.properties);
            }
            class _Widget_I1_437_135_124State extends BaseState<Widget_I1_437_135_124> {
                bool visible = true;
                bool isLoaded = false;
                double width = 84;
                double height = 84;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 1''', id: 'I1:437;135:124', componentName:r'''Ellipse 1''');
                
                _Widget_I1_437_135_124State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 1');
            }            
            
            var painter = Node_I1_437_135_124();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 1''', id: 'I1:437;135:124', widget: this, componentName:r'''Ellipse 1''');
                ComponentDescendantNotification(name: r'''Ellipse 1''', id: 'I1:437;135:124', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 84,
                                height: 84,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_I1_437_135_125 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 2''';
        final String name = r'''Ellipse 2''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_437_135_125({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_437_135_125 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_437_135_125(properties:properties);
        }
            @override
                _Widget_I1_437_135_125State createState() => _Widget_I1_437_135_125State(this.properties);
            }
            class _Widget_I1_437_135_125State extends BaseState<Widget_I1_437_135_125> {
                bool visible = true;
                bool isLoaded = false;
                double width = 60;
                double height = 60;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 2''', id: 'I1:437;135:125', componentName:r'''Ellipse 2''');
                
                _Widget_I1_437_135_125State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 2''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 2');
            }            
            
            var painter = Node_I1_437_135_125();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 2''', id: 'I1:437;135:125', widget: this, componentName:r'''Ellipse 2''');
                ComponentDescendantNotification(name: r'''Ellipse 2''', id: 'I1:437;135:125', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 60,
                                height: 60,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_I1_437_135_126 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 3 Blur''';
        final String name = r'''Ellipse 3 Blur''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_437_135_126({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_437_135_126 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_437_135_126(properties:properties);
        }
            @override
                _Widget_I1_437_135_126State createState() => _Widget_I1_437_135_126State(this.properties);
            }
            class _Widget_I1_437_135_126State extends BaseState<Widget_I1_437_135_126> {
                bool visible = true;
                bool isLoaded = false;
                double width = 60;
                double height = 60;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 3 Blur''', id: 'I1:437;135:126', componentName:r'''Ellipse 3 Blur''');
                
                _Widget_I1_437_135_126State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 3 Blur''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 3 Blur');
            }            
            
            var painter = Node_I1_437_135_126();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 3 Blur''', id: 'I1:437;135:126', widget: this, componentName:r'''Ellipse 3 Blur''');
                ComponentDescendantNotification(name: r'''Ellipse 3 Blur''', id: 'I1:437;135:126', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 60,
                                height: 60,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_I1_437_135_127 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 4''';
        final String name = r'''Ellipse 4''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_437_135_127({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_437_135_127 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_437_135_127(properties:properties);
        }
            @override
                _Widget_I1_437_135_127State createState() => _Widget_I1_437_135_127State(this.properties);
            }
            class _Widget_I1_437_135_127State extends BaseState<Widget_I1_437_135_127> {
                bool visible = false;
                bool isLoaded = false;
                double width = 50;
                double height = 50;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 4''', id: 'I1:437;135:127', componentName:r'''Ellipse 4''');
                
                _Widget_I1_437_135_127State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 4''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 4');
            }            
            
            var painter = Node_I1_437_135_127();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 4''', id: 'I1:437;135:127', widget: this, componentName:r'''Ellipse 4''');
                ComponentDescendantNotification(name: r'''Ellipse 4''', id: 'I1:437;135:127', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 50,
                                height: 50,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_I1_437_135_128_20_155 extends StatefulWidget {
            
        final String nodeName = r'''Size Guide''';
        final String name = r'''Size Guide''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_437_135_128_20_155({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_437_135_128_20_155 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_437_135_128_20_155(properties:properties);
        }
            @override
                _Widget_I1_437_135_128_20_155State createState() => _Widget_I1_437_135_128_20_155State(this.properties);
            }
            class _Widget_I1_437_135_128_20_155State extends BaseState<Widget_I1_437_135_128_20_155> {
                bool visible = false;
                bool isLoaded = false;
                double width = 28;
                double height = 28;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Size Guide''', id: 'I1:437;135:128;20:155', componentName:r'''Size Guide''');
                
                _Widget_I1_437_135_128_20_155State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Size Guide''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Size Guide');
            }            
            
            var painter = Node_I1_437_135_128_20_155();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Size Guide''', id: 'I1:437;135:128;20:155', widget: this, componentName:r'''Size Guide''');
                ComponentDescendantNotification(name: r'''Size Guide''', id: 'I1:437;135:128;20:155', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, 0),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0, 0),
                                                                        margin: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                                                        
                                                                        
                                                                        
                                                                        child: Widget_I1_437_135_128_20_156())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, 0),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0, 0),
                                                                        margin: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                                                        
                                                                        
                                                                        
                                                                        child: Widget_I1_437_135_128_20_157()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        ))
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_I1_437_135_128_20_156 extends StatefulWidget {
            
        final String nodeName = r'''Max Width or Height @2x: 28pt x 28pt''';
        final String name = r'''Max Width or Height @2x: 28pt x 28pt''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_437_135_128_20_156({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_437_135_128_20_156 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_437_135_128_20_156(properties:properties);
        }
            @override
                _Widget_I1_437_135_128_20_156State createState() => _Widget_I1_437_135_128_20_156State(this.properties);
            }
            class _Widget_I1_437_135_128_20_156State extends BaseState<Widget_I1_437_135_128_20_156> {
                bool visible = true;
                bool isLoaded = false;
                double width = 28;
                double height = 28;
                double opacity = 0.30000001192092896;
                globals.Elem elem = globals.Elem(name: r'''Max Width or Height @2x: 28pt x 28pt''', id: 'I1:437;135:128;20:156', componentName:r'''Max Width or Height @2x: 28pt x 28pt''');
                
                _Widget_I1_437_135_128_20_156State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Max Width or Height @2x: 28pt x 28pt''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Max Width or Height @2x: 28pt x 28pt');
            }            
            
            var painter = Node_I1_437_135_128_20_156();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Max Width or Height @2x: 28pt x 28pt''', id: 'I1:437;135:128;20:156', widget: this, componentName:r'''Max Width or Height @2x: 28pt x 28pt''');
                ComponentDescendantNotification(name: r'''Max Width or Height @2x: 28pt x 28pt''', id: 'I1:437;135:128;20:156', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_437_135_128_20_157 extends StatefulWidget {
            
        final String nodeName = r'''Target Size @2x: 25pt x 25pt''';
        final String name = r'''Target Size @2x: 25pt x 25pt''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_437_135_128_20_157({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_437_135_128_20_157 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_437_135_128_20_157(properties:properties);
        }
            @override
                _Widget_I1_437_135_128_20_157State createState() => _Widget_I1_437_135_128_20_157State(this.properties);
            }
            class _Widget_I1_437_135_128_20_157State extends BaseState<Widget_I1_437_135_128_20_157> {
                bool visible = true;
                bool isLoaded = false;
                double width = 28;
                double height = 28;
                double opacity = 0.30000001192092896;
                globals.Elem elem = globals.Elem(name: r'''Target Size @2x: 25pt x 25pt''', id: 'I1:437;135:128;20:157', componentName:r'''Target Size @2x: 25pt x 25pt''');
                
                _Widget_I1_437_135_128_20_157State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Target Size @2x: 25pt x 25pt''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Target Size @2x: 25pt x 25pt');
            }            
            
            var painter = Node_I1_437_135_128_20_157();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Target Size @2x: 25pt x 25pt''', id: 'I1:437;135:128;20:157', widget: this, componentName:r'''Target Size @2x: 25pt x 25pt''');
                ComponentDescendantNotification(name: r'''Target Size @2x: 25pt x 25pt''', id: 'I1:437;135:128;20:157', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_437_135_128_20_158 extends StatefulWidget {
            
        final String nodeName = r'''Rectangle''';
        final String name = r'''Rectangle''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_437_135_128_20_158({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_437_135_128_20_158 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_437_135_128_20_158(properties:properties);
        }
            @override
                _Widget_I1_437_135_128_20_158State createState() => _Widget_I1_437_135_128_20_158State(this.properties);
            }
            class _Widget_I1_437_135_128_20_158State extends BaseState<Widget_I1_437_135_128_20_158> {
                bool visible = true;
                bool isLoaded = false;
                double width = 28;
                double height = 28;
                double opacity = 0.30000001192092896;
                globals.Elem elem = globals.Elem(name: r'''Rectangle''', id: 'I1:437;135:128;20:158', componentName:r'''Rectangle''');
                
                _Widget_I1_437_135_128_20_158State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Rectangle''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Rectangle');
            }            
            
            var painter = Node_I1_437_135_128_20_158();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Rectangle''', id: 'I1:437;135:128;20:158', widget: this, componentName:r'''Rectangle''');
                ComponentDescendantNotification(name: r'''Rectangle''', id: 'I1:437;135:128;20:158', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_437_135_128_20_159 extends StatefulWidget {
            
        final String nodeName = r'''Rectangle''';
        final String name = r'''Rectangle''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_437_135_128_20_159({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_437_135_128_20_159 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_437_135_128_20_159(properties:properties);
        }
            @override
                _Widget_I1_437_135_128_20_159State createState() => _Widget_I1_437_135_128_20_159State(this.properties);
            }
            class _Widget_I1_437_135_128_20_159State extends BaseState<Widget_I1_437_135_128_20_159> {
                bool visible = true;
                bool isLoaded = false;
                double width = 25;
                double height = 25;
                double opacity = 0.30000001192092896;
                globals.Elem elem = globals.Elem(name: r'''Rectangle''', id: 'I1:437;135:128;20:159', componentName:r'''Rectangle''');
                
                _Widget_I1_437_135_128_20_159State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Rectangle''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Rectangle');
            }            
            
            var painter = Node_I1_437_135_128_20_159();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Rectangle''', id: 'I1:437;135:128;20:159', widget: this, componentName:r'''Rectangle''');
                ComponentDescendantNotification(name: r'''Rectangle''', id: 'I1:437;135:128;20:159', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_437_135_128_20_160 extends StatefulWidget {
            
        final String nodeName = r'''􀊰''';
        final String name = r'''􀊰''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_437_135_128_20_160({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_437_135_128_20_160 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_437_135_128_20_160(properties:properties);
        }
            @override
                _Widget_I1_437_135_128_20_160State createState() => _Widget_I1_437_135_128_20_160State(this.properties);
            }
            class _Widget_I1_437_135_128_20_160State extends BaseState<Widget_I1_437_135_128_20_160> {
                bool visible = true;
                bool isLoaded = false;
                double width = 44;
                double height = 44;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''􀊰''', id: 'I1:437;135:128;20:160', componentName:r'''􀊰''');
                
                _Widget_I1_437_135_128_20_160State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''􀊰''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((44/28).floor()) <=1 ? 1 : (44/28).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 22,
                                fontFamily: 'SF Pro Display',
                                fontWeight: FontWeight.w700,
                                letterSpacing: 0.3499999940395355,
                                fontStyle: FontStyle.normal,
                                height: 1.2727272727272727,
                                color: Color.fromRGBO(152, 94, 225, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Display',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''􀊰''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, '􀊰');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''􀊰''', id: 'I1:437;135:128;20:160', widget: this, componentName:r'''􀊰''');
                ComponentDescendantNotification(name: r'''􀊰''', id: 'I1:437;135:128;20:160', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: mq_width,
                                height: mq_height,
                                alignment: Alignment(0, 0),
                                child: Align(
                                    alignment: Alignment(0, 0),
                                    child: this.textWidgets)
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Node_12_106 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_12_106({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(255, 255, 255, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_12_106 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_628 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_628({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_628 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_645 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_645({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_645 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_646 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_646({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_646 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_647 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_647({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_647 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_650 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_650({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_650 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_652 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_652({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_652 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_653 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_653({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(219, 224, 231, 1), Color.fromRGBO(248, 251, 255, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(-0.6111111030166538, -0.6111110762497534),
                    end: Alignment(0.9999999310131442, 1),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(36, 36)))
            ,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_653 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(10),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(10),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    
                        try{
                            canvas.drawPath(
                                path.shift(Offset(4, 4))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(59, 64, 86, 0.10000000149011612)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 10 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(4, 4);
                            canvas.drawShadow(path, Color.fromRGBO(59, 64, 86, 0.10000000149011612), 10, true);
                            canvas.translate(-4, -4);
                        }
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_655 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_655({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_655 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_656 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_656({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_656 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_659 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_659({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_659 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_661 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_661({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_661 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_662 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_662({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_662 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(10),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(10),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_663 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_663({this.properties = const {}}) : super();
            final List<Paint> fills = [];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M27 13.5C27 20.9558 20.9558 27 13.5 27C6.04416 27 0 20.9558 0 13.5C0 6.04416 6.04416 0 13.5 0C20.9558 0 27 6.04416 27 13.5Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(239, 241, 245, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> strokeGeometries = [((){
                    var path = parseSvgPathData('M25 13.5C25 19.8513 19.8513 25 13.5 25L13.5 29C22.0604 29 29 22.0604 29 13.5L25 13.5ZM13.5 25C7.14873 25 2 19.8513 2 13.5L-2 13.5C-2 22.0604 4.93959 29 13.5 29L13.5 25ZM2 13.5C2 7.14873 7.14873 2 13.5 2L13.5 -2C4.93959 -2 -2 4.93959 -2 13.5L2 13.5ZM13.5 2C19.8513 2 25 7.14873 25 13.5L29 13.5C29 4.93959 22.0604 -2 13.5 -2L13.5 2Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];

            @override
            bool shouldRepaint(Node_1_663 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        path = strokeAlign('OUTSIDE', path, fillPath, 2);
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_1_664 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_664({this.properties = const {}}) : super();
            final List<Paint> fills = [];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M27 13.5C27 20.9558 20.9558 27 13.5 27C6.04416 27 0 20.9558 0 13.5C0 6.04416 6.04416 0 13.5 0C20.9558 0 27 6.04416 27 13.5Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(239, 241, 245, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> strokeGeometries = [((){
                    var path = parseSvgPathData('M25 13.5C25 19.8513 19.8513 25 13.5 25L13.5 29C22.0604 29 29 22.0604 29 13.5L25 13.5ZM13.5 25C7.14873 25 2 19.8513 2 13.5L-2 13.5C-2 22.0604 4.93959 29 13.5 29L13.5 25ZM2 13.5C2 7.14873 7.14873 2 13.5 2L13.5 -2C4.93959 -2 -2 4.93959 -2 13.5L2 13.5ZM13.5 2C19.8513 2 25 7.14873 25 13.5L29 13.5C29 4.93959 22.0604 -2 13.5 -2L13.5 2Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];

            @override
            bool shouldRepaint(Node_1_664 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        path = strokeAlign('OUTSIDE', path, fillPath, 2);
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_1_665 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_665({this.properties = const {}}) : super();
            final List<Paint> fills = [];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M27 13.5C27 20.9558 20.9558 27 13.5 27C6.04416 27 0 20.9558 0 13.5C0 6.04416 6.04416 0 13.5 0C20.9558 0 27 6.04416 27 13.5Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(239, 241, 245, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> strokeGeometries = [((){
                    var path = parseSvgPathData('M25 13.5C25 19.8513 19.8513 25 13.5 25L13.5 29C22.0604 29 29 22.0604 29 13.5L25 13.5ZM13.5 25C7.14873 25 2 19.8513 2 13.5L-2 13.5C-2 22.0604 4.93959 29 13.5 29L13.5 25ZM2 13.5C2 7.14873 7.14873 2 13.5 2L13.5 -2C4.93959 -2 -2 4.93959 -2 13.5L2 13.5ZM13.5 2C19.8513 2 25 7.14873 25 13.5L29 13.5C29 4.93959 22.0604 -2 13.5 -2L13.5 2Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];

            @override
            bool shouldRepaint(Node_1_665 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        path = strokeAlign('OUTSIDE', path, fillPath, 2);
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_1_666 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_666({this.properties = const {}}) : super();
            final List<Paint> fills = [];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M27 13.5C27 20.9558 20.9558 27 13.5 27C6.04416 27 0 20.9558 0 13.5C0 6.04416 6.04416 0 13.5 0C20.9558 0 27 6.04416 27 13.5Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(239, 241, 245, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> strokeGeometries = [((){
                    var path = parseSvgPathData('M25 13.5C25 19.8513 19.8513 25 13.5 25L13.5 29C22.0604 29 29 22.0604 29 13.5L25 13.5ZM13.5 25C7.14873 25 2 19.8513 2 13.5L-2 13.5C-2 22.0604 4.93959 29 13.5 29L13.5 25ZM2 13.5C2 7.14873 7.14873 2 13.5 2L13.5 -2C4.93959 -2 -2 4.93959 -2 13.5L2 13.5ZM13.5 2C19.8513 2 25 7.14873 25 13.5L29 13.5C29 4.93959 22.0604 -2 13.5 -2L13.5 2Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];

            @override
            bool shouldRepaint(Node_1_666 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        path = strokeAlign('OUTSIDE', path, fillPath, 2);
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_1_667 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_667({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_667 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_I1_667_135_350 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_667_135_350({this.properties = const {}}) : super();
            final List<Paint> fills = [];
final List<Path> fillGeometries = [];
final List<Paint> strokes = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(186, 196, 207, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> strokeGeometries = [((){
                    var path = parseSvgPathData('M5 133C5 132.679 5.00118 132.358 5.00354 132.037L-4.99618 131.963C-4.99873 132.309 -5 132.654 -5 133L5 133ZM6.41318 113.91C6.50781 113.277 6.60708 112.646 6.71094 112.016L-3.15585 110.389C-3.26786 111.068 -3.3749 111.749 -3.47694 112.432L6.41318 113.91ZM10.9392 94.3437C11.1322 93.734 11.3295 93.1262 11.5313 92.5204L2.04378 89.3603C1.82611 90.0137 1.6132 90.6694 1.40508 91.3272L10.9392 94.3437ZM18.492 75.7343C18.7781 75.1633 19.0684 74.5948 19.3628 74.0287L10.4907 69.4149C10.1733 70.0253 9.86026 70.6384 9.55171 71.2542L18.492 75.7343ZM28.8745 58.5386C29.2463 58.0196 29.6219 57.5036 30.0012 56.9905L21.9599 51.046C21.551 51.599 21.1462 52.1553 20.7455 52.7146L28.8745 58.5386ZM41.8156 43.1701C42.2637 42.7152 42.7152 42.2638 43.1701 41.8156L36.1518 34.6922C35.6616 35.1751 35.1751 35.6616 34.6922 36.1518L41.8156 43.1701ZM56.9905 30.0012C57.5036 29.6219 58.0196 29.2463 58.5386 28.8745L52.7146 20.7455C52.1553 21.1462 51.599 21.551 51.046 21.9599L56.9905 30.0012ZM74.0287 19.3628C74.5948 19.0684 75.1633 18.7781 75.7343 18.492L71.2542 9.55171C70.6384 9.86027 70.0253 10.1733 69.4149 10.4907L74.0287 19.3628ZM92.5204 11.5313C93.1262 11.3295 93.734 11.1322 94.3438 10.9392L91.3272 1.40507C90.6694 1.61319 90.0137 1.82611 89.3603 2.04378L92.5204 11.5313ZM112.016 6.71094C112.646 6.60708 113.277 6.50781 113.91 6.41318L112.432 -3.47694C111.749 -3.3749 111.068 -3.26786 110.389 -3.15586L112.016 6.71094ZM132.037 5.00354C132.358 5.00118 132.679 5 133 5L133 -5C132.654 -5 132.309 -4.99873 131.963 -4.99618L132.037 5.00354ZM133 5C133.321 5 133.642 5.00118 133.963 5.00354L134.037 -4.99618C133.691 -4.99873 133.346 -5 133 -5L133 5ZM152.09 6.41318C152.723 6.50781 153.354 6.60708 153.984 6.71094L155.611 -3.15585C154.932 -3.26786 154.251 -3.3749 153.568 -3.47694L152.09 6.41318ZM171.656 10.9392C172.266 11.1322 172.874 11.3295 173.48 11.5313L176.64 2.04378C175.986 1.82611 175.331 1.6132 174.673 1.40508L171.656 10.9392ZM190.266 18.492C190.837 18.7781 191.405 19.0684 191.971 19.3628L196.585 10.4907C195.975 10.1733 195.362 9.86026 194.746 9.55171L190.266 18.492ZM207.461 28.8745C207.98 29.2463 208.496 29.6219 209.01 30.0012L214.954 21.9599C214.401 21.551 213.845 21.1462 213.285 20.7455L207.461 28.8745ZM222.83 41.8156C223.285 42.2637 223.736 42.7152 224.184 43.1701L231.308 36.1518C230.825 35.6616 230.338 35.1751 229.848 34.6922L222.83 41.8156ZM235.999 56.9905C236.378 57.5036 236.754 58.0196 237.125 58.5386L245.255 52.7146C244.854 52.1553 244.449 51.599 244.04 51.046L235.999 56.9905ZM246.637 74.0287C246.932 74.5948 247.222 75.1633 247.508 75.7343L256.448 71.2542C256.14 70.6384 255.827 70.0253 255.509 69.4149L246.637 74.0287ZM254.469 92.5204C254.67 93.1262 254.868 93.734 255.061 94.3438L264.595 91.3272C264.387 90.6694 264.174 90.0137 263.956 89.3603L254.469 92.5204ZM259.289 112.016C259.393 112.646 259.492 113.277 259.587 113.91L269.477 112.432C269.375 111.749 269.268 111.068 269.156 110.389L259.289 112.016ZM260.996 132.037C260.999 132.358 261 132.679 261 133L271 133C271 132.654 270.999 132.309 270.996 131.963L260.996 132.037Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];

            @override
            bool shouldRepaint(Node_I1_667_135_350 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                    canvas.clipPath(path);
                    canvas.drawPath(
                        path.shift(Offset(0, 1)),
                        Paint() 
                        ..blendMode = BlendMode.srcOver
                        ..color=Color.fromRGBO(142, 155, 174, 0.5)
                        ..style = PaintingStyle.stroke
                        ..strokeWidth = 0
                        ..maskFilter = MaskFilter.blur(BlurStyle.normal, 0 * 0.57735 + 0.5)
                    );
                   
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                    canvas.clipPath(path);
                    canvas.drawPath(
                        path.shift(Offset(0, 1)),
                        Paint() 
                        ..blendMode = BlendMode.srcOver
                        ..color=Color.fromRGBO(142, 155, 174, 0.5)
                        ..style = PaintingStyle.stroke
                        ..strokeWidth = 0
                        ..maskFilter = MaskFilter.blur(BlurStyle.normal, 0 * 0.57735 + 0.5)
                    );
                   
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_667_135_351 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_667_135_351({this.properties = const {}}) : super();
            final List<Paint> fills = [];
final List<Path> fillGeometries = [];
final List<Paint> strokes = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(183, 193, 203, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> strokeGeometries = [((){
                    var path = parseSvgPathData('M10 -1L0 -1L0 1L10 1L10 -1Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];

            @override
            bool shouldRepaint(Node_I1_667_135_351 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                    canvas.clipPath(path);
                    canvas.drawPath(
                        path.shift(Offset(0, 1)),
                        Paint() 
                        ..blendMode = BlendMode.srcOver
                        ..color=Color.fromRGBO(142, 155, 174, 0.5)
                        ..style = PaintingStyle.stroke
                        ..strokeWidth = 0
                        ..maskFilter = MaskFilter.blur(BlurStyle.normal, 0 * 0.57735 + 0.5)
                    );
                   
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                    canvas.clipPath(path);
                    canvas.drawPath(
                        path.shift(Offset(0, 1)),
                        Paint() 
                        ..blendMode = BlendMode.srcOver
                        ..color=Color.fromRGBO(142, 155, 174, 0.5)
                        ..style = PaintingStyle.stroke
                        ..strokeWidth = 0
                        ..maskFilter = MaskFilter.blur(BlurStyle.normal, 0 * 0.57735 + 0.5)
                    );
                   
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_667_135_352 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_667_135_352({this.properties = const {}}) : super();
            final List<Paint> fills = [];
final List<Path> fillGeometries = [];
final List<Paint> strokes = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(183, 193, 203, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> strokeGeometries = [((){
                    var path = parseSvgPathData('M10 -1L0 -1L0 1L10 1L10 -1Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];

            @override
            bool shouldRepaint(Node_I1_667_135_352 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                    canvas.clipPath(path);
                    canvas.drawPath(
                        path.shift(Offset(0, 1)),
                        Paint() 
                        ..blendMode = BlendMode.srcOver
                        ..color=Color.fromRGBO(142, 155, 174, 0.5)
                        ..style = PaintingStyle.stroke
                        ..strokeWidth = 0
                        ..maskFilter = MaskFilter.blur(BlurStyle.normal, 0 * 0.57735 + 0.5)
                    );
                   
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                    canvas.clipPath(path);
                    canvas.drawPath(
                        path.shift(Offset(0, 1)),
                        Paint() 
                        ..blendMode = BlendMode.srcOver
                        ..color=Color.fromRGBO(142, 155, 174, 0.5)
                        ..style = PaintingStyle.stroke
                        ..strokeWidth = 0
                        ..maskFilter = MaskFilter.blur(BlurStyle.normal, 0 * 0.57735 + 0.5)
                    );
                   
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_667_135_353 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_667_135_353({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(222, 226, 231, 1), Color.fromRGBO(219, 224, 231, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(-0.34016388286584787, -0.9180328164355281),
                    end: Alignment(0.47950824968255623, 0.8729508275789879),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(244, 244)))
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M244 122C244 189.379 189.379 244 122 244C54.6213 244 0 189.379 0 122C0 54.6213 54.6213 0 122 0C189.379 0 244 54.6213 244 122Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(255, 255, 255, 0.5), Color.fromRGBO(246, 241, 241, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(-0.622950793229678, -0.7459016366091124),
                    end: Alignment(0.4303279091718939, 0.8524590312640685),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(244, 244)))
            ,];
final List<Path> strokeGeometries = [((){
                    var path = parseSvgPathData('M243 122C243 188.826 188.826 243 122 243L122 245C189.931 245 245 189.931 245 122L243 122ZM122 243C55.1735 243 1 188.826 1 122L-1 122C-1 189.931 54.069 245 122 245L122 243ZM1 122C1 55.1735 55.1735 1 122 1L122 -1C54.069 -1 -1 54.069 -1 122L1 122ZM122 1C188.826 1 243 55.1735 243 122L245 122C245 54.069 189.931 -1 122 -1L122 1Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];

            @override
            bool shouldRepaint(Node_I1_667_135_353 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        
                        try{
                            canvas.drawPath(
                                path.shift(Offset(0, 15))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(142, 155, 174, 0.20000000298023224)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 30 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(0, 15);
                            canvas.drawShadow(path, Color.fromRGBO(142, 155, 174, 0.20000000298023224), 30, true);
                            canvas.translate(0, -15);
                        }
                    canvas.drawPath(path, paint);
                    canvas.clipPath(path);
                    canvas.drawPath(
                        path.shift(Offset(0, 3)),
                        Paint() 
                        ..blendMode = BlendMode.srcOver
                        ..color=Color.fromRGBO(65, 69, 93, 0.10000000149011612)
                        ..style = PaintingStyle.stroke
                        ..strokeWidth = 8
                        ..maskFilter = MaskFilter.blur(BlurStyle.normal, 8 * 0.57735 + 0.5)
                    );
                   
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        path = strokeAlign('OUTSIDE', path, fillPath, 1);
                        
                        try{
                            canvas.drawPath(
                                path.shift(Offset(0, 15))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(142, 155, 174, 0.20000000298023224)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 30 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(0, 15);
                            canvas.drawShadow(path, Color.fromRGBO(142, 155, 174, 0.20000000298023224), 30, true);
                            canvas.translate(0, -15);
                        }
                    canvas.drawPath(path, paint);
                    canvas.clipPath(path);
                    canvas.drawPath(
                        path.shift(Offset(0, 3)),
                        Paint() 
                        ..blendMode = BlendMode.srcOver
                        ..color=Color.fromRGBO(65, 69, 93, 0.10000000149011612)
                        ..style = PaintingStyle.stroke
                        ..strokeWidth = 8
                        ..maskFilter = MaskFilter.blur(BlurStyle.normal, 8 * 0.57735 + 0.5)
                    );
                   
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_667_141_119 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_667_141_119({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_I1_667_141_119 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = RoundedRectangleBorder(
                            borderRadius: BorderRadius.only(
                                topLeft: Radius.circular(0),
                                topRight: Radius.circular(0),
                                bottomLeft: Radius.circular(0),
                                bottomRight: Radius.circular(0),
                            ),
                            side: BorderSide()
                        ).getInnerPath(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = RoundedRectangleBorder(
                            borderRadius: BorderRadius.only(
                                topLeft: Radius.circular(0),
                                topRight: Radius.circular(0),
                                bottomLeft: Radius.circular(0),
                                bottomRight: Radius.circular(0),
                            ),
                            side: BorderSide()
                        ).getInnerPath(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_I1_667_141_117 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_667_141_117({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(196, 196, 196, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M189 0L0 0L0 229L44.5 229L189 0Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_667_141_117 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        canvas.clipPath(fillPath);
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_667_135_354 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_667_135_354({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(152, 94, 225, 1), Color.fromRGBO(242, 86, 86, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(0, -1.0227272804337744),
                    end: Alignment(0, 0.9999999868133189),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(220, 220)))
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M51.5644 196.634C49.8658 199.153 46.4377 199.828 44.0074 198.006C24.1333 183.104 9.84075 161.871 3.55199 137.728C-3.19996 111.806 -0.261689 84.3124 11.8156 60.4035C23.8928 36.4946 44.279 17.8141 69.1495 7.86656C92.3139 -1.39851 117.886 -2.49461 141.674 4.65875C144.583 5.53347 146.074 8.69343 145.055 11.555L145.055 11.555C144.036 14.4166 140.893 15.8944 137.979 15.0359C116.72 8.77154 93.9114 9.80976 73.2346 18.0799C50.8511 27.0327 32.5035 43.8451 21.634 65.3631C10.7645 86.8811 8.12004 111.626 14.1968 134.955C19.8102 156.505 32.5093 175.479 50.1674 188.874C52.5875 190.71 53.2629 194.116 51.5644 196.634L51.5644 196.634Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_667_135_354 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        canvas.clipPath(fillPath);
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_667_135_355 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_667_135_355({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(245, 245, 249, 1), Color.fromRGBO(228, 232, 238, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(-0.4363636217161645, -0.9000000114997563),
                    end: Alignment(0.4545455371126661, 0.8999999822048088),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(200, 200)))
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M200 100C200 155.228 155.228 200 100 200C44.7715 200 0 155.228 0 100C0 44.7715 44.7715 0 100 0C155.228 0 200 44.7715 200 100Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(255, 255, 255, 1), Color.fromRGBO(192, 197, 205, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(-0.5454545332626854, -0.6818182083939717),
                    end: Alignment(0.49999997578376476, 0.8454545668925133),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(200, 200)))
            ,];
final List<Path> strokeGeometries = [((){
                    var path = parseSvgPathData('M199 100C199 154.676 154.676 199 100 199L100 201C155.781 201 201 155.781 201 100L199 100ZM100 199C45.3238 199 1 154.676 1 100L-1 100C-1 155.781 44.2192 201 100 201L100 199ZM1 100C1 45.3238 45.3238 1 100 1L100 -1C44.2192 -1 -1 44.2192 -1 100L1 100ZM100 1C154.676 1 199 45.3238 199 100L201 100C201 44.2192 155.781 -1 100 -1L100 1Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];

            @override
            bool shouldRepaint(Node_I1_667_135_355 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        
                        try{
                            canvas.drawPath(
                                path.shift(Offset(0, 31))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(0, 0, 0, 0.25)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 60 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(0, 31);
                            canvas.drawShadow(path, Color.fromRGBO(0, 0, 0, 0.25), 60, true);
                            canvas.translate(0, -31);
                        }
                    

                        try{
                            canvas.drawPath(
                                path.shift(Offset(0, 8))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(142, 155, 174, 0.5)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 15 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(0, 8);
                            canvas.drawShadow(path, Color.fromRGBO(142, 155, 174, 0.5), 15, true);
                            canvas.translate(0, -8);
                        }
                    canvas.drawPath(path, paint);
                    canvas.clipPath(path);
                    canvas.drawPath(
                        path.shift(Offset(3, 3)),
                        Paint() 
                        ..blendMode = BlendMode.srcOver
                        ..color=Color.fromRGBO(255, 255, 255, 0.5)
                        ..style = PaintingStyle.stroke
                        ..strokeWidth = 8
                        ..maskFilter = MaskFilter.blur(BlurStyle.normal, 8 * 0.57735 + 0.5)
                    );
                   
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        canvas.clipPath(fillPath);
                        
                        try{
                            canvas.drawPath(
                                path.shift(Offset(0, 31))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(0, 0, 0, 0.25)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 60 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(0, 31);
                            canvas.drawShadow(path, Color.fromRGBO(0, 0, 0, 0.25), 60, true);
                            canvas.translate(0, -31);
                        }
                    

                        try{
                            canvas.drawPath(
                                path.shift(Offset(0, 8))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(142, 155, 174, 0.5)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 15 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(0, 8);
                            canvas.drawShadow(path, Color.fromRGBO(142, 155, 174, 0.5), 15, true);
                            canvas.translate(0, -8);
                        }
                    canvas.drawPath(path, paint);
                    canvas.clipPath(path);
                    canvas.drawPath(
                        path.shift(Offset(3, 3)),
                        Paint() 
                        ..blendMode = BlendMode.srcOver
                        ..color=Color.fromRGBO(255, 255, 255, 0.5)
                        ..style = PaintingStyle.stroke
                        ..strokeWidth = 8
                        ..maskFilter = MaskFilter.blur(BlurStyle.normal, 8 * 0.57735 + 0.5)
                    );
                   
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_667_135_356 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_667_135_356({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(221, 225, 231, 1), Color.fromRGBO(250, 251, 252, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(-0.48837207629369994, -0.8430232568324134),
                    end: Alignment(0.5174417929676447, 0.8255814841241749),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(172, 172)))
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M172 86C172 133.496 133.496 172 86 172C38.5035 172 0 133.496 0 86C0 38.5035 38.5035 0 86 0C133.496 0 172 38.5035 172 86Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_667_135_356 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        canvas.clipPath(fillPath);
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_667_135_357 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_667_135_357({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(221, 225, 231, 1), Color.fromRGBO(250, 251, 252, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(0.15189879166382947, -0.8670886287125783),
                    end: Alignment(0.2594936628481481, -0.75316455717659),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(158, 158)))
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M91.4836 8.20217C92.1654 4.33508 95.8651 1.72136 99.6552 2.74804C99.8712 2.80653 100.087 2.86594 100.302 2.92626C104.084 3.9851 105.923 8.12456 104.529 11.7954L104.172 12.7345C102.975 15.8867 99.4536 17.4413 96.2027 16.5459L96.2027 16.5459C92.9519 15.6505 90.7236 12.5122 91.3091 9.19154L91.4836 8.20217Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_667_135_357 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        canvas.clipPath(fillPath);
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_667_141_226 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_667_141_226({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_I1_667_141_226 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_I1_667_135_360 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_667_135_360({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(221, 225, 231, 1), Color.fromRGBO(250, 251, 252, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(-0.48837207629369994, -0.8430232568324134),
                    end: Alignment(0.5174417929676447, 0.8255814841241749),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(15, 15)))
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M15 7.5C15 11.6421 11.6421 15 7.5 15C3.35786 15 0 11.6421 0 7.5C0 3.35786 3.35786 0 7.5 0C11.6421 0 15 3.35786 15 7.5Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_667_135_360 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        canvas.clipPath(fillPath);
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_667_135_361 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_667_135_361({this.properties = const {}}) : super();
            final List<Paint> fills = [];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M0 0L44 0L44 44L0 44L0 0Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_667_135_361 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        canvas.clipPath(fillPath);
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_1_668 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_668({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(222, 226, 231, 1), Color.fromRGBO(219, 224, 231, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(-0.4911504086680736, -0.8409088804567784),
                    end: Alignment(0.46460180447824273, 1),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(226, 44)))
            ,
];
            final List<Paint> strokes = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..style = PaintingStyle.stroke
                ..strokeWidth = 1
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(255, 255, 255, 0.5), Color.fromRGBO(246, 241, 241, 1)],
                    stops: [0, 1],
                    begin: Alignment(-0.1769911409009357, -1.000000144476509),
                    end: Alignment(1.7706529131800153e-8, 0.9999998148210649),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(226, 44)))
            ,
];
            
            @override
            bool shouldRepaint(Node_1_668 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(22),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(22),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(Offset(0 - 0.5, 0 - 0.5), Offset(w + 0.5, h + 0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.clipPath(path);
                    canvas.drawPath(
                        path.shift(Offset(0, 0)),
                        Paint() 
                        ..blendMode = BlendMode.srcOver
                        ..color=Color.fromRGBO(65, 69, 85, 0.10000000149011612)
                        ..style = PaintingStyle.stroke
                        ..strokeWidth = 10
                        ..maskFilter = MaskFilter.blur(BlurStyle.normal, 10 * 0.57735 + 0.5)
                    );
                   
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_672 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_672({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(244, 247, 251, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(255, 255, 255, 0.5)
                ..strokeWidth = 1
                ..style = PaintingStyle.stroke
            ,
];
            
            @override
            bool shouldRepaint(Node_1_672 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(22),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(22),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(Offset(0 - 0.5, 0 - 0.5), Offset(w + 0.5, h + 0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    
                        try{
                            canvas.drawPath(
                                path.shift(Offset(0, 20))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(59, 64, 86, 0.15000000596046448)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 40 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(0, 20);
                            canvas.drawShadow(path, Color.fromRGBO(59, 64, 86, 0.15000000596046448), 40, true);
                            canvas.translate(0, -20);
                        }
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_673 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_673({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_673 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_674 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_674({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(255, 208, 208, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M60 30C60 46.5685 46.5685 60 30 60C13.4315 60 0 46.5685 0 30C0 13.4315 13.4315 0 30 0C46.5685 0 60 13.4315 60 30Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_1_674 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        canvas.clipPath(fillPath);
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_1_675 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_675({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_675 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_678 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_678({this.properties = const {}}) : super();
            final List<Paint> fills = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(244, 247, 251, 1)
                ..style = PaintingStyle.fill 
            ,
];
            final List<Paint> strokes = [

            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(255, 255, 255, 0.5)
                ..strokeWidth = 1
                ..style = PaintingStyle.stroke
            ,
];
            
            @override
            bool shouldRepaint(Node_1_678 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(22),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0)));
                Path strokePath = RoundedRectangleBorder(
                            borderRadius: BorderRadius.all(
                            Radius.circular(22),
                        ),
                        side: BorderSide()
                    ).getInnerPath(Rect.fromPoints(Offset(0 - 0.5, 0 - 0.5), Offset(w + 0.5, h + 0.5)));
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    
                        try{
                            canvas.drawPath(
                                path.shift(Offset(0, 20))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(59, 64, 86, 0.15000000596046448)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 40 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(0, 20);
                            canvas.drawShadow(path, Color.fromRGBO(59, 64, 86, 0.15000000596046448), 40, true);
                            canvas.translate(0, -20);
                        }
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_679 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_679({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_679 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_680 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_680({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(152, 94, 225, 0.20000000298023224), Color.fromRGBO(242, 86, 86, 0.20000000298023224)],
                    stops: [0, 1],
                 
                    begin: Alignment(0, -1.0227272804337744),
                    end: Alignment(0, 0.9999999868133189),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(60, 60)))
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M60 30C60 46.5685 46.5685 60 30 60C13.4315 60 0 46.5685 0 30C0 13.4315 13.4315 0 30 0C46.5685 0 60 13.4315 60 30Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_1_680 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        canvas.clipPath(fillPath);
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_1_681 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_681({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_681 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_776 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_776({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_776 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_685 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_685({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_685 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_686 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_686({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_686 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_I1_686_131_366 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_686_131_366({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(153, 160, 169, 0.4000000059604645), Color.fromRGBO(255, 255, 255, 0.4000000059604645)],
                    stops: [0, 1],
                 
                    begin: Alignment(0, -1),
                    end: Alignment(0, 0.9999999999999998),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(64, 64)))
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M64 32C64 49.6731 49.6731 64 32 64C14.3269 64 0 49.6731 0 32C0 14.3269 14.3269 0 32 0C49.6731 0 64 14.3269 64 32Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_686_131_366 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        
                        try{
                            canvas.drawPath(
                                path.shift(Offset(4, 4))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(142, 155, 174, 0.10000000149011612)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 20 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(4, 4);
                            canvas.drawShadow(path, Color.fromRGBO(142, 155, 174, 0.10000000149011612), 20, true);
                            canvas.translate(-4, -4);
                        }
                    canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        
                        try{
                            canvas.drawPath(
                                path.shift(Offset(4, 4))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(142, 155, 174, 0.10000000149011612)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 20 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(4, 4);
                            canvas.drawShadow(path, Color.fromRGBO(142, 155, 174, 0.10000000149011612), 20, true);
                            canvas.translate(-4, -4);
                        }
                    canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_686_131_367 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_686_131_367({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(217, 154, 250, 1), Color.fromRGBO(186, 61, 79, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(-0.6000000575515949, -0.7833333161887179),
                    end: Alignment(0.4833333169337768, 0.8499999699907175),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(58, 58)))
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M58 29C58 45.0163 45.0163 58 29 58C12.9837 58 0 45.0163 0 29C0 12.9837 12.9837 0 29 0C45.0163 0 58 12.9837 58 29Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(0, 0, 0, 0.30000001192092896), Color.fromRGBO(0, 0, 0, 0.4000000059604645)],
                    stops: [0, 1],
                 
                    begin: Alignment(-0.6333332995573671, -0.5666666845480595),
                    end: Alignment(0.4333333448568977, 0.9000000250339515),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(58, 58)))
            ,];
final List<Path> strokeGeometries = [((){
                    var path = parseSvgPathData('M57.5 29C57.5 44.7401 44.7401 57.5 29 57.5L29 58.5C45.2924 58.5 58.5 45.2924 58.5 29L57.5 29ZM29 57.5C13.2599 57.5 0.5 44.7401 0.5 29L-0.5 29C-0.5 45.2924 12.7076 58.5 29 58.5L29 57.5ZM0.5 29C0.5 13.2599 13.2599 0.5 29 0.5L29 -0.5C12.7076 -0.5 -0.5 12.7076 -0.5 29L0.5 29ZM29 0.5C44.7401 0.5 57.5 13.2599 57.5 29L58.5 29C58.5 12.7076 45.2924 -0.5 29 -0.5L29 0.5Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];

            @override
            bool shouldRepaint(Node_I1_686_131_367 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        
                        try{
                            canvas.drawPath(
                                path.shift(Offset(0, 9))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(142, 155, 174, 0.20000000298023224)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 18 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(0, 9);
                            canvas.drawShadow(path, Color.fromRGBO(142, 155, 174, 0.20000000298023224), 18, true);
                            canvas.translate(0, -9);
                        }
                    canvas.drawPath(path, paint);
                    canvas.clipPath(path);
                    canvas.drawPath(
                        path.shift(Offset(1, 1)),
                        Paint() 
                        ..blendMode = BlendMode.srcOver
                        ..color=Color.fromRGBO(255, 255, 255, 0.5)
                        ..style = PaintingStyle.stroke
                        ..strokeWidth = 2
                        ..maskFilter = MaskFilter.blur(BlurStyle.normal, 2 * 0.57735 + 0.5)
                    );
                   
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        canvas.clipPath(fillPath);
                        
                        try{
                            canvas.drawPath(
                                path.shift(Offset(0, 9))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(142, 155, 174, 0.20000000298023224)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 18 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(0, 9);
                            canvas.drawShadow(path, Color.fromRGBO(142, 155, 174, 0.20000000298023224), 18, true);
                            canvas.translate(0, -9);
                        }
                    canvas.drawPath(path, paint);
                    canvas.clipPath(path);
                    canvas.drawPath(
                        path.shift(Offset(1, 1)),
                        Paint() 
                        ..blendMode = BlendMode.srcOver
                        ..color=Color.fromRGBO(255, 255, 255, 0.5)
                        ..style = PaintingStyle.stroke
                        ..strokeWidth = 2
                        ..maskFilter = MaskFilter.blur(BlurStyle.normal, 2 * 0.57735 + 0.5)
                    );
                   
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_686_131_368 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_686_131_368({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(217, 154, 250, 1), Color.fromRGBO(186, 61, 79, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(-0.6000000575515949, -0.7833333161887179),
                    end: Alignment(0.4833333169337768, 0.8499999699907175),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(58, 58)))
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M58 29C58 45.0163 45.0163 58 29 58C12.9837 58 0 45.0163 0 29C0 12.9837 12.9837 0 29 0C45.0163 0 58 12.9837 58 29Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_686_131_368 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        canvas.clipPath(fillPath);
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_686_131_369 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_686_131_369({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(255, 255, 255, 0), Color.fromRGBO(239, 241, 245, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(-0.6000000575515949, -0.7833333161887179),
                    end: Alignment(0.4833333169337768, 0.8499999699907175),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(60, 60)))
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M60 30C60 46.5685 46.5685 60 30 60C13.4315 60 0 46.5685 0 30C0 13.4315 13.4315 0 30 0C46.5685 0 60 13.4315 60 30ZM4.5 30C4.5 44.0833 15.9167 55.5 30 55.5C44.0833 55.5 55.5 44.0833 55.5 30C55.5 15.9167 44.0833 4.5 30 4.5C15.9167 4.5 4.5 15.9167 4.5 30Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_686_131_369 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        
                    paint.maskFilter = MaskFilter.blur(BlurStyle.normal, 5 * 0.57735 + 0.5);
                    canvas.drawPath(path, paint);
                    
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        canvas.clipPath(fillPath);
                        
                    paint.maskFilter = MaskFilter.blur(BlurStyle.normal, 5 * 0.57735 + 0.5);
                    canvas.drawPath(path, paint);
                    
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_686_131_370 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_686_131_370({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(152, 94, 225, 1), Color.fromRGBO(242, 86, 86, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(-1.1086463425069581e-7, -0.8600000149667248),
                    end: Alignment(-1.1086463447274042e-7, 0.9999999029934457),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(50, 50)))
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M50 25C50 38.8071 38.8071 50 25 50C11.1929 50 0 38.8071 0 25C0 11.1929 11.1929 0 25 0C38.8071 0 50 11.1929 50 25Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_686_131_370 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_686_131_371 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_686_131_371({this.properties = const {}}) : super();
            final List<Paint> fills = [];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M0 0L44 0L44 44L0 44L0 0Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_686_131_371 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        canvas.clipPath(fillPath);
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_686_131_371_81_49 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_686_131_371_81_49({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(255, 255, 255, 1)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M11.6578 16.7368C11.1732 16.1633 11.2453 15.3056 11.8188 14.8211C11.9465 14.7132 12.1587 14.4374 12.218 14.0722C12.2673 13.7688 12.2384 13.2483 11.6446 12.5236C10.5137 11.1434 9.95296 9.82985 10.1071 8.47916C10.2528 7.20246 11.0194 6.20973 11.6512 5.45045C12.2327 4.7517 12.6422 4.04769 12.7645 3.48128C12.8212 3.21855 12.8049 3.03725 12.7628 2.90983C12.7245 2.79371 12.6362 2.63296 12.3878 2.4464C11.7875 1.99554 11.6664 1.1434 12.1172 0.543095C12.5681 -0.0572109 13.4202 -0.178357 14.0205 0.272505C14.6612 0.753717 15.1128 1.35613 15.3443 2.05682C15.5721 2.74622 15.5558 3.4354 15.422 4.05507C15.1633 5.25346 14.4297 6.36195 13.741 7.18951C13.1027 7.95655 12.8531 8.39474 12.8083 8.78744C12.772 9.10617 12.8463 9.70051 13.7476 10.8005C14.7796 12.0601 15.0894 13.3521 14.9016 14.5082C14.7238 15.6025 14.1231 16.4334 13.5735 16.8978C13 17.3823 12.1423 17.3103 11.6578 16.7368ZM18.9078 16.7368C18.4232 16.1633 18.4953 15.3056 19.0688 14.8211C19.1965 14.7132 19.4087 14.4374 19.468 14.0722C19.5173 13.7688 19.4884 13.2483 18.8946 12.5236C17.7637 11.1434 17.203 9.82985 17.3571 8.47917C17.5028 7.20246 18.2694 6.20973 18.9012 5.45045C19.3815 4.87337 20.2386 4.79485 20.8157 5.27508C21.3927 5.75531 21.4713 6.61243 20.991 7.18951C20.3527 7.95655 20.1032 8.39474 20.0583 8.78744C20.022 9.10617 20.0963 9.70051 20.9976 10.8005C22.0296 12.0601 22.3394 13.3521 22.1516 14.5082C21.9738 15.6025 21.3732 16.4334 20.8235 16.8978C20.25 17.3823 19.3923 17.3103 18.9078 16.7368ZM4.40777 16.7368C3.92323 16.1633 3.99532 15.3056 4.56878 14.8211C4.69651 14.7132 4.90871 14.4374 4.96803 14.0722C5.01733 13.7688 4.98839 13.2483 4.39463 12.5236C3.26372 11.1434 2.70298 9.82985 2.85713 8.47917C3.00283 7.20246 3.76938 6.20973 4.40122 5.45045C4.88145 4.87337 5.73857 4.79485 6.31565 5.27508C6.89274 5.75531 6.97125 6.61243 6.49102 7.18951C5.85272 7.95655 5.60316 8.39474 5.55834 8.78744C5.52197 9.10617 5.5963 9.70051 6.49762 10.8005C7.52964 12.0601 7.83941 13.3521 7.65161 14.5082C7.47383 15.6025 6.87315 16.4334 6.32347 16.8978C5.75 17.3823 4.89231 17.3103 4.40777 16.7368ZM0 21.297C0 20.5462 0.608613 19.9376 1.35938 19.9376L23.1094 19.9376C23.8601 19.9376 24.4688 20.5462 24.4688 21.297C24.4688 22.0477 23.8601 22.6564 23.1094 22.6564L1.35938 22.6564C0.608613 22.6564 0 22.0477 0 21.297Z');
                    path.fillType = PathFillType.evenOdd;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_686_131_371_81_49 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        path = strokeAlign('OUTSIDE', path, fillPath, 1);
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_1_688 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_688({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_688 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_689 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_689({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_689 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_I1_689_131_349 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_689_131_349({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(153, 160, 169, 0.4000000059604645), Color.fromRGBO(255, 255, 255, 0.4000000059604645)],
                    stops: [0, 1],
                 
                    begin: Alignment(0, -1),
                    end: Alignment(0, 0.9999999999999998),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(64, 64)))
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M64 32C64 49.6731 49.6731 64 32 64C14.3269 64 0 49.6731 0 32C0 14.3269 14.3269 0 32 0C49.6731 0 64 14.3269 64 32Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_689_131_349 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        
                        try{
                            canvas.drawPath(
                                path.shift(Offset(4, 4))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(142, 155, 174, 0.10000000149011612)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 20 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(4, 4);
                            canvas.drawShadow(path, Color.fromRGBO(142, 155, 174, 0.10000000149011612), 20, true);
                            canvas.translate(-4, -4);
                        }
                    canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        
                        try{
                            canvas.drawPath(
                                path.shift(Offset(4, 4))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(142, 155, 174, 0.10000000149011612)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 20 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(4, 4);
                            canvas.drawShadow(path, Color.fromRGBO(142, 155, 174, 0.10000000149011612), 20, true);
                            canvas.translate(-4, -4);
                        }
                    canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_689_131_350 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_689_131_350({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(245, 245, 249, 1), Color.fromRGBO(218, 223, 231, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(-0.6000000575515949, -0.7833333161887179),
                    end: Alignment(0.4833333169337768, 0.8499999699907175),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(58, 58)))
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M58 29C58 45.0163 45.0163 58 29 58C12.9837 58 0 45.0163 0 29C0 12.9837 12.9837 0 29 0C45.0163 0 58 12.9837 58 29Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(0, 0, 0, 0.30000001192092896), Color.fromRGBO(0, 0, 0, 0.4000000059604645)],
                    stops: [0, 1],
                 
                    begin: Alignment(-0.6333332995573671, -0.5666666845480595),
                    end: Alignment(0.4333333448568977, 0.9000000250339515),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(58, 58)))
            ,];
final List<Path> strokeGeometries = [((){
                    var path = parseSvgPathData('M57.7 29C57.7 44.8506 44.8506 57.7 29 57.7L29 58.3C45.1819 58.3 58.3 45.1819 58.3 29L57.7 29ZM29 57.7C13.1494 57.7 0.3 44.8506 0.3 29L-0.3 29C-0.3 45.1819 12.8181 58.3 29 58.3L29 57.7ZM0.3 29C0.3 13.1494 13.1494 0.3 29 0.3L29 -0.3C12.8181 -0.3 -0.3 12.8181 -0.3 29L0.3 29ZM29 0.3C44.8506 0.3 57.7 13.1494 57.7 29L58.3 29C58.3 12.8181 45.1819 -0.3 29 -0.3L29 0.3Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];

            @override
            bool shouldRepaint(Node_I1_689_131_350 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        canvas.clipPath(fillPath);
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_689_131_351 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_689_131_351({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(217, 154, 250, 1), Color.fromRGBO(186, 61, 79, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(-0.6000000575515949, -0.7833333161887179),
                    end: Alignment(0.4833333169337768, 0.8499999699907175),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(58, 58)))
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M58 29C58 45.0163 45.0163 58 29 58C12.9837 58 0 45.0163 0 29C0 12.9837 12.9837 0 29 0C45.0163 0 58 12.9837 58 29Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_689_131_351 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        canvas.clipPath(fillPath);
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_689_131_352 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_689_131_352({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(255, 255, 255, 1), Color.fromRGBO(203, 208, 217, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(-0.6000000575515949, -0.7833333161887179),
                    end: Alignment(0.4833333169337768, 0.8499999699907175),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(60, 60)))
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M60 30C60 46.5685 46.5685 60 30 60C13.4315 60 0 46.5685 0 30C0 13.4315 13.4315 0 30 0C46.5685 0 60 13.4315 60 30ZM4.5 30C4.5 44.0833 15.9167 55.5 30 55.5C44.0833 55.5 55.5 44.0833 55.5 30C55.5 15.9167 44.0833 4.5 30 4.5C15.9167 4.5 4.5 15.9167 4.5 30Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_689_131_352 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        
                    paint.maskFilter = MaskFilter.blur(BlurStyle.normal, 2 * 0.57735 + 0.5);
                    canvas.drawPath(path, paint);
                    
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        canvas.clipPath(fillPath);
                        
                    paint.maskFilter = MaskFilter.blur(BlurStyle.normal, 2 * 0.57735 + 0.5);
                    canvas.drawPath(path, paint);
                    
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_689_131_353 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_689_131_353({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(221, 225, 231, 1), Color.fromRGBO(250, 251, 252, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(-0.499999997001887, -0.840000029200316),
                    end: Alignment(0.5200000655591488, 0.9399999680697892),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(50, 50)))
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M50 25C50 38.8071 38.8071 50 25 50C11.1929 50 0 38.8071 0 25C0 11.1929 11.1929 0 25 0C38.8071 0 50 11.1929 50 25Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_689_131_353 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_689_131_354 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_689_131_354({this.properties = const {}}) : super();
            final List<Paint> fills = [];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M0 0L44 0L44 44L0 44L0 0Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_689_131_354 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        canvas.clipPath(fillPath);
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_1_691 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_691({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_691 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_692 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_692({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_692 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_I1_692_131_349 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_692_131_349({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(153, 160, 169, 0.4000000059604645), Color.fromRGBO(255, 255, 255, 0.4000000059604645)],
                    stops: [0, 1],
                 
                    begin: Alignment(0, -1),
                    end: Alignment(0, 0.9999999999999998),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(64, 64)))
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M64 32C64 49.6731 49.6731 64 32 64C14.3269 64 0 49.6731 0 32C0 14.3269 14.3269 0 32 0C49.6731 0 64 14.3269 64 32Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_692_131_349 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        
                        try{
                            canvas.drawPath(
                                path.shift(Offset(4, 4))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(142, 155, 174, 0.10000000149011612)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 20 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(4, 4);
                            canvas.drawShadow(path, Color.fromRGBO(142, 155, 174, 0.10000000149011612), 20, true);
                            canvas.translate(-4, -4);
                        }
                    canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        
                        try{
                            canvas.drawPath(
                                path.shift(Offset(4, 4))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(142, 155, 174, 0.10000000149011612)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 20 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(4, 4);
                            canvas.drawShadow(path, Color.fromRGBO(142, 155, 174, 0.10000000149011612), 20, true);
                            canvas.translate(-4, -4);
                        }
                    canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_692_131_350 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_692_131_350({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(245, 245, 249, 1), Color.fromRGBO(218, 223, 231, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(-0.6000000575515949, -0.7833333161887179),
                    end: Alignment(0.4833333169337768, 0.8499999699907175),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(58, 58)))
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M58 29C58 45.0163 45.0163 58 29 58C12.9837 58 0 45.0163 0 29C0 12.9837 12.9837 0 29 0C45.0163 0 58 12.9837 58 29Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(0, 0, 0, 0.30000001192092896), Color.fromRGBO(0, 0, 0, 0.4000000059604645)],
                    stops: [0, 1],
                 
                    begin: Alignment(-0.6333332995573671, -0.5666666845480595),
                    end: Alignment(0.4333333448568977, 0.9000000250339515),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(58, 58)))
            ,];
final List<Path> strokeGeometries = [((){
                    var path = parseSvgPathData('M57.7 29C57.7 44.8506 44.8506 57.7 29 57.7L29 58.3C45.1819 58.3 58.3 45.1819 58.3 29L57.7 29ZM29 57.7C13.1494 57.7 0.3 44.8506 0.3 29L-0.3 29C-0.3 45.1819 12.8181 58.3 29 58.3L29 57.7ZM0.3 29C0.3 13.1494 13.1494 0.3 29 0.3L29 -0.3C12.8181 -0.3 -0.3 12.8181 -0.3 29L0.3 29ZM29 0.3C44.8506 0.3 57.7 13.1494 57.7 29L58.3 29C58.3 12.8181 45.1819 -0.3 29 -0.3L29 0.3Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];

            @override
            bool shouldRepaint(Node_I1_692_131_350 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        canvas.clipPath(fillPath);
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_692_131_351 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_692_131_351({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(217, 154, 250, 1), Color.fromRGBO(186, 61, 79, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(-0.6000000575515949, -0.7833333161887179),
                    end: Alignment(0.4833333169337768, 0.8499999699907175),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(58, 58)))
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M58 29C58 45.0163 45.0163 58 29 58C12.9837 58 0 45.0163 0 29C0 12.9837 12.9837 0 29 0C45.0163 0 58 12.9837 58 29Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_692_131_351 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        canvas.clipPath(fillPath);
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_692_131_352 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_692_131_352({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(255, 255, 255, 1), Color.fromRGBO(203, 208, 217, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(-0.6000000575515949, -0.7833333161887179),
                    end: Alignment(0.4833333169337768, 0.8499999699907175),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(60, 60)))
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M60 30C60 46.5685 46.5685 60 30 60C13.4315 60 0 46.5685 0 30C0 13.4315 13.4315 0 30 0C46.5685 0 60 13.4315 60 30ZM4.5 30C4.5 44.0833 15.9167 55.5 30 55.5C44.0833 55.5 55.5 44.0833 55.5 30C55.5 15.9167 44.0833 4.5 30 4.5C15.9167 4.5 4.5 15.9167 4.5 30Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_692_131_352 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        
                    paint.maskFilter = MaskFilter.blur(BlurStyle.normal, 2 * 0.57735 + 0.5);
                    canvas.drawPath(path, paint);
                    
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        canvas.clipPath(fillPath);
                        
                    paint.maskFilter = MaskFilter.blur(BlurStyle.normal, 2 * 0.57735 + 0.5);
                    canvas.drawPath(path, paint);
                    
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_692_131_353 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_692_131_353({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(221, 225, 231, 1), Color.fromRGBO(250, 251, 252, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(-0.499999997001887, -0.840000029200316),
                    end: Alignment(0.5200000655591488, 0.9399999680697892),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(50, 50)))
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M50 25C50 38.8071 38.8071 50 25 50C11.1929 50 0 38.8071 0 25C0 11.1929 11.1929 0 25 0C38.8071 0 50 11.1929 50 25Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_692_131_353 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_692_131_354 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_692_131_354({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_I1_692_131_354 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_I1_692_131_354_81_51 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_692_131_354_81_51({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_I1_692_131_354_81_51 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_I1_692_131_354_81_52 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_692_131_354_81_52({this.properties = const {}}) : super();
            final List<Paint> fills = [];
final List<Path> fillGeometries = [];
final List<Paint> strokes = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(60, 60, 67, 0.30000001192092896)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> strokeGeometries = [((){
                    var path = parseSvgPathData('M11.3807 1.95262L10.4968 2.83651L10.4968 2.83651L11.3807 1.95262ZM12.0833 6.66667C12.0833 9.65821 9.65821 12.0833 6.66667 12.0833L6.66667 14.5833C11.0389 14.5833 14.5833 11.0389 14.5833 6.66667L12.0833 6.66667ZM6.66667 12.0833C3.67512 12.0833 1.25 9.65821 1.25 6.66667L-1.25 6.66667C-1.25 11.0389 2.29441 14.5833 6.66667 14.5833L6.66667 12.0833ZM1.25 6.66667C1.25 3.67512 3.67512 1.25 6.66667 1.25L6.66667 -1.25C2.29441 -1.25 -1.25 2.29441 -1.25 6.66667L1.25 6.66667ZM6.66667 1.25C8.10326 1.25 9.48101 1.82068 10.4968 2.83651L12.2646 1.06874C10.7799 -0.415925 8.7663 -1.25 6.66667 -1.25L6.66667 1.25ZM10.4968 2.83651C11.5127 3.85233 12.0833 5.23008 12.0833 6.66667L14.5833 6.66667C14.5833 4.56704 13.7493 2.5534 12.2646 1.06874L10.4968 2.83651Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];

            @override
            bool shouldRepaint(Node_I1_692_131_354_81_52 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_692_131_354_81_53 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_692_131_354_81_53({this.properties = const {}}) : super();
            final List<Paint> fills = [];
final List<Path> fillGeometries = [];
final List<Paint> strokes = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(60, 60, 67, 0.30000001192092896)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> strokeGeometries = [((){
                    var path = parseSvgPathData('M6.66667 4.58329C7.35702 4.58329 7.91667 4.02365 7.91667 3.33329C7.91667 2.64294 7.35702 2.08329 6.66667 2.08329L6.66667 4.58329ZM16.6667 2.08329C15.9763 2.08329 15.4167 2.64294 15.4167 3.33329C15.4167 4.02365 15.9763 4.58329 16.6667 4.58329L16.6667 2.08329ZM6.66671 2.08333C5.97635 2.08333 5.41671 2.64298 5.41671 3.33333C5.41671 4.02369 5.97635 4.58333 6.66671 4.58333L6.66671 2.08333ZM16.6667 4.58333C17.3571 4.58333 17.9167 4.02369 17.9167 3.33333C17.9167 2.64298 17.3571 2.08333 16.6667 2.08333L16.6667 4.58333ZM7.91675 3.33329C7.91675 2.64294 7.3571 2.08329 6.66675 2.08329C5.97639 2.08329 5.41675 2.64294 5.41675 3.33329L7.91675 3.33329ZM5.41675 4.99996C5.41675 5.69032 5.97639 6.24996 6.66675 6.24996C7.3571 6.24996 7.91675 5.69032 7.91675 4.99996L5.41675 4.99996ZM5.41675 3.33333C5.41675 4.02369 5.97639 4.58333 6.66675 4.58333C7.3571 4.58333 7.91675 4.02369 7.91675 3.33333L5.41675 3.33333ZM7.91675 0C7.91675 -0.690356 7.3571 -1.25 6.66675 -1.25C5.97639 -1.25 5.41675 -0.690356 5.41675 0L7.91675 0ZM17.9167 3.33329C17.9167 2.64294 17.3571 2.08329 16.6667 2.08329C15.9764 2.08329 15.4167 2.64294 15.4167 3.33329L17.9167 3.33329ZM15.4167 4.99996C15.4167 5.69032 15.9764 6.24996 16.6667 6.24996C17.3571 6.24996 17.9167 5.69032 17.9167 4.99996L15.4167 4.99996ZM15.4167 3.33333C15.4167 4.02369 15.9764 4.58333 16.6667 4.58333C17.3571 4.58333 17.9167 4.02369 17.9167 3.33333L15.4167 3.33333ZM17.9167 0C17.9167 -0.690356 17.3571 -1.25 16.6667 -1.25C15.9764 -1.25 15.4167 -0.690356 15.4167 0L17.9167 0ZM11.9649 13.0951C11.9649 12.4048 11.4053 11.8451 10.7149 11.8451C10.0246 11.8451 9.46492 12.4048 9.46492 13.0951L11.9649 13.0951ZM10.7149 15.9518L9.46492 15.9518C9.46492 16.6421 10.0246 17.2018 10.7149 17.2018L10.7149 15.9518ZM13.5716 17.2018C14.2619 17.2018 14.8216 16.6421 14.8216 15.9518C14.8216 15.2614 14.2619 14.7018 13.5716 14.7018L13.5716 17.2018ZM6.66667 2.08329C2.29441 2.08329 -1.25 5.62771 -1.25 9.99996L1.25 9.99996C1.25 7.00842 3.67512 4.58329 6.66667 4.58329L6.66667 2.08329ZM-1.25 9.99996L-1.25 20L1.25 20L1.25 9.99996L-1.25 9.99996ZM-1.25 20C-1.25 24.3722 2.29441 27.9166 6.66667 27.9166L6.66667 25.4166C3.67512 25.4166 1.25 22.9915 1.25 20L-1.25 20ZM6.66667 27.9166L16.6667 27.9166L16.6667 25.4166L6.66667 25.4166L6.66667 27.9166ZM16.6667 27.9166C21.0389 27.9166 24.5833 24.3722 24.5833 20L22.0833 20C22.0833 22.9915 19.6582 25.4166 16.6667 25.4166L16.6667 27.9166ZM24.5833 20L24.5833 9.99996L22.0833 9.99996L22.0833 20L24.5833 20ZM24.5833 9.99996C24.5833 5.62771 21.0389 2.08329 16.6667 2.08329L16.6667 4.58329C19.6582 4.58329 22.0833 7.00842 22.0833 9.99996L24.5833 9.99996ZM6.66671 4.58333L16.6667 4.58333L16.6667 2.08333L6.66671 2.08333L6.66671 4.58333ZM5.41675 3.33329L5.41675 4.99996L7.91675 4.99996L7.91675 3.33329L5.41675 3.33329ZM7.91675 3.33333L7.91675 0L5.41675 0L5.41675 3.33333L7.91675 3.33333ZM15.4167 3.33329L15.4167 4.99996L17.9167 4.99996L17.9167 3.33329L15.4167 3.33329ZM17.9167 3.33333L17.9167 0L15.4167 0L15.4167 3.33333L17.9167 3.33333ZM9.46492 13.0951L9.46492 15.9518L11.9649 15.9518L11.9649 13.0951L9.46492 13.0951ZM10.7149 17.2018L13.5716 17.2018L13.5716 14.7018L10.7149 14.7018L10.7149 17.2018Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];

            @override
            bool shouldRepaint(Node_I1_692_131_354_81_53 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_692_131_354_81_54 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_692_131_354_81_54({this.properties = const {}}) : super();
            final List<Paint> fills = [];
final List<Path> fillGeometries = [];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_692_131_354_81_54 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_692_131_354_81_55 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_692_131_354_81_55({this.properties = const {}}) : super();
            final List<Paint> fills = [];
final List<Path> fillGeometries = [];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_692_131_354_81_55 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_692_131_354_81_56 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_692_131_354_81_56({this.properties = const {}}) : super();
            final List<Paint> fills = [];
final List<Path> fillGeometries = [];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_692_131_354_81_56 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_692_131_354_81_57 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_692_131_354_81_57({this.properties = const {}}) : super();
            final List<Paint> fills = [];
final List<Path> fillGeometries = [];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_692_131_354_81_57 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_692_131_354_81_58 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_692_131_354_81_58({this.properties = const {}}) : super();
            final List<Paint> fills = [];
final List<Path> fillGeometries = [];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_692_131_354_81_58 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_692_131_354_81_59 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_692_131_354_81_59({this.properties = const {}}) : super();
            final List<Paint> fills = [];
final List<Path> fillGeometries = [];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_692_131_354_81_59 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_692_131_354_81_60 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_692_131_354_81_60({this.properties = const {}}) : super();
            final List<Paint> fills = [];
final List<Path> fillGeometries = [];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_692_131_354_81_60 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_1_694 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_694({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_694 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_1_695 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_1_695({this.properties = const {}}) : super();
            final List<Paint> fills = [
Paint()
                    ..color = Color.fromRGBO(0, 0, 0, 0)
                    ..style = PaintingStyle.fill,
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_1_695 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_I1_695_131_349 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_695_131_349({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(153, 160, 169, 0.4000000059604645), Color.fromRGBO(255, 255, 255, 0.4000000059604645)],
                    stops: [0, 1],
                 
                    begin: Alignment(0, -1),
                    end: Alignment(0, 0.9999999999999998),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(64, 64)))
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M64 32C64 49.6731 49.6731 64 32 64C14.3269 64 0 49.6731 0 32C0 14.3269 14.3269 0 32 0C49.6731 0 64 14.3269 64 32Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_695_131_349 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        
                        try{
                            canvas.drawPath(
                                path.shift(Offset(4, 4))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(142, 155, 174, 0.10000000149011612)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 20 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(4, 4);
                            canvas.drawShadow(path, Color.fromRGBO(142, 155, 174, 0.10000000149011612), 20, true);
                            canvas.translate(-4, -4);
                        }
                    canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        
                        try{
                            canvas.drawPath(
                                path.shift(Offset(4, 4))
                                ..fillType = PathFillType.evenOdd,
                                Paint() 
                                ..color=Color.fromRGBO(142, 155, 174, 0.10000000149011612)
                                ..maskFilter = MaskFilter.blur(BlurStyle.normal, 20 * 0.57735 + 0.5)
                            );
                            canvas.drawPath(path, Paint()..blendMode = BlendMode.clear);
                        }catch(err){
                            canvas.translate(4, 4);
                            canvas.drawShadow(path, Color.fromRGBO(142, 155, 174, 0.10000000149011612), 20, true);
                            canvas.translate(-4, -4);
                        }
                    canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_695_131_350 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_695_131_350({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(245, 245, 249, 1), Color.fromRGBO(218, 223, 231, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(-0.6000000575515949, -0.7833333161887179),
                    end: Alignment(0.4833333169337768, 0.8499999699907175),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(58, 58)))
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M58 29C58 45.0163 45.0163 58 29 58C12.9837 58 0 45.0163 0 29C0 12.9837 12.9837 0 29 0C45.0163 0 58 12.9837 58 29Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(0, 0, 0, 0.30000001192092896), Color.fromRGBO(0, 0, 0, 0.4000000059604645)],
                    stops: [0, 1],
                 
                    begin: Alignment(-0.6333332995573671, -0.5666666845480595),
                    end: Alignment(0.4333333448568977, 0.9000000250339515),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(58, 58)))
            ,];
final List<Path> strokeGeometries = [((){
                    var path = parseSvgPathData('M57.7 29C57.7 44.8506 44.8506 57.7 29 57.7L29 58.3C45.1819 58.3 58.3 45.1819 58.3 29L57.7 29ZM29 57.7C13.1494 57.7 0.3 44.8506 0.3 29L-0.3 29C-0.3 45.1819 12.8181 58.3 29 58.3L29 57.7ZM0.3 29C0.3 13.1494 13.1494 0.3 29 0.3L29 -0.3C12.8181 -0.3 -0.3 12.8181 -0.3 29L0.3 29ZM29 0.3C44.8506 0.3 57.7 13.1494 57.7 29L58.3 29C58.3 12.8181 45.1819 -0.3 29 -0.3L29 0.3Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];

            @override
            bool shouldRepaint(Node_I1_695_131_350 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        canvas.clipPath(fillPath);
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_695_131_351 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_695_131_351({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(217, 154, 250, 1), Color.fromRGBO(186, 61, 79, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(-0.6000000575515949, -0.7833333161887179),
                    end: Alignment(0.4833333169337768, 0.8499999699907175),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(58, 58)))
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M58 29C58 45.0163 45.0163 58 29 58C12.9837 58 0 45.0163 0 29C0 12.9837 12.9837 0 29 0C45.0163 0 58 12.9837 58 29Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_695_131_351 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        canvas.clipPath(fillPath);
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_695_131_352 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_695_131_352({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(255, 255, 255, 1), Color.fromRGBO(203, 208, 217, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(-0.6000000575515949, -0.7833333161887179),
                    end: Alignment(0.4833333169337768, 0.8499999699907175),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(60, 60)))
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M60 30C60 46.5685 46.5685 60 30 60C13.4315 60 0 46.5685 0 30C0 13.4315 13.4315 0 30 0C46.5685 0 60 13.4315 60 30ZM4.5 30C4.5 44.0833 15.9167 55.5 30 55.5C44.0833 55.5 55.5 44.0833 55.5 30C55.5 15.9167 44.0833 4.5 30 4.5C15.9167 4.5 4.5 15.9167 4.5 30Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_695_131_352 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        
                    paint.maskFilter = MaskFilter.blur(BlurStyle.normal, 2 * 0.57735 + 0.5);
                    canvas.drawPath(path, paint);
                    
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        canvas.clipPath(fillPath);
                        
                    paint.maskFilter = MaskFilter.blur(BlurStyle.normal, 2 * 0.57735 + 0.5);
                    canvas.drawPath(path, paint);
                    
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_695_131_353 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_695_131_353({this.properties = const {}}) : super();
            final List<Paint> fills = [
            Paint()
                ..style = PaintingStyle.fill 
                ..blendMode = BlendMode.srcOver
                ..shader = LinearGradient(
                    colors: [Color.fromRGBO(221, 225, 231, 1), Color.fromRGBO(250, 251, 252, 1)],
                    stops: [0, 1],
                 
                    begin: Alignment(-0.499999997001887, -0.840000029200316),
                    end: Alignment(0.5200000655591488, 0.9399999680697892),
                ).createShader(Rect.fromPoints(Offset(0, 0), Offset(50, 50)))
            ,];
final List<Path> fillGeometries = [((){
                    var path = parseSvgPathData('M50 25C50 38.8071 38.8071 50 25 50C11.1929 50 0 38.8071 0 25C0 11.1929 11.1929 0 25 0C38.8071 0 50 11.1929 50 25Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_695_131_353 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_695_131_354 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_695_131_354({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_I1_695_131_354 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - -0.5, 0 - -0.5), Offset(w + -0.5, h + -0.5))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_I1_695_131_354_81_62 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_695_131_354_81_62({this.properties = const {}}) : super();
            final List<Paint> fills = [
];
            final List<Paint> strokes = [
];
            
            @override
            bool shouldRepaint(Node_I1_695_131_354_81_62 oldDelegate) => true;

            @override
            void paint(Canvas canvas, Size size) {
                double w = properties.containsKey('width') ? properties['width'].toDouble() : size.width;
                double h = properties.containsKey('height') ? properties['height'].toDouble() : size.height;
                double x = properties.containsKey('x') ? properties['x'].toDouble() : 0;
                double y = properties.containsKey('y') ? properties['y'].toDouble() : 0;
                Path path = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                Path strokePath = Path()
                        ..addRect(Rect.fromPoints(Offset(0 - 0, 0 - 0), Offset(w + 0, h + 0))) 
                        ..fillType = PathFillType.evenOdd;
                if(x != 0 || y != 0) {
                    path = movePath(path, x, y);
                    strokePath = movePath(strokePath, x, y);
                }
                for (var i=fills.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = fills[i];
                    canvas.drawPath(path, paint);
                    canvas.restore();
                }
                for (var i=strokes.length-1; i>=0; i=i-1) {
                    canvas.saveLayer(Rect.largest, Paint());
                    var paint = strokes[i];
                    canvas.drawPath(strokePath, paint);
                    canvas.restore();
                }
                if(fills.length == 0 && strokes.length == 0){
                    var paint = Paint()
                        ..blendMode = BlendMode.srcOver
                        ..color = Color.fromRGBO(0, 0, 0, 0)
                        ..style = PaintingStyle.fill;
                    canvas.drawPath(path, paint);
                }
            }
        }
        

        class Node_I1_695_131_354_81_63 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_695_131_354_81_63({this.properties = const {}}) : super();
            final List<Paint> fills = [];
final List<Path> fillGeometries = [];
final List<Paint> strokes = [
            Paint()
                ..blendMode = BlendMode.srcOver
                ..color = Color.fromRGBO(60, 60, 67, 0.30000001192092896)
                ..style = PaintingStyle.fill 
            ,];
final List<Path> strokeGeometries = [((){
                    var path = parseSvgPathData('M20.9482 8.67501C21.1382 9.3387 21.8302 9.72272 22.4939 9.53274C23.1576 9.34275 23.5416 8.6507 23.3517 7.987L20.9482 8.67501ZM19.3166 3.41434L20.2168 2.54706L20.2158 2.54607L19.3166 3.41434ZM13.5183 0.222671L13.7708 -1.00155L13.7685 -1.00203L13.5183 0.222671ZM6.98326 0.889338L6.49088 -0.259602L6.48965 -0.259072L6.98326 0.889338ZM1.90659 5.18267L0.856085 4.50523L0.856068 4.50526L1.90659 5.18267ZM3.31326 19.9143L4.21716 19.0509L4.21661 19.0504L3.31326 19.9143ZM17.5949 21.366L18.3066 22.3936L18.3069 22.3934L17.5949 21.366ZM22.9227 16.5923C23.1784 15.951 22.8658 15.2239 22.2246 14.9682C21.5833 14.7125 20.8562 15.0251 20.6005 15.6664L22.9227 16.5923ZM20.94 8.01655C20.7663 8.68471 21.1672 9.36713 21.8354 9.54078C22.5036 9.71442 23.186 9.31353 23.3596 8.64537L20.94 8.01655ZM24.543 4.09204C24.7166 3.42388 24.3157 2.74146 23.6475 2.56782C22.9794 2.39417 22.297 2.79506 22.1233 3.46322L24.543 4.09204ZM21.8169 9.53578C22.4823 9.71966 23.1708 9.32929 23.3547 8.66387C23.5386 7.99846 23.1482 7.30997 22.4828 7.12609L21.8169 9.53578ZM18.0678 5.90609C17.4024 5.72222 16.7139 6.11258 16.53 6.778C16.3461 7.44342 16.7365 8.13191 17.4019 8.31578L18.0678 5.90609ZM11.25 8.33104C11.25 7.64068 10.6903 7.08104 9.99996 7.08104C9.3096 7.08104 8.74996 7.64068 8.74996 8.33104L11.25 8.33104ZM9.99996 13.331L8.74996 13.331C8.74996 14.0214 9.3096 14.581 9.99996 14.581L9.99996 13.331ZM15 14.581C15.6903 14.581 16.25 14.0214 16.25 13.331C16.25 12.6407 15.6903 12.081 15 12.081L15 14.581ZM23.3517 7.987C22.767 5.94471 21.6907 4.07689 20.2168 2.54706L18.4164 4.28161C19.6068 5.51713 20.4761 7.02562 20.9482 8.67501L23.3517 7.987ZM20.2158 2.54607C18.4736 0.741717 16.2273 -0.494744 13.7708 -1.00155L13.2657 1.44689C15.2292 1.85199 17.0247 2.84033 18.4174 4.28261L20.2158 2.54607ZM13.7685 -1.00203C11.3236 -1.50157 8.78451 -1.24254 6.49088 -0.259602L7.47564 2.03828C9.30118 1.25594 11.3221 1.04977 13.268 1.44737L13.7685 -1.00203ZM6.48965 -0.259072C4.17994 0.733695 2.21858 2.39242 0.856085 4.50523L2.9571 5.86011C4.05022 4.16502 5.62381 2.83424 7.47688 2.03775L6.48965 -0.259072ZM0.856068 4.50526C-2.45243 9.63603 -1.80978 16.3664 2.40992 20.7783L4.21661 19.0504C0.7963 15.4742 0.275391 10.0189 2.95712 5.86009L0.856068 4.50526ZM2.40937 20.7777C6.5894 25.1538 13.3316 25.8391 18.3066 22.3936L16.8833 20.3384C12.9194 23.0835 7.54759 22.5375 4.21716 19.0509L2.40937 20.7777ZM18.3069 22.3934C20.3821 20.9553 21.9876 18.9376 22.9227 16.5923L20.6005 15.6664C19.8474 17.5553 18.5543 19.1803 16.8829 20.3386L18.3069 22.3934ZM23.3596 8.64537L24.543 4.09204L22.1233 3.46322L20.94 8.01655L23.3596 8.64537ZM22.4828 7.12609L18.0678 5.90609L17.4019 8.31578L21.8169 9.53578L22.4828 7.12609ZM8.74996 8.33104L8.74996 13.331L11.25 13.331L11.25 8.33104L8.74996 8.33104ZM9.99996 14.581L15 14.581L15 12.081L9.99996 12.081L9.99996 14.581Z');
                    path.fillType = PathFillType.nonZero;
                    return path;
                })(),];

            @override
            bool shouldRepaint(Node_I1_695_131_354_81_63 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_695_131_354_81_64 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_695_131_354_81_64({this.properties = const {}}) : super();
            final List<Paint> fills = [];
final List<Path> fillGeometries = [];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_695_131_354_81_64 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_695_131_354_81_65 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_695_131_354_81_65({this.properties = const {}}) : super();
            final List<Paint> fills = [];
final List<Path> fillGeometries = [];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_695_131_354_81_65 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_695_131_354_81_66 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_695_131_354_81_66({this.properties = const {}}) : super();
            final List<Paint> fills = [];
final List<Path> fillGeometries = [];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_695_131_354_81_66 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Node_I1_695_131_354_81_67 extends BasePainter {
            Map<String, dynamic> properties = {};
            Node_I1_695_131_354_81_67({this.properties = const {}}) : super();
            final List<Paint> fills = [];
final List<Path> fillGeometries = [];
final List<Paint> strokes = [];
final List<Path> strokeGeometries = [];

            @override
            bool shouldRepaint(Node_I1_695_131_354_81_67 oldDelegate) => true;
            @override
            void paint(Canvas canvas, Size size) {
                if(fills.length > 0) {
                    var paint = fills[0];
                    for (var i=0; i<fillGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = resizePathIfNeeded(fillGeometries[i]);
                        canvas.drawPath(path, paint);
                        if(fills.length > i + 1) paint = fills[i + 1];
                        canvas.restore();
                    }
                    
                }
                if(strokes.length > 0) {
                    var paint = strokes[0];
                    for (var i=0; i<strokeGeometries.length; i++) {
                        canvas.saveLayer(Rect.largest, Paint());
                        var path = strokeGeometries[i];
                        var fillPath = fillGeometries.length > i ? fillGeometries[i] : path;
                        path = resizePathIfNeeded(path);
                        
                        canvas.drawPath(path, paint);
                        if(strokes.length > i + 1) paint = strokes[i + 1];
                        canvas.restore();
                    }
                }
            }
        }
        

        class Widget_1_667 extends StatefulWidget {
            
        final String nodeName = r'''Thermostat''';
        final String name = r'''Thermostat''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_667({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_667 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_667(properties:properties);
        }
            @override
                _Widget_1_667State createState() => _Widget_1_667State(this.properties);
            }
            class _Widget_1_667State extends BaseState<Widget_1_667> {
                bool visible = true;
                bool isLoaded = false;
                double width = 244;
                double height = 244;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Thermostat''', id: '1:667', componentName:r'''Thermostat''');
                
                _Widget_1_667State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Thermostat''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Thermostat');
            }            
            
            var painter = Node_1_667();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Thermostat''', id: '1:667', widget: this, componentName:r'''Thermostat''');
                ComponentDescendantNotification(name: r'''Thermostat''', id: '1:667', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: GestureDetector(
                                onTap:() {
                                    
            if(triggersBuiltInEvents) {
                // if(Navigator.canPop(context)){
                //     Navigator.pop(context);
                // }
                globals.navigatorKey.currentState?.pushReplacement(
                    PageRouteBuilder(
                        pageBuilder: (context, animation1, animation2) => Widget_1_527(),
                        
                    ),
                );
            }
            
                                },
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 244,
                                height: 244,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 266 + 0, maxWidth: 266 + 0,
                                                                        minHeight: 133 + 0, maxHeight: 133 + 0,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 266,
                                                                        height: 133,
                                                                        
                                                                        child: 
                                                                    TransparentPointer(
                                                                        child: Widget_I1_667_135_350()
                                                                    )
                                                                    )), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 10 + 0, maxWidth: 10 + 0,
                                                                        minHeight: 0 + 122, maxHeight: 0 + 122,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(0, 122, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 10,
                                                                        
                                                                        
                                                                        child: Widget_I1_667_135_351())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 10 + 250, maxWidth: 10 + 250,
                                                                        minHeight: 0 + 122, maxHeight: 0 + 122,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(250, 122, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 10,
                                                                        
                                                                        
                                                                        child: Widget_I1_667_135_352())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 244 + 0, maxWidth: 244 + 0,
                                                                        minHeight: 244 + 0, maxHeight: 244 + 0,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 244,
                                                                        height: 244,
                                                                        
                                                                        child: Widget_I1_667_135_353())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 189 + 7, maxWidth: 189 + 7,
                                                                        minHeight: 229 + 8, maxHeight: 229 + 8,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(7, 8, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 189,
                                                                        height: 229,
                                                                        
                                                                        child: 
                                                                    TransparentPointer(
                                                                        child: Widget_I1_667_141_119()
                                                                    )
                                                                    )), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 200 + 22, maxWidth: 200 + 22,
                                                                        minHeight: 200 + 22, maxHeight: 200 + 22,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(22, 22, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 200,
                                                                        height: 200,
                                                                        
                                                                        child: Widget_I1_667_135_355())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 172 + 36, maxWidth: 172 + 36,
                                                                        minHeight: 172 + 36, maxHeight: 172 + 36,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(36, 36, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 172,
                                                                        height: 172,
                                                                        
                                                                        child: Widget_I1_667_135_356())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 158 + 43, maxWidth: 158 + 43,
                                                                        minHeight: 158 + 43, maxHeight: 158 + 43,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(43, 43, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 158,
                                                                        height: 158,
                                                                        
                                                                        child: Widget_I1_667_135_357())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 62 + 91, maxWidth: 62 + 91,
                                                                        minHeight: 32 + 120, maxHeight: 32 + 120,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(91, 120, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 62,
                                                                        height: 32,
                                                                        
                                                                        child: Widget_I1_667_135_358())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 62 + 91, maxWidth: 62 + 91,
                                                                        minHeight: 43 + 113, maxHeight: 43 + 113,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(91, 113, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 62,
                                                                        height: 43,
                                                                        
                                                                        child: Widget_I1_667_141_226())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 74 + 90, maxWidth: 74 + 90,
                                                                        minHeight: 22 + 86, maxHeight: 22 + 86,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(90, 86, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 74,
                                                                        height: 22,
                                                                        
                                                                        child: Widget_I1_667_135_359())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 15 + 136, maxWidth: 15 + 136,
                                                                        minHeight: 15 + 46, maxHeight: 15 + 46,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(136, 46, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 15,
                                                                        height: 15,
                                                                        
                                                                        child: Widget_I1_667_135_360())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 44 + 100, maxWidth: 44 + 100,
                                                                        minHeight: 44 + 164, maxHeight: 44 + 164,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(100, 164, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 44,
                                                                        height: 44,
                                                                        
                                                                        child: 
                                                                    TransparentPointer(
                                                                        child: Widget_I1_667_135_361()
                                                                    )
                                                                    )), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 26 + 0, maxWidth: 26 + 0,
                                                                        minHeight: 20 + 112, maxHeight: 20 + 112,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(0, 112, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 26,
                                                                        height: 20,
                                                                        
                                                                        child: Widget_I1_667_135_362())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 26 + 271, maxWidth: 26 + 271,
                                                                        minHeight: 20 + 112, maxHeight: 20 + 112,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(271, 112, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 26,
                                                                        height: 20,
                                                                        
                                                                        child: Widget_I1_667_135_363())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 25 + 109, maxWidth: 25 + 109,
                                                                        minHeight: 20 + 0, maxHeight: 20 + 0,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(109, 0, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 25,
                                                                        height: 20,
                                                                        
                                                                        child: Widget_I1_667_135_364()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                );
            }
        }
        

        class Widget_I1_667_135_361 extends StatefulWidget {
            
        final String nodeName = r'''Eco''';
        final String name = r'''Eco''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_667_135_361({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_667_135_361 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_667_135_361(properties:properties);
        }
            @override
                _Widget_I1_667_135_361State createState() => _Widget_I1_667_135_361State(this.properties);
            }
            class _Widget_I1_667_135_361State extends BaseState<Widget_I1_667_135_361> {
                bool visible = true;
                bool isLoaded = false;
                double width = 44;
                double height = 44;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Eco''', id: 'I1:667;135:361', componentName:r'''Eco''');
                
                _Widget_I1_667_135_361State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Eco''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Eco');
            }            
            
            var painter = Node_I1_667_135_361();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Eco''', id: 'I1:667;135:361', widget: this, componentName:r'''Eco''');
                ComponentDescendantNotification(name: r'''Eco''', id: 'I1:667;135:361', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 44,
                                height: 44,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 28 + 8, maxWidth: 28 + 8,
                                                                        minHeight: 28 + 8, maxHeight: 28 + 8,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(8, 8, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 28,
                                                                        height: 28,
                                                                        
                                                                        child: Widget_I1_667_135_361_85_680()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_1_675 extends StatefulWidget {
            
        final String nodeName = r'''humidity''';
        final String name = r'''humidity''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_675({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_675 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_675(properties:properties);
        }
            @override
                _Widget_1_675State createState() => _Widget_1_675State(this.properties);
            }
            class _Widget_1_675State extends BaseState<Widget_1_675> {
                bool visible = true;
                bool isLoaded = false;
                double width = 44;
                double height = 44;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''humidity''', id: '1:675', componentName:r'''humidity''');
                
                _Widget_1_675State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''humidity''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'humidity');
            }            
            
            var painter = Node_1_675();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''humidity''', id: '1:675', widget: this, componentName:r'''humidity''');
                ComponentDescendantNotification(name: r'''humidity''', id: '1:675', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 44,
                                height: 44,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(-0.022727272727272707, 0.13636363636363646),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(-0.022727272727272707, 0.13636363636363646),
                                                                        margin: EdgeInsets.fromLTRB((){
                            double s = constraints.widthConstraints().maxWidth, r = 0, n = 30, d = 6.769230769230769, o = 5.866666666666666;
                            r = (((s / d + s / o + n) > s) ? (s - n) / d : r = s / d).abs();
                            return r as double;
                        }(), (){
                        double s = constraints.heightConstraints().maxHeight, r = 0, n = 28, d = 4, o = 8.8;
                        r = (((s / d + s / o + n) > s) ? (s - n) / d : r = s / d).abs();
                        return r as double;
                    }(), (){
                            double s = constraints.widthConstraints().maxWidth, r = 0, n = 30, d = 5.866666666666666, o = 6.769230769230769;
                            r = (((s / d + s / o + n) > s) ? (s - n) / d : r = s / d).abs();
                            return r as double;
                        }(), (){
                        double s = constraints.heightConstraints().maxHeight, r = 0, n = 28, d = 8.8, o = 4;
                        r = (((s / d + s / o + n) > s) ? (s - n) / d : r = s / d).abs();
                        return r as double;
                    }()),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 30,
                                                                        height: 28,
                                                                        
                                                                        child: Widget_I1_675_81_83()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_681 extends StatefulWidget {
            
        final String nodeName = r'''Temperature''';
        final String name = r'''Temperature''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_681({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_681 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_681(properties:properties);
        }
            @override
                _Widget_1_681State createState() => _Widget_1_681State(this.properties);
            }
            class _Widget_1_681State extends BaseState<Widget_1_681> {
                bool visible = true;
                bool isLoaded = false;
                double width = 44;
                double height = 44;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Temperature''', id: '1:681', componentName:r'''Temperature''');
                
                _Widget_1_681State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Temperature''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Temperature');
            }            
            
            var painter = Node_1_681();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Temperature''', id: '1:681', widget: this, componentName:r'''Temperature''');
                ComponentDescendantNotification(name: r'''Temperature''', id: '1:681', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 44,
                                height: 44,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, 0.13636363636363646),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0, 0.13636363636363646),
                                                                        margin: EdgeInsets.fromLTRB((){
                            double s = constraints.widthConstraints().maxWidth, r = 0, n = 19, d = 3.52, o = 3.52;
                            r = (((s / d + s / o + n) > s) ? (s - n) / d : r = s / d).abs();
                            return r as double;
                        }(), (){
                        double s = constraints.heightConstraints().maxHeight, r = 0, n = 28, d = 4, o = 8.8;
                        r = (((s / d + s / o + n) > s) ? (s - n) / d : r = s / d).abs();
                        return r as double;
                    }(), (){
                            double s = constraints.widthConstraints().maxWidth, r = 0, n = 19, d = 3.52, o = 3.52;
                            r = (((s / d + s / o + n) > s) ? (s - n) / d : r = s / d).abs();
                            return r as double;
                        }(), (){
                        double s = constraints.heightConstraints().maxHeight, r = 0, n = 28, d = 8.8, o = 4;
                        r = (((s / d + s / o + n) > s) ? (s - n) / d : r = s / d).abs();
                        return r as double;
                    }()),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 19,
                                                                        height: 28,
                                                                        
                                                                        child: Widget_I1_681_81_85()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Clipper_I1_686_131_368 extends CustomClipper<Path> {
            @override
            Path getClip(Size size) {
                var path = parseSvgPathData('''M58 29C58 45.0163 45.0163 58 29 58C12.9837 58 0 45.0163 0 29C0 12.9837 12.9837 0 29 0C45.0163 0 58 12.9837 58 29Z''');
                                path.fillType = PathFillType.nonZero;
                return path;
            }
            @override
            bool shouldReclip(CustomClipper<Path> oldClipper) => false;
          }
        

        class Widget_1_686 extends StatefulWidget {
            
        final String nodeName = r'''Icon''';
        final String name = r'''Icon''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_686({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_686 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_686(properties:properties);
        }
            @override
                _Widget_1_686State createState() => _Widget_1_686State(this.properties);
            }
            class _Widget_1_686State extends BaseState<Widget_1_686> {
                bool visible = true;
                bool isLoaded = false;
                double width = 64;
                double height = 64;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Icon''', id: '1:686', componentName:r'''Icon''');
                
                _Widget_1_686State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Icon''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Icon');
            }            
            
            var painter = Node_1_686();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Icon''', id: '1:686', widget: this, componentName:r'''Icon''');
                ComponentDescendantNotification(name: r'''Icon''', id: '1:686', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: GestureDetector(
                                onTap:() {
                                    
            if(triggersBuiltInEvents) {
                // if(Navigator.canPop(context)){
                //     Navigator.pop(context);
                // }
                globals.navigatorKey.currentState?.pushReplacement(
                    PageRouteBuilder(
                        pageBuilder: (context, animation1, animation2) => Widget_1_575(),
                        
                    ),
                );
            }
            
                                },
                                child: 
                            ClipPath(
                                clipper: Clipper_I1_686_131_368(),
                                child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 64,
                                height: 64,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, 0),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0, 0),
                                                                        margin: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                                                        
                                                                        
                                                                        
                                                                        child: Widget_I1_686_131_366())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, 0),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0, 0),
                                                                        margin: EdgeInsets.fromLTRB(constraints.widthConstraints().maxWidth / 21.333333333333332, constraints.heightConstraints().maxHeight / 21.333333333333332, constraints.widthConstraints().maxWidth / 21.333333333333332, constraints.heightConstraints().maxHeight / 21.333333333333332),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                                                        
                                                                        
                                                                        
                                                                        child: Widget_I1_686_131_367())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, 0),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0, 0),
                                                                        margin: EdgeInsets.fromLTRB(constraints.widthConstraints().maxWidth / 21.333333333333332, constraints.heightConstraints().maxHeight / 21.333333333333332, constraints.widthConstraints().maxWidth / 21.333333333333332, constraints.heightConstraints().maxHeight / 21.333333333333332),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                                                        
                                                                        
                                                                        
                                                                        child: Widget_I1_686_131_368())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, 0),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0, 0),
                                                                        margin: EdgeInsets.fromLTRB(constraints.widthConstraints().maxWidth / 32, constraints.heightConstraints().maxHeight / 32, constraints.widthConstraints().maxWidth / 32, constraints.heightConstraints().maxHeight / 32),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                                                        
                                                                        
                                                                        
                                                                        child: Widget_I1_686_131_369())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, 0),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0, 0),
                                                                        margin: EdgeInsets.fromLTRB(constraints.widthConstraints().maxWidth / 9.142857142857142, constraints.heightConstraints().maxHeight / 9.142857142857142, constraints.widthConstraints().maxWidth / 9.142857142857142, constraints.heightConstraints().maxHeight / 9.142857142857142),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                                                        
                                                                        
                                                                        
                                                                        child: Widget_I1_686_131_370())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, 0),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0, 0),
                                                                        margin: EdgeInsets.fromLTRB(constraints.widthConstraints().maxWidth / 6.4, constraints.heightConstraints().maxHeight / 6.4, constraints.widthConstraints().maxWidth / 6.4, constraints.heightConstraints().maxHeight / 6.4),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                                                        
                                                                        
                                                                        
                                                                        child: 
                                                                    TransparentPointer(
                                                                        child: Widget_I1_686_131_371()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            ,
                            )
                            
                            )
                );
            }
        }
        

        class Widget_I1_686_131_371 extends StatefulWidget {
            
        final String nodeName = r'''Home Steam''';
        final String name = r'''Home Steam''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_686_131_371({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_686_131_371 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_686_131_371(properties:properties);
        }
            @override
                _Widget_I1_686_131_371State createState() => _Widget_I1_686_131_371State(this.properties);
            }
            class _Widget_I1_686_131_371State extends BaseState<Widget_I1_686_131_371> {
                bool visible = true;
                bool isLoaded = false;
                double width = 44;
                double height = 44;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Home Steam''', id: 'I1:686;131:371', componentName:r'''Home Steam''');
                
                _Widget_I1_686_131_371State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Home Steam''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Home Steam');
            }            
            
            var painter = Node_I1_686_131_371();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Home Steam''', id: 'I1:686;131:371', widget: this, componentName:r'''Home Steam''');
                ComponentDescendantNotification(name: r'''Home Steam''', id: 'I1:686;131:371', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(0.010653409090909172, 0.0149171135642312),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0.010653409090909172, 0.0149171135642312),
                                                                        margin: EdgeInsets.fromLTRB((){
                            double s = constraints.widthConstraints().maxWidth, r = 0, n = 24.46875, d = 4.4, o = 4.616393442622951;
                            r = (((s / d + s / o + n) > s) ? (s - n) / d : r = s / d).abs();
                            return r as double;
                        }(), (){
                        double s = constraints.heightConstraints().maxHeight, r = 0, n = 22.656360626220703, d = 4.000001387163123, o = 4.253820360800789;
                        r = (((s / d + s / o + n) > s) ? (s - n) / d : r = s / d).abs();
                        return r as double;
                    }(), (){
                            double s = constraints.widthConstraints().maxWidth, r = 0, n = 24.46875, d = 4.616393442622951, o = 4.4;
                            r = (((s / d + s / o + n) > s) ? (s - n) / d : r = s / d).abs();
                            return r as double;
                        }(), (){
                        double s = constraints.heightConstraints().maxHeight, r = 0, n = 22.656360626220703, d = 4.253820360800789, o = 4.000001387163123;
                        r = (((s / d + s / o + n) > s) ? (s - n) / d : r = s / d).abs();
                        return r as double;
                    }()),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 24.46875,
                                                                        height: 22.656360626220703,
                                                                        
                                                                        child: Widget_I1_686_131_371_81_49()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        ))
                        )
                        
                            )
                            
                );
            }
        }
        

        class Clipper_I1_689_131_351 extends CustomClipper<Path> {
            @override
            Path getClip(Size size) {
                var path = parseSvgPathData('''M58 29C58 45.0163 45.0163 58 29 58C12.9837 58 0 45.0163 0 29C0 12.9837 12.9837 0 29 0C45.0163 0 58 12.9837 58 29Z''');
                                path.fillType = PathFillType.nonZero;
                return path;
            }
            @override
            bool shouldReclip(CustomClipper<Path> oldClipper) => false;
          }
        

        class Widget_1_689 extends StatefulWidget {
            
        final String nodeName = r'''Icon''';
        final String name = r'''Icon''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_689({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_689 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_689(properties:properties);
        }
            @override
                _Widget_1_689State createState() => _Widget_1_689State(this.properties);
            }
            class _Widget_1_689State extends BaseState<Widget_1_689> {
                bool visible = true;
                bool isLoaded = false;
                double width = 64;
                double height = 64;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Icon''', id: '1:689', componentName:r'''Icon''');
                
                _Widget_1_689State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Icon''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Icon');
            }            
            
            var painter = Node_1_689();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Icon''', id: '1:689', widget: this, componentName:r'''Icon''');
                ComponentDescendantNotification(name: r'''Icon''', id: '1:689', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: GestureDetector(
                                onTap:() {
                                    
            if(triggersBuiltInEvents) {
                // if(Navigator.canPop(context)){
                //     Navigator.pop(context);
                // }
                globals.navigatorKey.currentState?.pushReplacement(
                    PageRouteBuilder(
                        pageBuilder: (context, animation1, animation2) => Widget_1_582(),
                        
                    ),
                );
            }
            
                                },
                                child: 
                            ClipPath(
                                clipper: Clipper_I1_689_131_351(),
                                child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 64,
                                height: 64,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, 0),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0, 0),
                                                                        margin: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                                                        
                                                                        
                                                                        
                                                                        child: Widget_I1_689_131_349())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, 0),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0, 0),
                                                                        margin: EdgeInsets.fromLTRB(constraints.widthConstraints().maxWidth / 21.333333333333332, constraints.heightConstraints().maxHeight / 21.333333333333332, constraints.widthConstraints().maxWidth / 21.333333333333332, constraints.heightConstraints().maxHeight / 21.333333333333332),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                                                        
                                                                        
                                                                        
                                                                        child: Widget_I1_689_131_350())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, 0),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0, 0),
                                                                        margin: EdgeInsets.fromLTRB(constraints.widthConstraints().maxWidth / 21.333333333333332, constraints.heightConstraints().maxHeight / 21.333333333333332, constraints.widthConstraints().maxWidth / 21.333333333333332, constraints.heightConstraints().maxHeight / 21.333333333333332),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                                                        
                                                                        
                                                                        
                                                                        child: Widget_I1_689_131_351())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, 0),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0, 0),
                                                                        margin: EdgeInsets.fromLTRB(constraints.widthConstraints().maxWidth / 32, constraints.heightConstraints().maxHeight / 32, constraints.widthConstraints().maxWidth / 32, constraints.heightConstraints().maxHeight / 32),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                                                        
                                                                        
                                                                        
                                                                        child: Widget_I1_689_131_352())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, 0),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0, 0),
                                                                        margin: EdgeInsets.fromLTRB(constraints.widthConstraints().maxWidth / 9.142857142857142, constraints.heightConstraints().maxHeight / 9.142857142857142, constraints.widthConstraints().maxWidth / 9.142857142857142, constraints.heightConstraints().maxHeight / 9.142857142857142),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                                                        
                                                                        
                                                                        
                                                                        child: Widget_I1_689_131_353())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, 0),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0, 0),
                                                                        margin: EdgeInsets.fromLTRB(constraints.widthConstraints().maxWidth / 6.4, constraints.heightConstraints().maxHeight / 6.4, constraints.widthConstraints().maxWidth / 6.4, constraints.heightConstraints().maxHeight / 6.4),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                                                        
                                                                        
                                                                        
                                                                        child: 
                                                                    TransparentPointer(
                                                                        child: Widget_I1_689_131_354()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            ,
                            )
                            
                            )
                );
            }
        }
        

        class Widget_I1_689_131_354 extends StatefulWidget {
            
        final String nodeName = r'''Eco''';
        final String name = r'''Eco''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_689_131_354({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_689_131_354 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_689_131_354(properties:properties);
        }
            @override
                _Widget_I1_689_131_354State createState() => _Widget_I1_689_131_354State(this.properties);
            }
            class _Widget_I1_689_131_354State extends BaseState<Widget_I1_689_131_354> {
                bool visible = true;
                bool isLoaded = false;
                double width = 44;
                double height = 44;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Eco''', id: 'I1:689;131:354', componentName:r'''Eco''');
                
                _Widget_I1_689_131_354State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Eco''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Eco');
            }            
            
            var painter = Node_I1_689_131_354();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Eco''', id: 'I1:689;131:354', widget: this, componentName:r'''Eco''');
                ComponentDescendantNotification(name: r'''Eco''', id: 'I1:689;131:354', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 28 + 8, maxWidth: 28 + 8,
                                                                        minHeight: 28 + 8, maxHeight: 28 + 8,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(8, 8, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 28,
                                                                        height: 28,
                                                                        
                                                                        child: Widget_I1_689_131_354_85_680()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        ))
                        )
                        
                            )
                            
                );
            }
        }
        

        class Clipper_I1_692_131_351 extends CustomClipper<Path> {
            @override
            Path getClip(Size size) {
                var path = parseSvgPathData('''M58 29C58 45.0163 45.0163 58 29 58C12.9837 58 0 45.0163 0 29C0 12.9837 12.9837 0 29 0C45.0163 0 58 12.9837 58 29Z''');
                                path.fillType = PathFillType.nonZero;
                return path;
            }
            @override
            bool shouldReclip(CustomClipper<Path> oldClipper) => false;
          }
        

        class Widget_1_692 extends StatefulWidget {
            
        final String nodeName = r'''Icon''';
        final String name = r'''Icon''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_692({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_692 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_692(properties:properties);
        }
            @override
                _Widget_1_692State createState() => _Widget_1_692State(this.properties);
            }
            class _Widget_1_692State extends BaseState<Widget_1_692> {
                bool visible = true;
                bool isLoaded = false;
                double width = 64;
                double height = 64;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Icon''', id: '1:692', componentName:r'''Icon''');
                
                _Widget_1_692State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Icon''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Icon');
            }            
            
            var painter = Node_1_692();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Icon''', id: '1:692', widget: this, componentName:r'''Icon''');
                ComponentDescendantNotification(name: r'''Icon''', id: '1:692', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: GestureDetector(
                                onTap:() {
                                    
            if(triggersBuiltInEvents) {
                // if(Navigator.canPop(context)){
                //     Navigator.pop(context);
                // }
                globals.navigatorKey.currentState?.pushReplacement(
                    PageRouteBuilder(
                        pageBuilder: (context, animation1, animation2) => Widget_1_582(),
                        
                    ),
                );
            }
            
                                },
                                child: 
                            ClipPath(
                                clipper: Clipper_I1_692_131_351(),
                                child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 64,
                                height: 64,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, 0),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0, 0),
                                                                        margin: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                                                        
                                                                        
                                                                        
                                                                        child: Widget_I1_692_131_349())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, 0),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0, 0),
                                                                        margin: EdgeInsets.fromLTRB(constraints.widthConstraints().maxWidth / 21.333333333333332, constraints.heightConstraints().maxHeight / 21.333333333333332, constraints.widthConstraints().maxWidth / 21.333333333333332, constraints.heightConstraints().maxHeight / 21.333333333333332),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                                                        
                                                                        
                                                                        
                                                                        child: Widget_I1_692_131_350())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, 0),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0, 0),
                                                                        margin: EdgeInsets.fromLTRB(constraints.widthConstraints().maxWidth / 21.333333333333332, constraints.heightConstraints().maxHeight / 21.333333333333332, constraints.widthConstraints().maxWidth / 21.333333333333332, constraints.heightConstraints().maxHeight / 21.333333333333332),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                                                        
                                                                        
                                                                        
                                                                        child: Widget_I1_692_131_351())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, 0),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0, 0),
                                                                        margin: EdgeInsets.fromLTRB(constraints.widthConstraints().maxWidth / 32, constraints.heightConstraints().maxHeight / 32, constraints.widthConstraints().maxWidth / 32, constraints.heightConstraints().maxHeight / 32),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                                                        
                                                                        
                                                                        
                                                                        child: Widget_I1_692_131_352())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, 0),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0, 0),
                                                                        margin: EdgeInsets.fromLTRB(constraints.widthConstraints().maxWidth / 9.142857142857142, constraints.heightConstraints().maxHeight / 9.142857142857142, constraints.widthConstraints().maxWidth / 9.142857142857142, constraints.heightConstraints().maxHeight / 9.142857142857142),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                                                        
                                                                        
                                                                        
                                                                        child: Widget_I1_692_131_353())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, 0),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0, 0),
                                                                        margin: EdgeInsets.fromLTRB(constraints.widthConstraints().maxWidth / 6.4, constraints.heightConstraints().maxHeight / 6.4, constraints.widthConstraints().maxWidth / 6.4, constraints.heightConstraints().maxHeight / 6.4),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                                                        
                                                                        
                                                                        
                                                                        child: Widget_I1_692_131_354()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            ,
                            )
                            
                            )
                );
            }
        }
        

        class Widget_I1_692_131_354 extends StatefulWidget {
            
        final String nodeName = r'''Scheduled''';
        final String name = r'''Scheduled''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_692_131_354({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_692_131_354 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_692_131_354(properties:properties);
        }
            @override
                _Widget_I1_692_131_354State createState() => _Widget_I1_692_131_354State(this.properties);
            }
            class _Widget_I1_692_131_354State extends BaseState<Widget_I1_692_131_354> {
                bool visible = true;
                bool isLoaded = false;
                double width = 44;
                double height = 44;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Scheduled''', id: 'I1:692;131:354', componentName:r'''Scheduled''');
                
                _Widget_I1_692_131_354State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Scheduled''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Scheduled');
            }            
            
            var painter = Node_I1_692_131_354();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Scheduled''', id: 'I1:692;131:354', widget: this, componentName:r'''Scheduled''');
                ComponentDescendantNotification(name: r'''Scheduled''', id: 'I1:692;131:354', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 23.333332061767578 + 10.333335876464844, maxWidth: 23.333332061767578 + 10.333335876464844,
                                                                        minHeight: 26.666667938232422 + 8.666665077209473, maxHeight: 26.666667938232422 + 8.666665077209473,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(10.333335876464844, 8.666665077209473, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 23.333332061767578,
                                                                        height: 26.666667938232422,
                                                                        
                                                                        child: Widget_I1_692_131_354_81_51()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Clipper_I1_695_131_351 extends CustomClipper<Path> {
            @override
            Path getClip(Size size) {
                var path = parseSvgPathData('''M58 29C58 45.0163 45.0163 58 29 58C12.9837 58 0 45.0163 0 29C0 12.9837 12.9837 0 29 0C45.0163 0 58 12.9837 58 29Z''');
                                path.fillType = PathFillType.nonZero;
                return path;
            }
            @override
            bool shouldReclip(CustomClipper<Path> oldClipper) => false;
          }
        

        class Widget_1_695 extends StatefulWidget {
            
        final String nodeName = r'''Icon''';
        final String name = r'''Icon''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_695({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_695 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_695(properties:properties);
        }
            @override
                _Widget_1_695State createState() => _Widget_1_695State(this.properties);
            }
            class _Widget_1_695State extends BaseState<Widget_1_695> {
                bool visible = true;
                bool isLoaded = false;
                double width = 64;
                double height = 64;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Icon''', id: '1:695', componentName:r'''Icon''');
                
                _Widget_1_695State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Icon''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Icon');
            }            
            
            var painter = Node_1_695();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Icon''', id: '1:695', widget: this, componentName:r'''Icon''');
                ComponentDescendantNotification(name: r'''Icon''', id: '1:695', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: GestureDetector(
                                onTap:() {
                                    
            if(triggersBuiltInEvents) {
                // if(Navigator.canPop(context)){
                //     Navigator.pop(context);
                // }
                globals.navigatorKey.currentState?.pushReplacement(
                    PageRouteBuilder(
                        pageBuilder: (context, animation1, animation2) => Widget_1_582(),
                        
                    ),
                );
            }
            
                                },
                                child: 
                            ClipPath(
                                clipper: Clipper_I1_695_131_351(),
                                child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 64,
                                height: 64,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, 0),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0, 0),
                                                                        margin: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                                                        
                                                                        
                                                                        
                                                                        child: Widget_I1_695_131_349())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, 0),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0, 0),
                                                                        margin: EdgeInsets.fromLTRB(constraints.widthConstraints().maxWidth / 21.333333333333332, constraints.heightConstraints().maxHeight / 21.333333333333332, constraints.widthConstraints().maxWidth / 21.333333333333332, constraints.heightConstraints().maxHeight / 21.333333333333332),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                                                        
                                                                        
                                                                        
                                                                        child: Widget_I1_695_131_350())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, 0),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0, 0),
                                                                        margin: EdgeInsets.fromLTRB(constraints.widthConstraints().maxWidth / 21.333333333333332, constraints.heightConstraints().maxHeight / 21.333333333333332, constraints.widthConstraints().maxWidth / 21.333333333333332, constraints.heightConstraints().maxHeight / 21.333333333333332),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                                                        
                                                                        
                                                                        
                                                                        child: Widget_I1_695_131_351())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, 0),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0, 0),
                                                                        margin: EdgeInsets.fromLTRB(constraints.widthConstraints().maxWidth / 32, constraints.heightConstraints().maxHeight / 32, constraints.widthConstraints().maxWidth / 32, constraints.heightConstraints().maxHeight / 32),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                                                        
                                                                        
                                                                        
                                                                        child: Widget_I1_695_131_352())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, 0),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0, 0),
                                                                        margin: EdgeInsets.fromLTRB(constraints.widthConstraints().maxWidth / 9.142857142857142, constraints.heightConstraints().maxHeight / 9.142857142857142, constraints.widthConstraints().maxWidth / 9.142857142857142, constraints.heightConstraints().maxHeight / 9.142857142857142),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                                                        
                                                                        
                                                                        
                                                                        child: Widget_I1_695_131_353())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, 0),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0, 0),
                                                                        margin: EdgeInsets.fromLTRB(constraints.widthConstraints().maxWidth / 6.4, constraints.heightConstraints().maxHeight / 6.4, constraints.widthConstraints().maxWidth / 6.4, constraints.heightConstraints().maxHeight / 6.4),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                                                        
                                                                        
                                                                        
                                                                        child: Widget_I1_695_131_354()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            ,
                            )
                            
                            )
                );
            }
        }
        

        class Widget_I1_695_131_354 extends StatefulWidget {
            
        final String nodeName = r'''History''';
        final String name = r'''History''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_695_131_354({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_695_131_354 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_695_131_354(properties:properties);
        }
            @override
                _Widget_I1_695_131_354State createState() => _Widget_I1_695_131_354State(this.properties);
            }
            class _Widget_I1_695_131_354State extends BaseState<Widget_I1_695_131_354> {
                bool visible = true;
                bool isLoaded = false;
                double width = 44;
                double height = 44;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''History''', id: 'I1:695;131:354', componentName:r'''History''');
                
                _Widget_I1_695_131_354State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''History''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'History');
            }            
            
            var painter = Node_I1_695_131_354();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''History''', id: 'I1:695;131:354', widget: this, componentName:r'''History''');
                ComponentDescendantNotification(name: r'''History''', id: 'I1:695;131:354', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 23.33313751220703 + 10.333333015441895, maxWidth: 23.33313751220703 + 10.333333015441895,
                                                                        minHeight: 23.332019805908203 + 10.333333015441895, maxHeight: 23.332019805908203 + 10.333333015441895,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(10.333333015441895, 10.333333015441895, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 23.33313751220703,
                                                                        height: 23.332019805908203,
                                                                        
                                                                        child: Widget_I1_695_131_354_81_62()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_12_106 extends StatefulWidget {
            
        final String nodeName = r'''Android Large - 1''';
        final String name = r'''Android Large - 1''';
        final String componentType = r'''Screens''';
        final Map<String, dynamic> properties;
        
        Widget_12_106({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_12_106 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_12_106(properties:properties);
        }
            @override
                _Widget_12_106State createState() => _Widget_12_106State(this.properties);
            }
            class _Widget_12_106State extends BaseState<Widget_12_106> {
                bool visible = true;
                bool isLoaded = false;
                double width = 360;
                double height = 800;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Android Large - 1''', id: '12:106', componentName:r'''Android Large - 1''');
                
                _Widget_12_106State(Map<String, dynamic> props){
                    globals.elementInstances.clear();
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
                        globals.currentScreenName = r'''Android Large - 1''';
                        elem = globals.Elem(name: r'''Android Large - 1''', id: '12:106', widget: this, componentName:r'''Android Large - 1''');
                        globals.triggerEvent('pageLoad', r'''Android Large - 1''', {'target':elem});
                        WidgetsBinding.instance.addPostFrameCallback((_) => widgetDidLoad());
                        
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Android Large - 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Android Large - 1');
            }            
            
            var painter = Node_12_106();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Android Large - 1''', id: '12:106', widget: this, componentName:r'''Android Large - 1''');
                ComponentDescendantNotification(name: r'''Android Large - 1''', id: '12:106', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                           Scaffold(
                             backgroundColor: Color.fromRGBO(255, 255, 255, 0),                      
                             body: SafeArea(
                                 child: 
                             
                            SingleChildScrollView(
                                scrollDirection: Axis.vertical,
                                child: RepaintBoundary(
                                    child:  SizedBox(
                                        width: mq_width,
                                        child: FittedBox(fit: BoxFit.fitWidth, child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 360,
                                height: 800,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 390 + 0, maxWidth: 390 + 0,
                                                                        minHeight: 44 + 33, maxHeight: 44 + 33,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(0, 33, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 390,
                                                                        height: 44,
                                                                        
                                                                        child: Widget_1_628())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 244 + 58, maxWidth: 244 + 58,
                                                                        minHeight: 244 + 149, maxHeight: 244 + 149,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(58, 149, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 244,
                                                                        height: 244,
                                                                        
                                                                        child: Widget_1_667())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 226 + 67, maxWidth: 226 + 67,
                                                                        minHeight: 44 + 436, maxHeight: 44 + 436,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(67, 436, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 226,
                                                                        height: 44,
                                                                        
                                                                        child: Widget_1_668())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 144 + 26, maxWidth: 144 + 26,
                                                                        minHeight: 164 + 511, maxHeight: 164 + 511,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(26, 511, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 144,
                                                                        height: 164,
                                                                        
                                                                        child: Widget_1_672())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 144 + 190, maxWidth: 144 + 190,
                                                                        minHeight: 164 + 511, maxHeight: 164 + 511,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(190, 511, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 144,
                                                                        height: 164,
                                                                        
                                                                        child: Widget_1_678())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 100 + 12, maxWidth: 100 + 12,
                                                                        minHeight: 100 + 725, maxHeight: 100 + 725,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(12, 725, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 100,
                                                                        height: 100,
                                                                        
                                                                        child: 
                                                                    TransparentPointer(
                                                                        child: Widget_1_776()
                                                                    )
                                                                    )), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 66 + 10, maxWidth: 66 + 10,
                                                                        minHeight: 87 + 706, maxHeight: 87 + 706,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(10, 706, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 66,
                                                                        height: 87,
                                                                        
                                                                        child: Widget_1_685())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 66 + 101.33333587646484, maxWidth: 66 + 101.33333587646484,
                                                                        minHeight: 87 + 706, maxHeight: 87 + 706,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(101.33333587646484, 706, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 66,
                                                                        height: 87,
                                                                        
                                                                        child: Widget_1_688())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 66 + 192.6666717529297, maxWidth: 66 + 192.6666717529297,
                                                                        minHeight: 87 + 706, maxHeight: 87 + 706,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(192.6666717529297, 706, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 66,
                                                                        height: 87,
                                                                        
                                                                        child: Widget_1_691())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 66 + 284, maxWidth: 66 + 284,
                                                                        minHeight: 87 + 706, maxHeight: 87 + 706,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(284, 706, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 66,
                                                                        height: 87,
                                                                        
                                                                        child: Widget_1_694()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        ))))
                            ),
                             ),
                                    
                );
            }
        }
        

        class Widget_1_628 extends StatefulWidget {
            
        final String nodeName = r'''TopNavigation''';
        final String name = r'''TopNavigation''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_628({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_628 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_628(properties:properties);
        }
            @override
                _Widget_1_628State createState() => _Widget_1_628State(this.properties);
            }
            class _Widget_1_628State extends BaseState<Widget_1_628> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 44;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''TopNavigation''', id: '1:628', componentName:r'''TopNavigation''');
                
                _Widget_1_628State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''TopNavigation''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'TopNavigation');
            }            
            
            var painter = Node_1_628();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''TopNavigation''', id: '1:628', widget: this, componentName:r'''TopNavigation''');
                ComponentDescendantNotification(name: r'''TopNavigation''', id: '1:628', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, -25, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 390,
                                height: 44,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 10,
                    //runSpacing: 10, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_1_645(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_645 extends StatefulWidget {
            
        final String nodeName = r'''Content''';
        final String name = r'''Content''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_645({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_645 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_645(properties:properties);
        }
            @override
                _Widget_1_645State createState() => _Widget_1_645State(this.properties);
            }
            class _Widget_1_645State extends BaseState<Widget_1_645> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 44;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Content''', id: '1:645', componentName:r'''Content''');
                
                _Widget_1_645State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Content''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Content');
            }            
            
            var painter = Node_1_645();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Content''', id: '1:645', widget: this, componentName:r'''Content''');
                ComponentDescendantNotification(name: r'''Content''', id: '1:645', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 390,
                                height: 44,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.start,
                    direction: Axis.vertical,
                    //spacing: 8,
                    //runSpacing: 8, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_1_646(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    SizedBox(height: 8), 
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_1_655(key:UniqueKey())
                                                                    )
                                                                    
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_1_646 extends StatefulWidget {
            
        final String nodeName = r'''Left, Title, Right''';
        final String name = r'''Left, Title, Right''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_646({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_646 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_646(properties:properties);
        }
            @override
                _Widget_1_646State createState() => _Widget_1_646State(this.properties);
            }
            class _Widget_1_646State extends BaseState<Widget_1_646> {
                bool visible = true;
                bool isLoaded = false;
                double width = 390;
                double height = 44;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Left, Title, Right''', id: '1:646', componentName:r'''Left, Title, Right''');
                
                _Widget_1_646State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Left, Title, Right''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Left, Title, Right');
            }            
            
            var painter = Node_1_646();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Left, Title, Right''', id: '1:646', widget: this, componentName:r'''Left, Title, Right''');
                ComponentDescendantNotification(name: r'''Left, Title, Right''', id: '1:646', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 390,
                                height: 44,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.spaceBetween,
                    crossAxisAlignment: CrossAxisAlignment.end,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_1_647(key:UniqueKey()), 
                                                    SizedBox(width: 0), 
                                                    Widget_1_650(key:UniqueKey()), 
                                                    SizedBox(width: 0), 
                                                    Widget_1_652(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        ))
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_1_647 extends StatefulWidget {
            
        final String nodeName = r'''✏️ Left Accessory''';
        final String name = r'''✏️ Left Accessory''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_647({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_647 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_647(properties:properties);
        }
            @override
                _Widget_1_647State createState() => _Widget_1_647State(this.properties);
            }
            class _Widget_1_647State extends BaseState<Widget_1_647> {
                bool visible = true;
                bool isLoaded = false;
                double width = 195;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''✏️ Left Accessory''', id: '1:647', componentName:r'''✏️ Left Accessory''');
                
                _Widget_1_647State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''✏️ Left Accessory''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, '✏️ Left Accessory');
            }            
            
            var painter = Node_1_647();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''✏️ Left Accessory''', id: '1:647', widget: this, componentName:r'''✏️ Left Accessory''');
                ComponentDescendantNotification(name: r'''✏️ Left Accessory''', id: '1:647', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 195,
                                height: 24,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.end,
                    direction: Axis.horizontal,
                    //spacing: 10,
                    //runSpacing: 10, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_1_648(key:UniqueKey()), 
                                                    SizedBox(width: 10), 
                                                    Widget_1_649(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_1_648 extends StatefulWidget {
            
        final String nodeName = r'''Icon / chevron.left''';
        final String name = r'''Icon / chevron.left''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_648({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_648 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_648(properties:properties);
        }
            @override
                _Widget_1_648State createState() => _Widget_1_648State(this.properties);
            }
            class _Widget_1_648State extends BaseState<Widget_1_648> {
                bool visible = true;
                bool isLoaded = false;
                double width = 18;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Icon / chevron.left''', id: '1:648', componentName:r'''Icon / chevron.left''');
                
                _Widget_1_648State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''􀆉''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((24/24).floor()) <=1 ? 1 : (24/24).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 23,
                                fontFamily: 'SF Pro Display',
                                fontWeight: FontWeight.w500,
                                letterSpacing: 0.3799999952316284,
                                fontStyle: FontStyle.normal,
                                height: 1.0434782608695652,
                                color: Color.fromRGBO(60, 60, 67, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Display',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Icon / chevron.left''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Icon / chevron.left');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Icon / chevron.left''', id: '1:648', widget: this, componentName:r'''Icon / chevron.left''');
                ComponentDescendantNotification(name: r'''Icon / chevron.left''', id: '1:648', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 18,
                                height: 24,
                                alignment: Alignment(1, 0),
                                child: Align(
                                    alignment: Alignment(0, -1),
                                    child: this.textWidgets)
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_1_649 extends StatefulWidget {
            
        final String nodeName = r'''✏️ Left Title''';
        final String name = r'''✏️ Left Title''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_649({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_649 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_649(properties:properties);
        }
            @override
                _Widget_1_649State createState() => _Widget_1_649State(this.properties);
            }
            class _Widget_1_649State extends BaseState<Widget_1_649> {
                bool visible = false;
                bool isLoaded = false;
                double width = 78;
                double height = 33;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''✏️ Left Title''', id: '1:649', componentName:r'''✏️ Left Title''');
                
                _Widget_1_649State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Home''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((33/33.4140625).floor()) <=1 ? 1 : (33/33.4140625).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 28,
                                fontFamily: 'SF Pro Display',
                                fontWeight: FontWeight.w700,
                                letterSpacing: 0.36000001430511475,
                                fontStyle: FontStyle.normal,
                                height: 1.1785714285714286,
                                color: Color.fromRGBO(0, 0, 0, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Display',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''✏️ Left Title''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, '✏️ Left Title');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''✏️ Left Title''', id: '1:649', widget: this, componentName:r'''✏️ Left Title''');
                ComponentDescendantNotification(name: r'''✏️ Left Title''', id: '1:649', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 78,
                                height: 33,
                                alignment: Alignment(-1, -1),
                                child: Align(
                                    alignment: Alignment(-1, -1),
                                    child: this.textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_650 extends StatefulWidget {
            
        final String nodeName = r'''✏️ Title''';
        final String name = r'''✏️ Title''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_650({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_650 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_650(properties:properties);
        }
            @override
                _Widget_1_650State createState() => _Widget_1_650State(this.properties);
            }
            class _Widget_1_650State extends BaseState<Widget_1_650> {
                bool visible = true;
                bool isLoaded = false;
                double width = 130;
                double height = 22;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''✏️ Title''', id: '1:650', componentName:r'''✏️ Title''');
                
                _Widget_1_650State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''✏️ Title''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, '✏️ Title');
            }            
            
            var painter = Node_1_650();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''✏️ Title''', id: '1:650', widget: this, componentName:r'''✏️ Title''');
                ComponentDescendantNotification(name: r'''✏️ Title''', id: '1:650', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 130,
                                height: 22,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 10,
                    //runSpacing: 10, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_1_651(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_1_651 extends StatefulWidget {
            
        final String nodeName = r'''✏️ Title''';
        final String name = r'''✏️ Title''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_651({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_651 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_651(properties:properties);
        }
            @override
                _Widget_1_651State createState() => _Widget_1_651State(this.properties);
            }
            class _Widget_1_651State extends BaseState<Widget_1_651> {
                bool visible = true;
                bool isLoaded = false;
                double width = 130;
                double height = 22;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''✏️ Title''', id: '1:651', componentName:r'''✏️ Title''');
                
                _Widget_1_651State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Thermostat''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((22/22).floor()) <=1 ? 1 : (22/22).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 17,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w600,
                                letterSpacing: -0.40799999237060547,
                                fontStyle: FontStyle.normal,
                                height: 1.2941176470588236,
                                color: Color.fromRGBO(0, 0, 0, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''✏️ Title''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, '✏️ Title');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''✏️ Title''', id: '1:651', widget: this, componentName:r'''✏️ Title''');
                ComponentDescendantNotification(name: r'''✏️ Title''', id: '1:651', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 130,
                                height: 22,
                                alignment: Alignment(0, -1),
                                child: Align(
                                    alignment: Alignment(0, 0),
                                    child: this.textWidgets)
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_1_652 extends StatefulWidget {
            
        final String nodeName = r'''✏️ Right Accessory''';
        final String name = r'''✏️ Right Accessory''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_652({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_652 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_652(properties:properties);
        }
            @override
                _Widget_1_652State createState() => _Widget_1_652State(this.properties);
            }
            class _Widget_1_652State extends BaseState<Widget_1_652> {
                bool visible = true;
                bool isLoaded = false;
                double width = 195;
                double height = 36;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''✏️ Right Accessory''', id: '1:652', componentName:r'''✏️ Right Accessory''');
                
                _Widget_1_652State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''✏️ Right Accessory''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, '✏️ Right Accessory');
            }            
            
            var painter = Node_1_652();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''✏️ Right Accessory''', id: '1:652', widget: this, componentName:r'''✏️ Right Accessory''');
                ComponentDescendantNotification(name: r'''✏️ Right Accessory''', id: '1:652', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 195,
                                height: 36,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.end,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 10,
                    //runSpacing: 10, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_1_653(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_1_653 extends StatefulWidget {
            
        final String nodeName = r'''Frame 2''';
        final String name = r'''Frame 2''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_653({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_653 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_653(properties:properties);
        }
            @override
                _Widget_1_653State createState() => _Widget_1_653State(this.properties);
            }
            class _Widget_1_653State extends BaseState<Widget_1_653> {
                bool visible = true;
                bool isLoaded = false;
                double width = 36;
                double height = 36;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Frame 2''', id: '1:653', componentName:r'''Frame 2''');
                
                _Widget_1_653State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Frame 2''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Frame 2');
            }            
            
            var painter = Node_1_653();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Frame 2''', id: '1:653', widget: this, componentName:r'''Frame 2''');
                ComponentDescendantNotification(name: r'''Frame 2''', id: '1:653', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 36,
                                height: 36,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 21 + 8, maxWidth: 21 + 8,
                                                                        minHeight: 22 + 7, maxHeight: 22 + 7,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(8, 7, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 21,
                                                                        height: 22,
                                                                        
                                                                        child: Widget_1_654()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_654 extends StatefulWidget {
            
        final String nodeName = r'''✏️ Right Title''';
        final String name = r'''✏️ Right Title''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_654({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_654 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_654(properties:properties);
        }
            @override
                _Widget_1_654State createState() => _Widget_1_654State(this.properties);
            }
            class _Widget_1_654State extends BaseState<Widget_1_654> {
                bool visible = true;
                bool isLoaded = false;
                double width = 21;
                double height = 22;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''✏️ Right Title''', id: '1:654', componentName:r'''✏️ Right Title''');
                
                _Widget_1_654State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''􀣋''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((22/22).floor()) <=1 ? 1 : (22/22).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 17,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w400,
                                letterSpacing: -0.40799999237060547,
                                fontStyle: FontStyle.normal,
                                height: 1.2941176470588236,
                                color: Color.fromRGBO(60, 60, 67, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''✏️ Right Title''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, '✏️ Right Title');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''✏️ Right Title''', id: '1:654', widget: this, componentName:r'''✏️ Right Title''');
                ComponentDescendantNotification(name: r'''✏️ Right Title''', id: '1:654', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 21,
                                height: 22,
                                alignment: Alignment(-1, -1),
                                child: Align(
                                    alignment: Alignment(0, 0),
                                    child: this.textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_655 extends StatefulWidget {
            
        final String nodeName = r'''Left, Title, Right''';
        final String name = r'''Left, Title, Right''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_655({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_655 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_655(properties:properties);
        }
            @override
                _Widget_1_655State createState() => _Widget_1_655State(this.properties);
            }
            class _Widget_1_655State extends BaseState<Widget_1_655> {
                bool visible = false;
                bool isLoaded = false;
                double width = 390;
                double height = 42;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Left, Title, Right''', id: '1:655', componentName:r'''Left, Title, Right''');
                
                _Widget_1_655State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Left, Title, Right''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Left, Title, Right');
            }            
            
            var painter = Node_1_655();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Left, Title, Right''', id: '1:655', widget: this, componentName:r'''Left, Title, Right''');
                ComponentDescendantNotification(name: r'''Left, Title, Right''', id: '1:655', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 390,
                                height: 42,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 0,
                    //runSpacing: 0, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_1_656(key:UniqueKey()), 
                                                    SizedBox(width: 0), 
                                                    Widget_1_659(key:UniqueKey()), 
                                                    SizedBox(width: 0), 
                                                    Widget_1_661(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        ))
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_1_656 extends StatefulWidget {
            
        final String nodeName = r'''✏️ Left Accessory''';
        final String name = r'''✏️ Left Accessory''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_656({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_656 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_656(properties:properties);
        }
            @override
                _Widget_1_656State createState() => _Widget_1_656State(this.properties);
            }
            class _Widget_1_656State extends BaseState<Widget_1_656> {
                bool visible = true;
                bool isLoaded = false;
                double width = 195;
                double height = 42;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''✏️ Left Accessory''', id: '1:656', componentName:r'''✏️ Left Accessory''');
                
                _Widget_1_656State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''✏️ Left Accessory''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, '✏️ Left Accessory');
            }            
            
            var painter = Node_1_656();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''✏️ Left Accessory''', id: '1:656', widget: this, componentName:r'''✏️ Left Accessory''');
                ComponentDescendantNotification(name: r'''✏️ Left Accessory''', id: '1:656', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 195,
                                height: 42,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 5,
                    //runSpacing: 5, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_1_657(key:UniqueKey()), 
                                                    SizedBox(width: 5), 
                                                    Widget_1_658(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_1_657 extends StatefulWidget {
            
        final String nodeName = r'''Icon / chevron.left''';
        final String name = r'''Icon / chevron.left''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_657({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_657 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_657(properties:properties);
        }
            @override
                _Widget_1_657State createState() => _Widget_1_657State(this.properties);
            }
            class _Widget_1_657State extends BaseState<Widget_1_657> {
                bool visible = false;
                bool isLoaded = false;
                double width = 18;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Icon / chevron.left''', id: '1:657', componentName:r'''Icon / chevron.left''');
                
                _Widget_1_657State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''􀆉''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((24/24).floor()) <=1 ? 1 : (24/24).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 23,
                                fontFamily: 'SF Pro Display',
                                fontWeight: FontWeight.w500,
                                letterSpacing: 0.3799999952316284,
                                fontStyle: FontStyle.normal,
                                height: 1.0434782608695652,
                                color: Color.fromRGBO(0, 122, 255, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Display',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Icon / chevron.left''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Icon / chevron.left');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Icon / chevron.left''', id: '1:657', widget: this, componentName:r'''Icon / chevron.left''');
                ComponentDescendantNotification(name: r'''Icon / chevron.left''', id: '1:657', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 18,
                                height: 24,
                                alignment: Alignment(1, 0),
                                child: Align(
                                    alignment: Alignment(0, -1),
                                    child: this.textWidgets)
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_1_658 extends StatefulWidget {
            
        final String nodeName = r'''✏️ Left Title''';
        final String name = r'''✏️ Left Title''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_658({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_658 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_658(properties:properties);
        }
            @override
                _Widget_1_658State createState() => _Widget_1_658State(this.properties);
            }
            class _Widget_1_658State extends BaseState<Widget_1_658> {
                bool visible = true;
                bool isLoaded = false;
                double width = 151;
                double height = 24;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''✏️ Left Title''', id: '1:658', componentName:r'''✏️ Left Title''');
                
                _Widget_1_658State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Family Members''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((24/24).floor()) <=1 ? 1 : (24/24).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 20,
                                fontFamily: 'SF Pro Display',
                                fontWeight: FontWeight.w600,
                                letterSpacing: 0.3799999952316284,
                                fontStyle: FontStyle.normal,
                                height: 1.2,
                                color: Color.fromRGBO(60, 60, 67, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Display',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''✏️ Left Title''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, '✏️ Left Title');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''✏️ Left Title''', id: '1:658', widget: this, componentName:r'''✏️ Left Title''');
                ComponentDescendantNotification(name: r'''✏️ Left Title''', id: '1:658', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 151,
                                height: 24,
                                alignment: Alignment(-1, -1),
                                child: Align(
                                    alignment: Alignment(-1, 0),
                                    child: this.textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_659 extends StatefulWidget {
            
        final String nodeName = r'''✏️ Title''';
        final String name = r'''✏️ Title''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_659({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_659 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_659(properties:properties);
        }
            @override
                _Widget_1_659State createState() => _Widget_1_659State(this.properties);
            }
            class _Widget_1_659State extends BaseState<Widget_1_659> {
                bool visible = false;
                bool isLoaded = false;
                double width = 130;
                double height = 22;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''✏️ Title''', id: '1:659', componentName:r'''✏️ Title''');
                
                _Widget_1_659State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''✏️ Title''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, '✏️ Title');
            }            
            
            var painter = Node_1_659();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''✏️ Title''', id: '1:659', widget: this, componentName:r'''✏️ Title''');
                ComponentDescendantNotification(name: r'''✏️ Title''', id: '1:659', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 130,
                                height: 22,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 10,
                    //runSpacing: 10, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_1_660(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_1_660 extends StatefulWidget {
            
        final String nodeName = r'''✏️ Title''';
        final String name = r'''✏️ Title''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_660({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_660 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_660(properties:properties);
        }
            @override
                _Widget_1_660State createState() => _Widget_1_660State(this.properties);
            }
            class _Widget_1_660State extends BaseState<Widget_1_660> {
                bool visible = true;
                bool isLoaded = false;
                double width = 130;
                double height = 22;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''✏️ Title''', id: '1:660', componentName:r'''✏️ Title''');
                
                _Widget_1_660State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Title''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((22/22).floor()) <=1 ? 1 : (22/22).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 17,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w600,
                                letterSpacing: -0.40799999237060547,
                                fontStyle: FontStyle.normal,
                                height: 1.2941176470588236,
                                color: Color.fromRGBO(0, 0, 0, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''✏️ Title''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, '✏️ Title');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''✏️ Title''', id: '1:660', widget: this, componentName:r'''✏️ Title''');
                ComponentDescendantNotification(name: r'''✏️ Title''', id: '1:660', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 130,
                                height: 22,
                                alignment: Alignment(0, -1),
                                child: Align(
                                    alignment: Alignment(0, 0),
                                    child: this.textWidgets)
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_1_661 extends StatefulWidget {
            
        final String nodeName = r'''✏️ Right Accessory''';
        final String name = r'''✏️ Right Accessory''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_661({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_661 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_661(properties:properties);
        }
            @override
                _Widget_1_661State createState() => _Widget_1_661State(this.properties);
            }
            class _Widget_1_661State extends BaseState<Widget_1_661> {
                bool visible = true;
                bool isLoaded = false;
                double width = 195;
                double height = 42;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''✏️ Right Accessory''', id: '1:661', componentName:r'''✏️ Right Accessory''');
                
                _Widget_1_661State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''✏️ Right Accessory''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, '✏️ Right Accessory');
            }            
            
            var painter = Node_1_661();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''✏️ Right Accessory''', id: '1:661', widget: this, componentName:r'''✏️ Right Accessory''');
                ComponentDescendantNotification(name: r'''✏️ Right Accessory''', id: '1:661', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 195,
                                height: 42,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.horizontal,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.end,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.horizontal,
                    //spacing: 10,
                    //runSpacing: 10, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    Widget_1_662(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_1_662 extends StatefulWidget {
            
        final String nodeName = r'''Frame 2''';
        final String name = r'''Frame 2''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_662({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_662 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_662(properties:properties);
        }
            @override
                _Widget_1_662State createState() => _Widget_1_662State(this.properties);
            }
            class _Widget_1_662State extends BaseState<Widget_1_662> {
                bool visible = true;
                bool isLoaded = false;
                double width = 179;
                double height = 36;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Frame 2''', id: '1:662', componentName:r'''Frame 2''');
                
                _Widget_1_662State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Frame 2''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Frame 2');
            }            
            
            var painter = Node_1_662();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Frame 2''', id: '1:662', widget: this, componentName:r'''Frame 2''');
                ComponentDescendantNotification(name: r'''Frame 2''', id: '1:662', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 179,
                                height: 36,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 27 + 152, maxWidth: 27 + 152,
                                                                        minHeight: 27 + 4, maxHeight: 27 + 4,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(152, 4, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 27,
                                                                        height: 27,
                                                                        
                                                                        child: Widget_1_663())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 27 + 132, maxWidth: 27 + 132,
                                                                        minHeight: 27 + 4, maxHeight: 27 + 4,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(132, 4, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 27,
                                                                        height: 27,
                                                                        
                                                                        child: Widget_1_664())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 27 + 112, maxWidth: 27 + 112,
                                                                        minHeight: 27 + 4, maxHeight: 27 + 4,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(112, 4, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 27,
                                                                        height: 27,
                                                                        
                                                                        child: Widget_1_665())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 27 + 92, maxWidth: 27 + 92,
                                                                        minHeight: 27 + 4, maxHeight: 27 + 4,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(92, 4, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 27,
                                                                        height: 27,
                                                                        
                                                                        child: Widget_1_666()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_663 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 1''';
        final String name = r'''Ellipse 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_663({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_663 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_663(properties:properties);
        }
            @override
                _Widget_1_663State createState() => _Widget_1_663State(this.properties);
            }
            class _Widget_1_663State extends BaseState<Widget_1_663> {
                bool visible = true;
                bool isLoaded = false;
                double width = 27;
                double height = 27;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 1''', id: '1:663', componentName:r'''Ellipse 1''');
                
                _Widget_1_663State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 1');
            }            
            
                    var image = Image(
                        image: AssetImage('images/1_663', package:'zephyra_1390242811_f2f'),
                    );
                    @override
                    void didChangeDependencies() {
                        precacheImage(image.image, context);
                        super.didChangeDependencies();
                    }
                    
            var painter = Node_1_663();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 1''', id: '1:663', widget: this, componentName:r'''Ellipse 1''');
                ComponentDescendantNotification(name: r'''Ellipse 1''', id: '1:663', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                        if(properties.containsKey('image')){
                            image = Image.network(properties['image'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageAsset')){
                            image = Image.asset(properties['imageAsset'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageFile')){
                            image = Image.file(File(properties['imageFile'] as String), fit: BoxFit.contain,);
                        }
                        
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 27,
                                height: 27,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    
                                                            RepaintBoundary( child: 
                                                                Transform(
                                                                    transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                                                                    alignment: FractionalOffset.center,
                                                                    child: FittedBox(
                                                                        child: image,
                                                                        fit: BoxFit.cover,
                                                                    ),
                                                                )
                                                            )
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_664 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 2''';
        final String name = r'''Ellipse 2''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_664({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_664 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_664(properties:properties);
        }
            @override
                _Widget_1_664State createState() => _Widget_1_664State(this.properties);
            }
            class _Widget_1_664State extends BaseState<Widget_1_664> {
                bool visible = true;
                bool isLoaded = false;
                double width = 27;
                double height = 27;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 2''', id: '1:664', componentName:r'''Ellipse 2''');
                
                _Widget_1_664State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 2''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 2');
            }            
            
                    var image = Image(
                        image: AssetImage('images/1_664', package:'zephyra_1390242811_f2f'),
                    );
                    @override
                    void didChangeDependencies() {
                        precacheImage(image.image, context);
                        super.didChangeDependencies();
                    }
                    
            var painter = Node_1_664();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 2''', id: '1:664', widget: this, componentName:r'''Ellipse 2''');
                ComponentDescendantNotification(name: r'''Ellipse 2''', id: '1:664', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                        if(properties.containsKey('image')){
                            image = Image.network(properties['image'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageAsset')){
                            image = Image.asset(properties['imageAsset'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageFile')){
                            image = Image.file(File(properties['imageFile'] as String), fit: BoxFit.contain,);
                        }
                        
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 27,
                                height: 27,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    
                                                            RepaintBoundary( child: 
                                                                Transform(
                                                                    transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                                                                    alignment: FractionalOffset.center,
                                                                    child: FittedBox(
                                                                        child: image,
                                                                        fit: BoxFit.cover,
                                                                    ),
                                                                )
                                                            )
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_665 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 3''';
        final String name = r'''Ellipse 3''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_665({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_665 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_665(properties:properties);
        }
            @override
                _Widget_1_665State createState() => _Widget_1_665State(this.properties);
            }
            class _Widget_1_665State extends BaseState<Widget_1_665> {
                bool visible = true;
                bool isLoaded = false;
                double width = 27;
                double height = 27;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 3''', id: '1:665', componentName:r'''Ellipse 3''');
                
                _Widget_1_665State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 3''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 3');
            }            
            
                    var image = Image(
                        image: AssetImage('images/1_665', package:'zephyra_1390242811_f2f'),
                    );
                    @override
                    void didChangeDependencies() {
                        precacheImage(image.image, context);
                        super.didChangeDependencies();
                    }
                    
            var painter = Node_1_665();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 3''', id: '1:665', widget: this, componentName:r'''Ellipse 3''');
                ComponentDescendantNotification(name: r'''Ellipse 3''', id: '1:665', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                        if(properties.containsKey('image')){
                            image = Image.network(properties['image'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageAsset')){
                            image = Image.asset(properties['imageAsset'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageFile')){
                            image = Image.file(File(properties['imageFile'] as String), fit: BoxFit.contain,);
                        }
                        
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 27,
                                height: 27,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    
                                                            RepaintBoundary( child: 
                                                                Transform(
                                                                    transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                                                                    alignment: FractionalOffset.center,
                                                                    child: FittedBox(
                                                                        child: image,
                                                                        fit: BoxFit.cover,
                                                                    ),
                                                                )
                                                            )
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_666 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 4''';
        final String name = r'''Ellipse 4''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_666({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_666 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_666(properties:properties);
        }
            @override
                _Widget_1_666State createState() => _Widget_1_666State(this.properties);
            }
            class _Widget_1_666State extends BaseState<Widget_1_666> {
                bool visible = true;
                bool isLoaded = false;
                double width = 27;
                double height = 27;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 4''', id: '1:666', componentName:r'''Ellipse 4''');
                
                _Widget_1_666State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 4''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 4');
            }            
            
                    var image = Image(
                        image: AssetImage('images/1_666', package:'zephyra_1390242811_f2f'),
                    );
                    @override
                    void didChangeDependencies() {
                        precacheImage(image.image, context);
                        super.didChangeDependencies();
                    }
                    
            var painter = Node_1_666();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 4''', id: '1:666', widget: this, componentName:r'''Ellipse 4''');
                ComponentDescendantNotification(name: r'''Ellipse 4''', id: '1:666', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                        if(properties.containsKey('image')){
                            image = Image.network(properties['image'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageAsset')){
                            image = Image.asset(properties['imageAsset'] as String, fit: BoxFit.contain,);
                        }else if(properties.containsKey('imageFile')){
                            image = Image.file(File(properties['imageFile'] as String), fit: BoxFit.contain,);
                        }
                        
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 27,
                                height: 27,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    
                                                            RepaintBoundary( child: 
                                                                Transform(
                                                                    transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                                                                    alignment: FractionalOffset.center,
                                                                    child: FittedBox(
                                                                        child: image,
                                                                        fit: BoxFit.cover,
                                                                    ),
                                                                )
                                                            )
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_I1_667_135_350 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 1433''';
        final String name = r'''Ellipse 1433''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_667_135_350({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_667_135_350 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_667_135_350(properties:properties);
        }
            @override
                _Widget_I1_667_135_350State createState() => _Widget_I1_667_135_350State(this.properties);
            }
            class _Widget_I1_667_135_350State extends BaseState<Widget_I1_667_135_350> {
                bool visible = true;
                bool isLoaded = false;
                double width = 266;
                double height = 133;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 1433''', id: 'I1:667;135:350', componentName:r'''Ellipse 1433''');
                
                _Widget_I1_667_135_350State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 1433''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 1433');
            }            
            
            var painter = Node_I1_667_135_350();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 1433''', id: 'I1:667;135:350', widget: this, componentName:r'''Ellipse 1433''');
                ComponentDescendantNotification(name: r'''Ellipse 1433''', id: 'I1:667;135:350', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, -11, -11, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 266,
                                height: 133,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_I1_667_135_351 extends StatefulWidget {
            
        final String nodeName = r'''Line''';
        final String name = r'''Line''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_667_135_351({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_667_135_351 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_667_135_351(properties:properties);
        }
            @override
                _Widget_I1_667_135_351State createState() => _Widget_I1_667_135_351State(this.properties);
            }
            class _Widget_I1_667_135_351State extends BaseState<Widget_I1_667_135_351> {
                bool visible = true;
                bool isLoaded = false;
                double width = 10;
                double height = 0;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Line''', id: 'I1:667;135:351', componentName:r'''Line''');
                
                _Widget_I1_667_135_351State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Line''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Line');
            }            
            
            var painter = Node_I1_667_135_351();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Line''', id: 'I1:667;135:351', widget: this, componentName:r'''Line''');
                ComponentDescendantNotification(name: r'''Line''', id: 'I1:667;135:351', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, -16, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 10,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_I1_667_135_352 extends StatefulWidget {
            
        final String nodeName = r'''Line''';
        final String name = r'''Line''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_667_135_352({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_667_135_352 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_667_135_352(properties:properties);
        }
            @override
                _Widget_I1_667_135_352State createState() => _Widget_I1_667_135_352State(this.properties);
            }
            class _Widget_I1_667_135_352State extends BaseState<Widget_I1_667_135_352> {
                bool visible = true;
                bool isLoaded = false;
                double width = 10;
                double height = 0;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Line''', id: 'I1:667;135:352', componentName:r'''Line''');
                
                _Widget_I1_667_135_352State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Line''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Line');
            }            
            
            var painter = Node_I1_667_135_352();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Line''', id: 'I1:667;135:352', widget: this, componentName:r'''Line''');
                ComponentDescendantNotification(name: r'''Line''', id: 'I1:667;135:352', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 10,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_I1_667_135_353 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 1''';
        final String name = r'''Ellipse 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_667_135_353({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_667_135_353 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_667_135_353(properties:properties);
        }
            @override
                _Widget_I1_667_135_353State createState() => _Widget_I1_667_135_353State(this.properties);
            }
            class _Widget_I1_667_135_353State extends BaseState<Widget_I1_667_135_353> {
                bool visible = true;
                bool isLoaded = false;
                double width = 244;
                double height = 244;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 1''', id: 'I1:667;135:353', componentName:r'''Ellipse 1''');
                
                _Widget_I1_667_135_353State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 1');
            }            
            
            var painter = Node_I1_667_135_353();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 1''', id: 'I1:667;135:353', widget: this, componentName:r'''Ellipse 1''');
                ComponentDescendantNotification(name: r'''Ellipse 1''', id: 'I1:667;135:353', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 244,
                                height: 244,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Clipper_I1_667_141_117 extends CustomClipper<Path> {
            @override
            Path getClip(Size size) {
                var path = parseSvgPathData('''M189 0L0 0L0 229L44.5 229L189 0Z''');
                                path.fillType = PathFillType.nonZero;
                return path;
            }
            @override
            bool shouldReclip(CustomClipper<Path> oldClipper) => false;
          }
        

        class Widget_I1_667_141_119 extends StatefulWidget {
            
        final String nodeName = r'''Group 1''';
        final String name = r'''Group 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_667_141_119({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_667_141_119 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_667_141_119(properties:properties);
        }
            @override
                _Widget_I1_667_141_119State createState() => _Widget_I1_667_141_119State(this.properties);
            }
            class _Widget_I1_667_141_119State extends BaseState<Widget_I1_667_141_119> {
                bool visible = true;
                bool isLoaded = false;
                double width = 189;
                double height = 229;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Group 1''', id: 'I1:667;141:119', componentName:r'''Group 1''');
                
                _Widget_I1_667_141_119State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Group 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Group 1');
            }            
            
            var painter = Node_I1_667_141_119();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Group 1''', id: 'I1:667;141:119', widget: this, componentName:r'''Group 1''');
                ComponentDescendantNotification(name: r'''Group 1''', id: 'I1:667;141:119', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            ClipPath(
                                clipper: Clipper_I1_667_141_117(),
                                child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 189,
                                height: 229,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 189 + 0, maxWidth: 189 + 0,
                                                                        minHeight: 229 + 0, maxHeight: 229 + 0,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 189,
                                                                        height: 229,
                                                                        
                                                                        child: Widget_I1_667_141_117())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 220 + 5, maxWidth: 220 + 5,
                                                                        minHeight: 220 + 4, maxHeight: 220 + 4,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(5, 4, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 220,
                                                                        height: 220,
                                                                        
                                                                        child: Widget_I1_667_135_354()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            ,
                            )
                            
                );
            }
        }
        

        class Widget_I1_667_141_117 extends StatefulWidget {
            
        final String nodeName = r'''Rectangle 1''';
        final String name = r'''Rectangle 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_667_141_117({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_667_141_117 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_667_141_117(properties:properties);
        }
            @override
                _Widget_I1_667_141_117State createState() => _Widget_I1_667_141_117State(this.properties);
            }
            class _Widget_I1_667_141_117State extends BaseState<Widget_I1_667_141_117> {
                bool visible = true;
                bool isLoaded = false;
                double width = 189;
                double height = 229;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Rectangle 1''', id: 'I1:667;141:117', componentName:r'''Rectangle 1''');
                
                _Widget_I1_667_141_117State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Rectangle 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Rectangle 1');
            }            
            
            var painter = Node_I1_667_141_117();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Rectangle 1''', id: 'I1:667;141:117', widget: this, componentName:r'''Rectangle 1''');
                ComponentDescendantNotification(name: r'''Rectangle 1''', id: 'I1:667;141:117', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 189,
                                height: 229,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_I1_667_135_354 extends StatefulWidget {
            
        final String nodeName = r'''Progress bar''';
        final String name = r'''Progress bar''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_667_135_354({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_667_135_354 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_667_135_354(properties:properties);
        }
            @override
                _Widget_I1_667_135_354State createState() => _Widget_I1_667_135_354State(this.properties);
            }
            class _Widget_I1_667_135_354State extends BaseState<Widget_I1_667_135_354> {
                bool visible = true;
                bool isLoaded = false;
                double width = 220;
                double height = 220;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Progress bar''', id: 'I1:667;135:354', componentName:r'''Progress bar''');
                
                _Widget_I1_667_135_354State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Progress bar''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Progress bar');
            }            
            
            var painter = Node_I1_667_135_354();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Progress bar''', id: 'I1:667;135:354', widget: this, componentName:r'''Progress bar''');
                ComponentDescendantNotification(name: r'''Progress bar''', id: 'I1:667;135:354', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 220,
                                height: 220,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_I1_667_135_355 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 3''';
        final String name = r'''Ellipse 3''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_667_135_355({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_667_135_355 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_667_135_355(properties:properties);
        }
            @override
                _Widget_I1_667_135_355State createState() => _Widget_I1_667_135_355State(this.properties);
            }
            class _Widget_I1_667_135_355State extends BaseState<Widget_I1_667_135_355> {
                bool visible = true;
                bool isLoaded = false;
                double width = 200;
                double height = 200;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 3''', id: 'I1:667;135:355', componentName:r'''Ellipse 3''');
                
                _Widget_I1_667_135_355State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 3''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 3');
            }            
            
            var painter = Node_I1_667_135_355();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 3''', id: 'I1:667;135:355', widget: this, componentName:r'''Ellipse 3''');
                ComponentDescendantNotification(name: r'''Ellipse 3''', id: 'I1:667;135:355', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 200,
                                height: 200,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_I1_667_135_356 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 4''';
        final String name = r'''Ellipse 4''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_667_135_356({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_667_135_356 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_667_135_356(properties:properties);
        }
            @override
                _Widget_I1_667_135_356State createState() => _Widget_I1_667_135_356State(this.properties);
            }
            class _Widget_I1_667_135_356State extends BaseState<Widget_I1_667_135_356> {
                bool visible = true;
                bool isLoaded = false;
                double width = 172;
                double height = 172;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 4''', id: 'I1:667;135:356', componentName:r'''Ellipse 4''');
                
                _Widget_I1_667_135_356State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 4''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 4');
            }            
            
            var painter = Node_I1_667_135_356();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 4''', id: 'I1:667;135:356', widget: this, componentName:r'''Ellipse 4''');
                ComponentDescendantNotification(name: r'''Ellipse 4''', id: 'I1:667;135:356', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 172,
                                height: 172,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_I1_667_135_357 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 1434''';
        final String name = r'''Ellipse 1434''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_667_135_357({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_667_135_357 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_667_135_357(properties:properties);
        }
            @override
                _Widget_I1_667_135_357State createState() => _Widget_I1_667_135_357State(this.properties);
            }
            class _Widget_I1_667_135_357State extends BaseState<Widget_I1_667_135_357> {
                bool visible = true;
                bool isLoaded = false;
                double width = 158;
                double height = 158;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 1434''', id: 'I1:667;135:357', componentName:r'''Ellipse 1434''');
                
                _Widget_I1_667_135_357State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 1434''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 1434');
            }            
            
            var painter = Node_I1_667_135_357();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 1434''', id: 'I1:667;135:357', widget: this, componentName:r'''Ellipse 1434''');
                ComponentDescendantNotification(name: r'''Ellipse 1434''', id: 'I1:667;135:357', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 158,
                                height: 158,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_I1_667_135_358 extends StatefulWidget {
            
        final String nodeName = r'''22''';
        final String name = r'''22''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_667_135_358({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_667_135_358 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_667_135_358(properties:properties);
        }
            @override
                _Widget_I1_667_135_358State createState() => _Widget_I1_667_135_358State(this.properties);
            }
            class _Widget_I1_667_135_358State extends BaseState<Widget_I1_667_135_358> {
                bool visible = false;
                bool isLoaded = false;
                double width = 62;
                double height = 32;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''22''', id: 'I1:667;135:358', componentName:r'''22''');
                
                _Widget_I1_667_135_358State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''22''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((32/32).floor()) <=1 ? 1 : (32/32).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 54,
                                fontFamily: 'SF Pro Display',
                                fontWeight: FontWeight.w400,
                                letterSpacing: 0.28999999165534973,
                                fontStyle: FontStyle.normal,
                                height: 0.5925925925925926,
                                color: Color.fromRGBO(60, 60, 67, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Display',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''22''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, '22');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''22''', id: 'I1:667;135:358', widget: this, componentName:r'''22''');
                ComponentDescendantNotification(name: r'''22''', id: 'I1:667;135:358', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 62,
                                height: 32,
                                alignment: Alignment(-1, -1),
                                child: Align(
                                    alignment: Alignment(-1, -1),
                                    child: this.textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_I1_667_141_226 extends StatefulWidget {
            
        final String nodeName = r'''Num''';
        final String name = r'''Num''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_667_141_226({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_667_141_226 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_667_141_226(properties:properties);
        }
            @override
                _Widget_I1_667_141_226State createState() => _Widget_I1_667_141_226State(this.properties);
            }
            class _Widget_I1_667_141_226State extends BaseState<Widget_I1_667_141_226> {
                bool visible = true;
                bool isLoaded = false;
                double width = 62;
                double height = 43;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Num''', id: 'I1:667;141:226', componentName:r'''Num''');
                
                _Widget_I1_667_141_226State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Num''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Num');
            }            
            
            var painter = Node_I1_667_141_226();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Num''', id: 'I1:667;141:226', widget: this, componentName:r'''Num''');
                ComponentDescendantNotification(name: r'''Num''', id: 'I1:667;141:226', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 62,
                                height: 43,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 64 + 0, maxWidth: 64 + 0,
                                                                        minHeight: 1035 + 0, maxHeight: 1035 + 0,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 64,
                                                                        height: 1035,
                                                                        
                                                                        child: Widget_I1_667_141_227()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_I1_667_141_227 extends StatefulWidget {
            
        final String nodeName = r'''0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22''';
        final String name = r'''0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_667_141_227({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_667_141_227 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_667_141_227(properties:properties);
        }
            @override
                _Widget_I1_667_141_227State createState() => _Widget_I1_667_141_227State(this.properties);
            }
            class _Widget_I1_667_141_227State extends BaseState<Widget_I1_667_141_227> {
                bool visible = true;
                bool isLoaded = false;
                double width = 64;
                double height = 1035;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22''', id: 'I1:667;141:227', componentName:r'''0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22''');
                
                _Widget_I1_667_141_227State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''0
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((1035/45).floor()) <=1 ? 1 : (1035/45).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 54,
                                fontFamily: 'SF Pro Display',
                                fontWeight: FontWeight.w400,
                                letterSpacing: 0.38999998569488525,
                                fontStyle: FontStyle.normal,
                                height: 0.8333333333333334,
                                color: Color.fromRGBO(60, 60, 67, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Display',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22''', id: 'I1:667;141:227', widget: this, componentName:r'''0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22''');
                ComponentDescendantNotification(name: r'''0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22''', id: 'I1:667;141:227', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, -1, -992, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 64,
                                height: 1035,
                                alignment: Alignment(-1, -1),
                                child: Align(
                                    alignment: Alignment(0, -1),
                                    child: this.textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_I1_667_135_359 extends StatefulWidget {
            
        final String nodeName = r'''HEATING''';
        final String name = r'''HEATING''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_667_135_359({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_667_135_359 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_667_135_359(properties:properties);
        }
            @override
                _Widget_I1_667_135_359State createState() => _Widget_I1_667_135_359State(this.properties);
            }
            class _Widget_I1_667_135_359State extends BaseState<Widget_I1_667_135_359> {
                bool visible = true;
                bool isLoaded = false;
                double width = 74;
                double height = 22;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''HEATING''', id: 'I1:667;135:359', componentName:r'''HEATING''');
                
                _Widget_I1_667_135_359State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''HEATING''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((22/22).floor()) <=1 ? 1 : (22/22).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 17,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w600,
                                letterSpacing: -0.40799999237060547,
                                fontStyle: FontStyle.normal,
                                height: 1.2941176470588236,
                                color: Color.fromRGBO(60, 60, 67, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''HEATING''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'HEATING');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''HEATING''', id: 'I1:667;135:359', widget: this, componentName:r'''HEATING''');
                ComponentDescendantNotification(name: r'''HEATING''', id: 'I1:667;135:359', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 74,
                                height: 22,
                                alignment: Alignment(-1, -1),
                                child: Align(
                                    alignment: Alignment(-1, -1),
                                    child: this.textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_I1_667_135_360 extends StatefulWidget {
            
        final String nodeName = r'''Small Ellipse 5''';
        final String name = r'''Small Ellipse 5''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_667_135_360({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_667_135_360 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_667_135_360(properties:properties);
        }
            @override
                _Widget_I1_667_135_360State createState() => _Widget_I1_667_135_360State(this.properties);
            }
            class _Widget_I1_667_135_360State extends BaseState<Widget_I1_667_135_360> {
                bool visible = false;
                bool isLoaded = false;
                double width = 15;
                double height = 15;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Small Ellipse 5''', id: 'I1:667;135:360', componentName:r'''Small Ellipse 5''');
                
                _Widget_I1_667_135_360State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Small Ellipse 5''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Small Ellipse 5');
            }            
            
            var painter = Node_I1_667_135_360();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Small Ellipse 5''', id: 'I1:667;135:360', widget: this, componentName:r'''Small Ellipse 5''');
                ComponentDescendantNotification(name: r'''Small Ellipse 5''', id: 'I1:667;135:360', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 15,
                                height: 15,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_I1_667_135_361_85_680 extends StatefulWidget {
            
        final String nodeName = r'''􀥲''';
        final String name = r'''􀥲''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_667_135_361_85_680({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_667_135_361_85_680 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_667_135_361_85_680(properties:properties);
        }
            @override
                _Widget_I1_667_135_361_85_680State createState() => _Widget_I1_667_135_361_85_680State(this.properties);
            }
            class _Widget_I1_667_135_361_85_680State extends BaseState<Widget_I1_667_135_361_85_680> {
                bool visible = true;
                bool isLoaded = false;
                double width = 28;
                double height = 28;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''􀥲''', id: 'I1:667;135:361;85:680', componentName:r'''􀥲''');
                
                _Widget_I1_667_135_361_85_680State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''􀥲''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((28/28).floor()) <=1 ? 1 : (28/28).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 22,
                                fontFamily: 'SF Pro Display',
                                fontWeight: FontWeight.w700,
                                letterSpacing: 0.3499999940395355,
                                fontStyle: FontStyle.normal,
                                height: 1.2727272727272727,
                                color: Color.fromRGBO(48, 219, 91, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Display',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''􀥲''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, '􀥲');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''􀥲''', id: 'I1:667;135:361;85:680', widget: this, componentName:r'''􀥲''');
                ComponentDescendantNotification(name: r'''􀥲''', id: 'I1:667;135:361;85:680', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 28,
                                height: 28,
                                alignment: Alignment(-1, -1),
                                child: Align(
                                    alignment: Alignment(0, 0),
                                    child: this.textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_I1_667_135_362 extends StatefulWidget {
            
        final String nodeName = r'''10°''';
        final String name = r'''10°''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_667_135_362({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_667_135_362 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_667_135_362(properties:properties);
        }
            @override
                _Widget_I1_667_135_362State createState() => _Widget_I1_667_135_362State(this.properties);
            }
            class _Widget_I1_667_135_362State extends BaseState<Widget_I1_667_135_362> {
                bool visible = true;
                bool isLoaded = false;
                double width = 26;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''10°''', id: 'I1:667;135:362', componentName:r'''10°''');
                
                _Widget_I1_667_135_362State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''10°''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((20/20).floor()) <=1 ? 1 : (20/20).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 15,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w400,
                                letterSpacing: -0.23999999463558197,
                                fontStyle: FontStyle.normal,
                                height: 1.3333333333333333,
                                color: Color.fromRGBO(60, 60, 67, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''10°''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, '10°');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''10°''', id: 'I1:667;135:362', widget: this, componentName:r'''10°''');
                ComponentDescendantNotification(name: r'''10°''', id: 'I1:667;135:362', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, -53, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 26,
                                height: 20,
                                alignment: Alignment(-1, -1),
                                child: Align(
                                    alignment: Alignment(-1, -1),
                                    child: this.textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_I1_667_135_363 extends StatefulWidget {
            
        final String nodeName = r'''30°''';
        final String name = r'''30°''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_667_135_363({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_667_135_363 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_667_135_363(properties:properties);
        }
            @override
                _Widget_I1_667_135_363State createState() => _Widget_I1_667_135_363State(this.properties);
            }
            class _Widget_I1_667_135_363State extends BaseState<Widget_I1_667_135_363> {
                bool visible = true;
                bool isLoaded = false;
                double width = 26;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''30°''', id: 'I1:667;135:363', componentName:r'''30°''');
                
                _Widget_I1_667_135_363State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''30°''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.end
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.end,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((20/20).floor()) <=1 ? 1 : (20/20).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 15,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w400,
                                letterSpacing: -0.23999999463558197,
                                fontStyle: FontStyle.normal,
                                height: 1.3333333333333333,
                                color: Color.fromRGBO(60, 60, 67, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''30°''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, '30°');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''30°''', id: 'I1:667;135:363', widget: this, componentName:r'''30°''');
                ComponentDescendantNotification(name: r'''30°''', id: 'I1:667;135:363', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 26,
                                height: 20,
                                alignment: Alignment(-1, -1),
                                child: Align(
                                    alignment: Alignment(1, -1),
                                    child: this.textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_I1_667_135_364 extends StatefulWidget {
            
        final String nodeName = r'''20°''';
        final String name = r'''20°''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_667_135_364({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_667_135_364 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_667_135_364(properties:properties);
        }
            @override
                _Widget_I1_667_135_364State createState() => _Widget_I1_667_135_364State(this.properties);
            }
            class _Widget_I1_667_135_364State extends BaseState<Widget_I1_667_135_364> {
                bool visible = true;
                bool isLoaded = false;
                double width = 25;
                double height = 20;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''20°''', id: 'I1:667;135:364', componentName:r'''20°''');
                
                _Widget_I1_667_135_364State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''20°''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((20/20).floor()) <=1 ? 1 : (20/20).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 15,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w400,
                                letterSpacing: -0.23999999463558197,
                                fontStyle: FontStyle.normal,
                                height: 1.3333333333333333,
                                color: Color.fromRGBO(60, 60, 67, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''20°''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, '20°');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''20°''', id: 'I1:667;135:364', widget: this, componentName:r'''20°''');
                ComponentDescendantNotification(name: r'''20°''', id: 'I1:667;135:364', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, -45, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 25,
                                height: 20,
                                alignment: Alignment(-1, -1),
                                child: Align(
                                    alignment: Alignment(-1, -1),
                                    child: this.textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_668 extends StatefulWidget {
            
        final String nodeName = r'''Button''';
        final String name = r'''Button''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_668({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_668 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_668(properties:properties);
        }
            @override
                _Widget_1_668State createState() => _Widget_1_668State(this.properties);
            }
            class _Widget_1_668State extends BaseState<Widget_1_668> {
                bool visible = true;
                bool isLoaded = false;
                double width = 226;
                double height = 44;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Button''', id: '1:668', componentName:r'''Button''');
                
                _Widget_1_668State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Button''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Button');
            }            
            
            var painter = Node_1_668();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Button''', id: '1:668', widget: this, componentName:r'''Button''');
                ComponentDescendantNotification(name: r'''Button''', id: '1:668', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 226,
                                height: 44,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 65 + 16, maxWidth: 65 + 16,
                                                                        minHeight: 22 + 11, maxHeight: 22 + 11,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(16, 11, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 65,
                                                                        height: 22,
                                                                        
                                                                        child: Widget_1_669())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 19 + 191, maxWidth: 19 + 191,
                                                                        minHeight: 22 + 11, maxHeight: 22 + 11,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(191, 11, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 19,
                                                                        height: 22,
                                                                        
                                                                        child: Widget_1_670()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_669 extends StatefulWidget {
            
        final String nodeName = r'''Device 1''';
        final String name = r'''Device 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_669({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_669 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_669(properties:properties);
        }
            @override
                _Widget_1_669State createState() => _Widget_1_669State(this.properties);
            }
            class _Widget_1_669State extends BaseState<Widget_1_669> {
                bool visible = true;
                bool isLoaded = false;
                double width = 65;
                double height = 22;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Device 1''', id: '1:669', componentName:r'''Device 1''');
                
                _Widget_1_669State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Device 1''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((22/22).floor()) <=1 ? 1 : (22/22).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 17,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w400,
                                letterSpacing: -0.40799999237060547,
                                fontStyle: FontStyle.normal,
                                height: 1.2941176470588236,
                                color: Color.fromRGBO(60, 60, 67, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Device 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Device 1');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Device 1''', id: '1:669', widget: this, componentName:r'''Device 1''');
                ComponentDescendantNotification(name: r'''Device 1''', id: '1:669', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 65,
                                height: 22,
                                alignment: Alignment(-1, -1),
                                child: Align(
                                    alignment: Alignment(-1, -1),
                                    child: this.textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_670 extends StatefulWidget {
            
        final String nodeName = r'''􀆈''';
        final String name = r'''􀆈''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_670({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_670 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_670(properties:properties);
        }
            @override
                _Widget_1_670State createState() => _Widget_1_670State(this.properties);
            }
            class _Widget_1_670State extends BaseState<Widget_1_670> {
                bool visible = true;
                bool isLoaded = false;
                double width = 19;
                double height = 22;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''􀆈''', id: '1:670', componentName:r'''􀆈''');
                
                _Widget_1_670State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''􀆈 ''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.start
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.start,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((22/22).floor()) <=1 ? 1 : (22/22).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 17,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w400,
                                letterSpacing: -0.40799999237060547,
                                fontStyle: FontStyle.normal,
                                height: 1.2941176470588236,
                                color: Color.fromRGBO(60, 60, 67, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''􀆈''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, '􀆈');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''􀆈''', id: '1:670', widget: this, componentName:r'''􀆈''');
                ComponentDescendantNotification(name: r'''􀆈''', id: '1:670', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 19,
                                height: 22,
                                alignment: Alignment(-1, -1),
                                child: Align(
                                    alignment: Alignment(-1, -1),
                                    child: this.textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_672 extends StatefulWidget {
            
        final String nodeName = r'''Temps Card''';
        final String name = r'''Temps Card''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_672({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_672 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_672(properties:properties);
        }
            @override
                _Widget_1_672State createState() => _Widget_1_672State(this.properties);
            }
            class _Widget_1_672State extends BaseState<Widget_1_672> {
                bool visible = true;
                bool isLoaded = false;
                double width = 144;
                double height = 164;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Temps Card''', id: '1:672', componentName:r'''Temps Card''');
                
                _Widget_1_672State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Temps Card''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Temps Card');
            }            
            
            var painter = Node_1_672();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Temps Card''', id: '1:672', widget: this, componentName:r'''Temps Card''');
                ComponentDescendantNotification(name: r'''Temps Card''', id: '1:672', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 144,
                                height: 164,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 60 + 42, maxWidth: 60 + 42,
                                                                        minHeight: 60 + 20, maxHeight: 60 + 20,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(42, 20, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 60,
                                                                        height: 60,
                                                                        
                                                                        child: Widget_1_673())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 123 + 11, maxWidth: 123 + 11,
                                                                        minHeight: 22 + 94, maxHeight: 22 + 94,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(11, 94, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 123,
                                                                        height: 22,
                                                                        
                                                                        child: Widget_1_676())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 44 + 49, maxWidth: 44 + 49,
                                                                        minHeight: 22 + 124, maxHeight: 22 + 124,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(49, 124, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 44,
                                                                        height: 22,
                                                                        
                                                                        child: Widget_1_677()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_673 extends StatefulWidget {
            
        final String nodeName = r'''Frame 3608''';
        final String name = r'''Frame 3608''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_673({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_673 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_673(properties:properties);
        }
            @override
                _Widget_1_673State createState() => _Widget_1_673State(this.properties);
            }
            class _Widget_1_673State extends BaseState<Widget_1_673> {
                bool visible = true;
                bool isLoaded = false;
                double width = 60;
                double height = 60;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Frame 3608''', id: '1:673', componentName:r'''Frame 3608''');
                
                _Widget_1_673State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Frame 3608''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Frame 3608');
            }            
            
            var painter = Node_1_673();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Frame 3608''', id: '1:673', widget: this, componentName:r'''Frame 3608''');
                ComponentDescendantNotification(name: r'''Frame 3608''', id: '1:673', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 60,
                                height: 60,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 60 + 0, maxWidth: 60 + 0,
                                                                        minHeight: 60 + 0, maxHeight: 60 + 0,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 60,
                                                                        height: 60,
                                                                        
                                                                        child: Widget_1_674())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 44 + 8, maxWidth: 44 + 8,
                                                                        minHeight: 44 + 8, maxHeight: 44 + 8,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(8, 8, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 44,
                                                                        height: 44,
                                                                        
                                                                        child: Widget_1_675()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_674 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 1434''';
        final String name = r'''Ellipse 1434''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_674({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_674 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_674(properties:properties);
        }
            @override
                _Widget_1_674State createState() => _Widget_1_674State(this.properties);
            }
            class _Widget_1_674State extends BaseState<Widget_1_674> {
                bool visible = true;
                bool isLoaded = false;
                double width = 60;
                double height = 60;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 1434''', id: '1:674', componentName:r'''Ellipse 1434''');
                
                _Widget_1_674State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 1434''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 1434');
            }            
            
            var painter = Node_1_674();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 1434''', id: '1:674', widget: this, componentName:r'''Ellipse 1434''');
                ComponentDescendantNotification(name: r'''Ellipse 1434''', id: '1:674', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 60,
                                height: 60,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_I1_675_81_83 extends StatefulWidget {
            
        final String nodeName = r'''􁃛''';
        final String name = r'''􁃛''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_675_81_83({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_675_81_83 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_675_81_83(properties:properties);
        }
            @override
                _Widget_I1_675_81_83State createState() => _Widget_I1_675_81_83State(this.properties);
            }
            class _Widget_I1_675_81_83State extends BaseState<Widget_I1_675_81_83> {
                bool visible = true;
                bool isLoaded = false;
                double width = 30;
                double height = 28;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''􁃛''', id: 'I1:675;81:83', componentName:r'''􁃛''');
                
                _Widget_I1_675_81_83State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''􁃛''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((28/28).floor()) <=1 ? 1 : (28/28).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 22,
                                fontFamily: 'SF Pro Display',
                                fontWeight: FontWeight.w700,
                                letterSpacing: 0.3499999940395355,
                                fontStyle: FontStyle.normal,
                                height: 1.2727272727272727,
                                color: Color.fromRGBO(152, 94, 225, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Display',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''􁃛''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, '􁃛');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''􁃛''', id: 'I1:675;81:83', widget: this, componentName:r'''􁃛''');
                ComponentDescendantNotification(name: r'''􁃛''', id: 'I1:675;81:83', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 30,
                                height: 28,
                                alignment: Alignment(-0.022727272727272707, 0.13636363636363646),
                                child: Align(
                                    alignment: Alignment(0, 0),
                                    child: this.textWidgets)
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_1_676 extends StatefulWidget {
            
        final String nodeName = r'''Inside humidity''';
        final String name = r'''Inside humidity''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_676({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_676 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_676(properties:properties);
        }
            @override
                _Widget_1_676State createState() => _Widget_1_676State(this.properties);
            }
            class _Widget_1_676State extends BaseState<Widget_1_676> {
                bool visible = true;
                bool isLoaded = false;
                double width = 123;
                double height = 22;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Inside humidity''', id: '1:676', componentName:r'''Inside humidity''');
                
                _Widget_1_676State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Inside humidity''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((22/22).floor()) <=1 ? 1 : (22/22).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 17,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w600,
                                letterSpacing: -0.40799999237060547,
                                fontStyle: FontStyle.normal,
                                height: 1.2941176470588236,
                                color: Color.fromRGBO(60, 60, 67, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Inside humidity''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Inside humidity');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Inside humidity''', id: '1:676', widget: this, componentName:r'''Inside humidity''');
                ComponentDescendantNotification(name: r'''Inside humidity''', id: '1:676', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 123,
                                height: 22,
                                alignment: Alignment(-1, -1),
                                child: Align(
                                    alignment: Alignment(0, -1),
                                    child: this.textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_677 extends StatefulWidget {
            
        final String nodeName = r'''49 %''';
        final String name = r'''49 %''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_677({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_677 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_677(properties:properties);
        }
            @override
                _Widget_1_677State createState() => _Widget_1_677State(this.properties);
            }
            class _Widget_1_677State extends BaseState<Widget_1_677> {
                bool visible = true;
                bool isLoaded = false;
                double width = 44;
                double height = 22;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''49 %''', id: '1:677', componentName:r'''49 %''');
                
                _Widget_1_677State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''49 %''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((22/22).floor()) <=1 ? 1 : (22/22).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 17,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w600,
                                letterSpacing: -0.40799999237060547,
                                fontStyle: FontStyle.normal,
                                height: 1.2941176470588236,
                                color: Color.fromRGBO(60, 60, 67, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''49 %''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, '49 %');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''49 %''', id: '1:677', widget: this, componentName:r'''49 %''');
                ComponentDescendantNotification(name: r'''49 %''', id: '1:677', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 44,
                                height: 22,
                                alignment: Alignment(-1, -1),
                                child: Align(
                                    alignment: Alignment(0, -1),
                                    child: this.textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_678 extends StatefulWidget {
            
        final String nodeName = r'''Temps Card''';
        final String name = r'''Temps Card''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_678({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_678 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_678(properties:properties);
        }
            @override
                _Widget_1_678State createState() => _Widget_1_678State(this.properties);
            }
            class _Widget_1_678State extends BaseState<Widget_1_678> {
                bool visible = true;
                bool isLoaded = false;
                double width = 144;
                double height = 164;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Temps Card''', id: '1:678', componentName:r'''Temps Card''');
                
                _Widget_1_678State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Temps Card''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Temps Card');
            }            
            
            var painter = Node_1_678();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Temps Card''', id: '1:678', widget: this, componentName:r'''Temps Card''');
                ComponentDescendantNotification(name: r'''Temps Card''', id: '1:678', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 144,
                                height: 164,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.hardEdge,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 60 + 42, maxWidth: 60 + 42,
                                                                        minHeight: 60 + 20, maxHeight: 60 + 20,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(42, 20, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 60,
                                                                        height: 60,
                                                                        
                                                                        child: Widget_1_679())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 126 + 9, maxWidth: 126 + 9,
                                                                        minHeight: 22 + 94, maxHeight: 22 + 94,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(9, 94, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 126,
                                                                        height: 22,
                                                                        
                                                                        child: Widget_1_682())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 27 + 58, maxWidth: 27 + 58,
                                                                        minHeight: 22 + 124, maxHeight: 22 + 124,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(58, 124, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 27,
                                                                        height: 22,
                                                                        
                                                                        child: Widget_1_683()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_679 extends StatefulWidget {
            
        final String nodeName = r'''Frame 3608''';
        final String name = r'''Frame 3608''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_679({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_679 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_679(properties:properties);
        }
            @override
                _Widget_1_679State createState() => _Widget_1_679State(this.properties);
            }
            class _Widget_1_679State extends BaseState<Widget_1_679> {
                bool visible = true;
                bool isLoaded = false;
                double width = 60;
                double height = 60;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Frame 3608''', id: '1:679', componentName:r'''Frame 3608''');
                
                _Widget_1_679State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Frame 3608''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Frame 3608');
            }            
            
            var painter = Node_1_679();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Frame 3608''', id: '1:679', widget: this, componentName:r'''Frame 3608''');
                ComponentDescendantNotification(name: r'''Frame 3608''', id: '1:679', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 60,
                                height: 60,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 60 + 0, maxWidth: 60 + 0,
                                                                        minHeight: 60 + 0, maxHeight: 60 + 0,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 60,
                                                                        height: 60,
                                                                        
                                                                        child: Widget_1_680())), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(-1, -1),
                                                                        minWidth: 44 + 8, maxWidth: 44 + 8,
                                                                        minHeight: 44 + 8, maxHeight: 44 + 8,
                                                                        child:Container(
                                                                        alignment: Alignment(-1, -1),
                                                                        margin: EdgeInsets.fromLTRB(8, 8, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 44,
                                                                        height: 44,
                                                                        
                                                                        child: Widget_1_681()))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_680 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 1434''';
        final String name = r'''Ellipse 1434''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_680({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_680 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_680(properties:properties);
        }
            @override
                _Widget_1_680State createState() => _Widget_1_680State(this.properties);
            }
            class _Widget_1_680State extends BaseState<Widget_1_680> {
                bool visible = true;
                bool isLoaded = false;
                double width = 60;
                double height = 60;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 1434''', id: '1:680', componentName:r'''Ellipse 1434''');
                
                _Widget_1_680State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 1434''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 1434');
            }            
            
            var painter = Node_1_680();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 1434''', id: '1:680', widget: this, componentName:r'''Ellipse 1434''');
                ComponentDescendantNotification(name: r'''Ellipse 1434''', id: '1:680', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 60,
                                height: 60,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_I1_681_81_85 extends StatefulWidget {
            
        final String nodeName = r'''􀇬''';
        final String name = r'''􀇬''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_681_81_85({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_681_81_85 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_681_81_85(properties:properties);
        }
            @override
                _Widget_I1_681_81_85State createState() => _Widget_I1_681_81_85State(this.properties);
            }
            class _Widget_I1_681_81_85State extends BaseState<Widget_I1_681_81_85> {
                bool visible = true;
                bool isLoaded = false;
                double width = 19;
                double height = 28;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''􀇬''', id: 'I1:681;81:85', componentName:r'''􀇬''');
                
                _Widget_I1_681_81_85State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''􀇬''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((28/28).floor()) <=1 ? 1 : (28/28).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 22,
                                fontFamily: 'SF Pro Display',
                                fontWeight: FontWeight.w700,
                                letterSpacing: 0.3499999940395355,
                                fontStyle: FontStyle.normal,
                                height: 1.2727272727272727,
                                color: Color.fromRGBO(152, 94, 225, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Display',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''􀇬''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, '􀇬');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''􀇬''', id: 'I1:681;81:85', widget: this, componentName:r'''􀇬''');
                ComponentDescendantNotification(name: r'''􀇬''', id: 'I1:681;81:85', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 19,
                                height: 28,
                                alignment: Alignment(0, 0.13636363636363646),
                                child: Align(
                                    alignment: Alignment(0, 0),
                                    child: this.textWidgets)
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_1_682 extends StatefulWidget {
            
        final String nodeName = r'''Outside Temps.''';
        final String name = r'''Outside Temps.''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_682({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_682 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_682(properties:properties);
        }
            @override
                _Widget_1_682State createState() => _Widget_1_682State(this.properties);
            }
            class _Widget_1_682State extends BaseState<Widget_1_682> {
                bool visible = true;
                bool isLoaded = false;
                double width = 126;
                double height = 22;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Outside Temps.''', id: '1:682', componentName:r'''Outside Temps.''');
                
                _Widget_1_682State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''Outside Temps.''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((22/22).floor()) <=1 ? 1 : (22/22).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 17,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w600,
                                letterSpacing: -0.40799999237060547,
                                fontStyle: FontStyle.normal,
                                height: 1.2941176470588236,
                                color: Color.fromRGBO(60, 60, 67, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Outside Temps.''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Outside Temps.');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Outside Temps.''', id: '1:682', widget: this, componentName:r'''Outside Temps.''');
                ComponentDescendantNotification(name: r'''Outside Temps.''', id: '1:682', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 126,
                                height: 22,
                                alignment: Alignment(-1, -1),
                                child: Align(
                                    alignment: Alignment(0, -1),
                                    child: this.textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_683 extends StatefulWidget {
            
        final String nodeName = r'''10°''';
        final String name = r'''10°''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_683({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_683 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_683(properties:properties);
        }
            @override
                _Widget_1_683State createState() => _Widget_1_683State(this.properties);
            }
            class _Widget_1_683State extends BaseState<Widget_1_683> {
                bool visible = true;
                bool isLoaded = false;
                double width = 27;
                double height = 22;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''10°''', id: '1:683', componentName:r'''10°''');
                
                _Widget_1_683State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''10°''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((22/22).floor()) <=1 ? 1 : (22/22).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 17,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w600,
                                letterSpacing: -0.40799999237060547,
                                fontStyle: FontStyle.normal,
                                height: 1.2941176470588236,
                                color: Color.fromRGBO(60, 60, 67, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''10°''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, '10°');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''10°''', id: '1:683', widget: this, componentName:r'''10°''');
                ComponentDescendantNotification(name: r'''10°''', id: '1:683', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 27,
                                height: 22,
                                alignment: Alignment(-1, -1),
                                child: Align(
                                    alignment: Alignment(0, -1),
                                    child: this.textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_776 extends StatefulWidget {
            
        final String nodeName = r'''Frame 3610''';
        final String name = r'''Frame 3610''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_776({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_776 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_776(properties:properties);
        }
            @override
                _Widget_1_776State createState() => _Widget_1_776State(this.properties);
            }
            class _Widget_1_776State extends BaseState<Widget_1_776> {
                bool visible = true;
                bool isLoaded = false;
                double width = 100;
                double height = 100;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Frame 3610''', id: '1:776', componentName:r'''Frame 3610''');
                
                _Widget_1_776State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Frame 3610''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Frame 3610');
            }            
            
            var painter = Node_1_776();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Frame 3610''', id: '1:776', widget: this, componentName:r'''Frame 3610''');
                ComponentDescendantNotification(name: r'''Frame 3610''', id: '1:776', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 100,
                                height: 100,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        )
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_1_685 extends StatefulWidget {
            
        final String nodeName = r'''Button''';
        final String name = r'''Button''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_685({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_685 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_685(properties:properties);
        }
            @override
                _Widget_1_685State createState() => _Widget_1_685State(this.properties);
            }
            class _Widget_1_685State extends BaseState<Widget_1_685> {
                bool visible = true;
                bool isLoaded = false;
                double width = 66;
                double height = 87;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Button''', id: '1:685', componentName:r'''Button''');
                
                _Widget_1_685State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Button''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Button');
            }            
            
            var painter = Node_1_685();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Button''', id: '1:685', widget: this, componentName:r'''Button''');
                ComponentDescendantNotification(name: r'''Button''', id: '1:685', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 66,
                                height: 87,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.vertical,
                    //spacing: 5,
                    //runSpacing: 5, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_1_686(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    SizedBox(height: 5), 
                                                    Widget_1_687(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_I1_686_131_366 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 1''';
        final String name = r'''Ellipse 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_686_131_366({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_686_131_366 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_686_131_366(properties:properties);
        }
            @override
                _Widget_I1_686_131_366State createState() => _Widget_I1_686_131_366State(this.properties);
            }
            class _Widget_I1_686_131_366State extends BaseState<Widget_I1_686_131_366> {
                bool visible = true;
                bool isLoaded = false;
                double width = 64;
                double height = 64;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 1''', id: 'I1:686;131:366', componentName:r'''Ellipse 1''');
                
                _Widget_I1_686_131_366State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 1');
            }            
            
            var painter = Node_I1_686_131_366();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 1''', id: 'I1:686;131:366', widget: this, componentName:r'''Ellipse 1''');
                ComponentDescendantNotification(name: r'''Ellipse 1''', id: 'I1:686;131:366', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_686_131_367 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 2''';
        final String name = r'''Ellipse 2''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_686_131_367({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_686_131_367 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_686_131_367(properties:properties);
        }
            @override
                _Widget_I1_686_131_367State createState() => _Widget_I1_686_131_367State(this.properties);
            }
            class _Widget_I1_686_131_367State extends BaseState<Widget_I1_686_131_367> {
                bool visible = true;
                bool isLoaded = false;
                double width = 58;
                double height = 58;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 2''', id: 'I1:686;131:367', componentName:r'''Ellipse 2''');
                
                _Widget_I1_686_131_367State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 2''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 2');
            }            
            
            var painter = Node_I1_686_131_367();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 2''', id: 'I1:686;131:367', widget: this, componentName:r'''Ellipse 2''');
                ComponentDescendantNotification(name: r'''Ellipse 2''', id: 'I1:686;131:367', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_686_131_368 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 1433''';
        final String name = r'''Ellipse 1433''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_686_131_368({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_686_131_368 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_686_131_368(properties:properties);
        }
            @override
                _Widget_I1_686_131_368State createState() => _Widget_I1_686_131_368State(this.properties);
            }
            class _Widget_I1_686_131_368State extends BaseState<Widget_I1_686_131_368> {
                bool visible = true;
                bool isLoaded = false;
                double width = 58;
                double height = 58;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 1433''', id: 'I1:686;131:368', componentName:r'''Ellipse 1433''');
                
                _Widget_I1_686_131_368State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 1433''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 1433');
            }            
            
            var painter = Node_I1_686_131_368();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 1433''', id: 'I1:686;131:368', widget: this, componentName:r'''Ellipse 1433''');
                ComponentDescendantNotification(name: r'''Ellipse 1433''', id: 'I1:686;131:368', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_686_131_369 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 3 Blur''';
        final String name = r'''Ellipse 3 Blur''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_686_131_369({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_686_131_369 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_686_131_369(properties:properties);
        }
            @override
                _Widget_I1_686_131_369State createState() => _Widget_I1_686_131_369State(this.properties);
            }
            class _Widget_I1_686_131_369State extends BaseState<Widget_I1_686_131_369> {
                bool visible = false;
                bool isLoaded = false;
                double width = 60;
                double height = 60;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 3 Blur''', id: 'I1:686;131:369', componentName:r'''Ellipse 3 Blur''');
                
                _Widget_I1_686_131_369State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 3 Blur''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 3 Blur');
            }            
            
            var painter = Node_I1_686_131_369();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 3 Blur''', id: 'I1:686;131:369', widget: this, componentName:r'''Ellipse 3 Blur''');
                ComponentDescendantNotification(name: r'''Ellipse 3 Blur''', id: 'I1:686;131:369', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_686_131_370 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 4''';
        final String name = r'''Ellipse 4''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_686_131_370({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_686_131_370 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_686_131_370(properties:properties);
        }
            @override
                _Widget_I1_686_131_370State createState() => _Widget_I1_686_131_370State(this.properties);
            }
            class _Widget_I1_686_131_370State extends BaseState<Widget_I1_686_131_370> {
                bool visible = true;
                bool isLoaded = false;
                double width = 50;
                double height = 50;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 4''', id: 'I1:686;131:370', componentName:r'''Ellipse 4''');
                
                _Widget_I1_686_131_370State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 4''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 4');
            }            
            
            var painter = Node_I1_686_131_370();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 4''', id: 'I1:686;131:370', widget: this, componentName:r'''Ellipse 4''');
                ComponentDescendantNotification(name: r'''Ellipse 4''', id: 'I1:686;131:370', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_686_131_371_81_49 extends StatefulWidget {
            
        final String nodeName = r'''Subtract''';
        final String name = r'''Subtract''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_686_131_371_81_49({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_686_131_371_81_49 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_686_131_371_81_49(properties:properties);
        }
            @override
                _Widget_I1_686_131_371_81_49State createState() => _Widget_I1_686_131_371_81_49State(this.properties);
            }
            class _Widget_I1_686_131_371_81_49State extends BaseState<Widget_I1_686_131_371_81_49> {
                bool visible = true;
                bool isLoaded = false;
                double width = 24.46875;
                double height = 22.656360626220703;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Subtract''', id: 'I1:686;131:371;81:49', componentName:r'''Subtract''');
                
                _Widget_I1_686_131_371_81_49State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Subtract''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Subtract');
            }            
            
            var painter = Node_I1_686_131_371_81_49();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Subtract''', id: 'I1:686;131:371;81:49', widget: this, componentName:r'''Subtract''');
                ComponentDescendantNotification(name: r'''Subtract''', id: 'I1:686;131:371;81:49', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 24.46875,
                                height: 22.656360626220703,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_1_687 extends StatefulWidget {
            
        final String nodeName = r'''Label''';
        final String name = r'''Label''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_687({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_687 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_687(properties:properties);
        }
            @override
                _Widget_1_687State createState() => _Widget_1_687State(this.properties);
            }
            class _Widget_1_687State extends BaseState<Widget_1_687> {
                bool visible = true;
                bool isLoaded = false;
                double width = 40;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Label''', id: '1:687', componentName:r'''Label''');
                
                _Widget_1_687State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''MODE''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((18/18).floor()) <=1 ? 1 : (18/18).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 13,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w600,
                                letterSpacing: -0.07800000160932541,
                                fontStyle: FontStyle.normal,
                                height: 1.3846153846153846,
                                color: Color.fromRGBO(60, 60, 67, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Label''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Label');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Label''', id: '1:687', widget: this, componentName:r'''Label''');
                ComponentDescendantNotification(name: r'''Label''', id: '1:687', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 40,
                                height: 18,
                                alignment: Alignment(-1, -1),
                                child: Align(
                                    alignment: Alignment(0, -1),
                                    child: this.textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_688 extends StatefulWidget {
            
        final String nodeName = r'''Button''';
        final String name = r'''Button''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_688({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_688 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_688(properties:properties);
        }
            @override
                _Widget_1_688State createState() => _Widget_1_688State(this.properties);
            }
            class _Widget_1_688State extends BaseState<Widget_1_688> {
                bool visible = true;
                bool isLoaded = false;
                double width = 66;
                double height = 87;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Button''', id: '1:688', componentName:r'''Button''');
                
                _Widget_1_688State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Button''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Button');
            }            
            
            var painter = Node_1_688();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Button''', id: '1:688', widget: this, componentName:r'''Button''');
                ComponentDescendantNotification(name: r'''Button''', id: '1:688', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 66,
                                height: 87,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.vertical,
                    //spacing: 5,
                    //runSpacing: 5, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_1_689(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    SizedBox(height: 5), 
                                                    Widget_1_690(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_I1_689_131_349 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 1''';
        final String name = r'''Ellipse 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_689_131_349({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_689_131_349 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_689_131_349(properties:properties);
        }
            @override
                _Widget_I1_689_131_349State createState() => _Widget_I1_689_131_349State(this.properties);
            }
            class _Widget_I1_689_131_349State extends BaseState<Widget_I1_689_131_349> {
                bool visible = true;
                bool isLoaded = false;
                double width = 64;
                double height = 64;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 1''', id: 'I1:689;131:349', componentName:r'''Ellipse 1''');
                
                _Widget_I1_689_131_349State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 1');
            }            
            
            var painter = Node_I1_689_131_349();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 1''', id: 'I1:689;131:349', widget: this, componentName:r'''Ellipse 1''');
                ComponentDescendantNotification(name: r'''Ellipse 1''', id: 'I1:689;131:349', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_689_131_350 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 2''';
        final String name = r'''Ellipse 2''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_689_131_350({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_689_131_350 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_689_131_350(properties:properties);
        }
            @override
                _Widget_I1_689_131_350State createState() => _Widget_I1_689_131_350State(this.properties);
            }
            class _Widget_I1_689_131_350State extends BaseState<Widget_I1_689_131_350> {
                bool visible = true;
                bool isLoaded = false;
                double width = 58;
                double height = 58;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 2''', id: 'I1:689;131:350', componentName:r'''Ellipse 2''');
                
                _Widget_I1_689_131_350State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 2''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 2');
            }            
            
            var painter = Node_I1_689_131_350();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 2''', id: 'I1:689;131:350', widget: this, componentName:r'''Ellipse 2''');
                ComponentDescendantNotification(name: r'''Ellipse 2''', id: 'I1:689;131:350', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_689_131_351 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 1433''';
        final String name = r'''Ellipse 1433''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_689_131_351({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_689_131_351 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_689_131_351(properties:properties);
        }
            @override
                _Widget_I1_689_131_351State createState() => _Widget_I1_689_131_351State(this.properties);
            }
            class _Widget_I1_689_131_351State extends BaseState<Widget_I1_689_131_351> {
                bool visible = true;
                bool isLoaded = false;
                double width = 58;
                double height = 58;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 1433''', id: 'I1:689;131:351', componentName:r'''Ellipse 1433''');
                
                _Widget_I1_689_131_351State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 1433''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 1433');
            }            
            
            var painter = Node_I1_689_131_351();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 1433''', id: 'I1:689;131:351', widget: this, componentName:r'''Ellipse 1433''');
                ComponentDescendantNotification(name: r'''Ellipse 1433''', id: 'I1:689;131:351', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_689_131_352 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 3 Blur''';
        final String name = r'''Ellipse 3 Blur''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_689_131_352({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_689_131_352 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_689_131_352(properties:properties);
        }
            @override
                _Widget_I1_689_131_352State createState() => _Widget_I1_689_131_352State(this.properties);
            }
            class _Widget_I1_689_131_352State extends BaseState<Widget_I1_689_131_352> {
                bool visible = true;
                bool isLoaded = false;
                double width = 60;
                double height = 60;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 3 Blur''', id: 'I1:689;131:352', componentName:r'''Ellipse 3 Blur''');
                
                _Widget_I1_689_131_352State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 3 Blur''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 3 Blur');
            }            
            
            var painter = Node_I1_689_131_352();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 3 Blur''', id: 'I1:689;131:352', widget: this, componentName:r'''Ellipse 3 Blur''');
                ComponentDescendantNotification(name: r'''Ellipse 3 Blur''', id: 'I1:689;131:352', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_689_131_353 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 4''';
        final String name = r'''Ellipse 4''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_689_131_353({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_689_131_353 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_689_131_353(properties:properties);
        }
            @override
                _Widget_I1_689_131_353State createState() => _Widget_I1_689_131_353State(this.properties);
            }
            class _Widget_I1_689_131_353State extends BaseState<Widget_I1_689_131_353> {
                bool visible = false;
                bool isLoaded = false;
                double width = 50;
                double height = 50;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 4''', id: 'I1:689;131:353', componentName:r'''Ellipse 4''');
                
                _Widget_I1_689_131_353State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 4''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 4');
            }            
            
            var painter = Node_I1_689_131_353();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 4''', id: 'I1:689;131:353', widget: this, componentName:r'''Ellipse 4''');
                ComponentDescendantNotification(name: r'''Ellipse 4''', id: 'I1:689;131:353', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_689_131_354_85_680 extends StatefulWidget {
            
        final String nodeName = r'''􀥲''';
        final String name = r'''􀥲''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_689_131_354_85_680({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_689_131_354_85_680 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_689_131_354_85_680(properties:properties);
        }
            @override
                _Widget_I1_689_131_354_85_680State createState() => _Widget_I1_689_131_354_85_680State(this.properties);
            }
            class _Widget_I1_689_131_354_85_680State extends BaseState<Widget_I1_689_131_354_85_680> {
                bool visible = true;
                bool isLoaded = false;
                double width = 28;
                double height = 28;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''􀥲''', id: 'I1:689;131:354;85:680', componentName:r'''􀥲''');
                
                _Widget_I1_689_131_354_85_680State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''􀥲''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((28/28).floor()) <=1 ? 1 : (28/28).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 22,
                                fontFamily: 'SF Pro Display',
                                fontWeight: FontWeight.w700,
                                letterSpacing: 0.3499999940395355,
                                fontStyle: FontStyle.normal,
                                height: 1.2727272727272727,
                                color: Color.fromRGBO(60, 60, 67, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Display',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''􀥲''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, '􀥲');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''􀥲''', id: 'I1:689;131:354;85:680', widget: this, componentName:r'''􀥲''');
                ComponentDescendantNotification(name: r'''􀥲''', id: 'I1:689;131:354;85:680', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 28,
                                height: 28,
                                alignment: Alignment(-1, -1),
                                child: Align(
                                    alignment: Alignment(0, 0),
                                    child: this.textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_690 extends StatefulWidget {
            
        final String nodeName = r'''Label''';
        final String name = r'''Label''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_690({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_690 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_690(properties:properties);
        }
            @override
                _Widget_1_690State createState() => _Widget_1_690State(this.properties);
            }
            class _Widget_1_690State extends BaseState<Widget_1_690> {
                bool visible = true;
                bool isLoaded = false;
                double width = 28;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Label''', id: '1:690', componentName:r'''Label''');
                
                _Widget_1_690State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''ECO''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((18/18).floor()) <=1 ? 1 : (18/18).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 13,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w600,
                                letterSpacing: -0.07800000160932541,
                                fontStyle: FontStyle.normal,
                                height: 1.3846153846153846,
                                color: Color.fromRGBO(60, 60, 67, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Label''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Label');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Label''', id: '1:690', widget: this, componentName:r'''Label''');
                ComponentDescendantNotification(name: r'''Label''', id: '1:690', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 28,
                                height: 18,
                                alignment: Alignment(-1, -1),
                                child: Align(
                                    alignment: Alignment(0, -1),
                                    child: this.textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_691 extends StatefulWidget {
            
        final String nodeName = r'''Button''';
        final String name = r'''Button''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_691({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_691 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_691(properties:properties);
        }
            @override
                _Widget_1_691State createState() => _Widget_1_691State(this.properties);
            }
            class _Widget_1_691State extends BaseState<Widget_1_691> {
                bool visible = true;
                bool isLoaded = false;
                double width = 66;
                double height = 87;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Button''', id: '1:691', componentName:r'''Button''');
                
                _Widget_1_691State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Button''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Button');
            }            
            
            var painter = Node_1_691();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Button''', id: '1:691', widget: this, componentName:r'''Button''');
                ComponentDescendantNotification(name: r'''Button''', id: '1:691', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 66,
                                height: 87,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.vertical,
                    //spacing: 5,
                    //runSpacing: 5, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_1_692(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    SizedBox(height: 5), 
                                                    Widget_1_693(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_I1_692_131_349 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 1''';
        final String name = r'''Ellipse 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_692_131_349({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_692_131_349 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_692_131_349(properties:properties);
        }
            @override
                _Widget_I1_692_131_349State createState() => _Widget_I1_692_131_349State(this.properties);
            }
            class _Widget_I1_692_131_349State extends BaseState<Widget_I1_692_131_349> {
                bool visible = true;
                bool isLoaded = false;
                double width = 64;
                double height = 64;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 1''', id: 'I1:692;131:349', componentName:r'''Ellipse 1''');
                
                _Widget_I1_692_131_349State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 1');
            }            
            
            var painter = Node_I1_692_131_349();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 1''', id: 'I1:692;131:349', widget: this, componentName:r'''Ellipse 1''');
                ComponentDescendantNotification(name: r'''Ellipse 1''', id: 'I1:692;131:349', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_692_131_350 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 2''';
        final String name = r'''Ellipse 2''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_692_131_350({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_692_131_350 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_692_131_350(properties:properties);
        }
            @override
                _Widget_I1_692_131_350State createState() => _Widget_I1_692_131_350State(this.properties);
            }
            class _Widget_I1_692_131_350State extends BaseState<Widget_I1_692_131_350> {
                bool visible = true;
                bool isLoaded = false;
                double width = 58;
                double height = 58;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 2''', id: 'I1:692;131:350', componentName:r'''Ellipse 2''');
                
                _Widget_I1_692_131_350State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 2''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 2');
            }            
            
            var painter = Node_I1_692_131_350();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 2''', id: 'I1:692;131:350', widget: this, componentName:r'''Ellipse 2''');
                ComponentDescendantNotification(name: r'''Ellipse 2''', id: 'I1:692;131:350', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_692_131_351 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 1433''';
        final String name = r'''Ellipse 1433''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_692_131_351({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_692_131_351 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_692_131_351(properties:properties);
        }
            @override
                _Widget_I1_692_131_351State createState() => _Widget_I1_692_131_351State(this.properties);
            }
            class _Widget_I1_692_131_351State extends BaseState<Widget_I1_692_131_351> {
                bool visible = true;
                bool isLoaded = false;
                double width = 58;
                double height = 58;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 1433''', id: 'I1:692;131:351', componentName:r'''Ellipse 1433''');
                
                _Widget_I1_692_131_351State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 1433''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 1433');
            }            
            
            var painter = Node_I1_692_131_351();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 1433''', id: 'I1:692;131:351', widget: this, componentName:r'''Ellipse 1433''');
                ComponentDescendantNotification(name: r'''Ellipse 1433''', id: 'I1:692;131:351', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_692_131_352 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 3 Blur''';
        final String name = r'''Ellipse 3 Blur''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_692_131_352({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_692_131_352 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_692_131_352(properties:properties);
        }
            @override
                _Widget_I1_692_131_352State createState() => _Widget_I1_692_131_352State(this.properties);
            }
            class _Widget_I1_692_131_352State extends BaseState<Widget_I1_692_131_352> {
                bool visible = true;
                bool isLoaded = false;
                double width = 60;
                double height = 60;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 3 Blur''', id: 'I1:692;131:352', componentName:r'''Ellipse 3 Blur''');
                
                _Widget_I1_692_131_352State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 3 Blur''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 3 Blur');
            }            
            
            var painter = Node_I1_692_131_352();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 3 Blur''', id: 'I1:692;131:352', widget: this, componentName:r'''Ellipse 3 Blur''');
                ComponentDescendantNotification(name: r'''Ellipse 3 Blur''', id: 'I1:692;131:352', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_692_131_353 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 4''';
        final String name = r'''Ellipse 4''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_692_131_353({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_692_131_353 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_692_131_353(properties:properties);
        }
            @override
                _Widget_I1_692_131_353State createState() => _Widget_I1_692_131_353State(this.properties);
            }
            class _Widget_I1_692_131_353State extends BaseState<Widget_I1_692_131_353> {
                bool visible = false;
                bool isLoaded = false;
                double width = 50;
                double height = 50;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 4''', id: 'I1:692;131:353', componentName:r'''Ellipse 4''');
                
                _Widget_I1_692_131_353State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 4''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 4');
            }            
            
            var painter = Node_I1_692_131_353();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 4''', id: 'I1:692;131:353', widget: this, componentName:r'''Ellipse 4''');
                ComponentDescendantNotification(name: r'''Ellipse 4''', id: 'I1:692;131:353', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_692_131_354_81_51 extends StatefulWidget {
            
        final String nodeName = r'''Vector''';
        final String name = r'''Vector''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_692_131_354_81_51({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_692_131_354_81_51 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_692_131_354_81_51(properties:properties);
        }
            @override
                _Widget_I1_692_131_354_81_51State createState() => _Widget_I1_692_131_354_81_51State(this.properties);
            }
            class _Widget_I1_692_131_354_81_51State extends BaseState<Widget_I1_692_131_354_81_51> {
                bool visible = true;
                bool isLoaded = false;
                double width = 23.333332061767578;
                double height = 26.666667938232422;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector''', id: 'I1:692;131:354;81:51', componentName:r'''Vector''');
                
                _Widget_I1_692_131_354_81_51State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Vector');
            }            
            
            var painter = Node_I1_692_131_354_81_51();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Vector''', id: 'I1:692;131:354;81:51', widget: this, componentName:r'''Vector''');
                ComponentDescendantNotification(name: r'''Vector''', id: 'I1:692;131:354;81:51', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 23.333332061767578,
                                height: 26.666667938232422,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(8.174351728840179e-8, 0.12499701380743922),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(8.174351728840179e-8, 0.12499701380743922),
                                                                        margin: EdgeInsets.fromLTRB((){
                            double s = constraints.widthConstraints().maxWidth, r = 0, n = 13.333333969116211, d = 4.666666412353516, o = 4.666668192546155;
                            r = (((s / d + s / o + n) > s) ? (s - n) / d : r = s / d).abs();
                            return r as double;
                        }(), (){
                        double s = constraints.heightConstraints().maxHeight, r = 0, n = 13.333333969116211, d = 3.2000152893789626, o = 5.33329086337733;
                        r = (((s / d + s / o + n) > s) ? (s - n) / d : r = s / d).abs();
                        return r as double;
                    }(), (){
                            double s = constraints.widthConstraints().maxWidth, r = 0, n = 13.333333969116211, d = 4.666668192546155, o = 4.666666412353516;
                            r = (((s / d + s / o + n) > s) ? (s - n) / d : r = s / d).abs();
                            return r as double;
                        }(), (){
                        double s = constraints.heightConstraints().maxHeight, r = 0, n = 13.333333969116211, d = 5.33329086337733, o = 3.2000152893789626;
                        r = (((s / d + s / o + n) > s) ? (s - n) / d : r = s / d).abs();
                        return r as double;
                    }()),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                                                        width: 13.333333969116211,
                                                                        height: 13.333333969116211,
                                                                        
                                                                        child: 
                                                                    TransparentPointer(
                                                                        child: Widget_I1_692_131_354_81_52()
                                                                    )
                                                                    )), 
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, -0.0000015735625470414405),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0, -0.0000015735625470414405),
                                                                        margin: EdgeInsets.fromLTRB(0, 0, 0, constraints.heightConstraints().maxHeight / 635500.6363636364),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                                                        
                                                                        
                                                                        
                                                                        child: 
                                                                    TransparentPointer(
                                                                        child: Widget_I1_692_131_354_81_53()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_I1_692_131_354_81_52 extends StatefulWidget {
            
        final String nodeName = r'''Vector-18''';
        final String name = r'''Vector-18''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_692_131_354_81_52({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_692_131_354_81_52 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_692_131_354_81_52(properties:properties);
        }
            @override
                _Widget_I1_692_131_354_81_52State createState() => _Widget_I1_692_131_354_81_52State(this.properties);
            }
            class _Widget_I1_692_131_354_81_52State extends BaseState<Widget_I1_692_131_354_81_52> {
                bool visible = true;
                bool isLoaded = false;
                double width = 13.333333969116211;
                double height = 13.333333969116211;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector-18''', id: 'I1:692;131:354;81:52', componentName:r'''Vector-18''');
                
                _Widget_I1_692_131_354_81_52State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector-18''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Vector-18');
            }            
            
            var painter = Node_I1_692_131_354_81_52();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Vector-18''', id: 'I1:692;131:354;81:52', widget: this, componentName:r'''Vector-18''');
                ComponentDescendantNotification(name: r'''Vector-18''', id: 'I1:692;131:354;81:52', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 13.333333969116211,
                                height: 13.333333969116211,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_I1_692_131_354_81_53 extends StatefulWidget {
            
        final String nodeName = r'''Vector-19''';
        final String name = r'''Vector-19''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_692_131_354_81_53({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_692_131_354_81_53 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_692_131_354_81_53(properties:properties);
        }
            @override
                _Widget_I1_692_131_354_81_53State createState() => _Widget_I1_692_131_354_81_53State(this.properties);
            }
            class _Widget_I1_692_131_354_81_53State extends BaseState<Widget_I1_692_131_354_81_53> {
                bool visible = true;
                bool isLoaded = false;
                double width = 23.333332061767578;
                double height = 26.6666259765625;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector-19''', id: 'I1:692;131:354;81:53', componentName:r'''Vector-19''');
                
                _Widget_I1_692_131_354_81_53State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector-19''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Vector-19');
            }            
            
            var painter = Node_I1_692_131_354_81_53();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Vector-19''', id: 'I1:692;131:354;81:53', widget: this, componentName:r'''Vector-19''');
                ComponentDescendantNotification(name: r'''Vector-19''', id: 'I1:692;131:354;81:53', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_I1_692_131_354_81_54 extends StatefulWidget {
            
        final String nodeName = r'''Vector-19-path''';
        final String name = r'''Vector-19-path''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_692_131_354_81_54({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_692_131_354_81_54 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_692_131_354_81_54(properties:properties);
        }
            @override
                _Widget_I1_692_131_354_81_54State createState() => _Widget_I1_692_131_354_81_54State(this.properties);
            }
            class _Widget_I1_692_131_354_81_54State extends BaseState<Widget_I1_692_131_354_81_54> {
                bool visible = true;
                bool isLoaded = false;
                double width = 23.333332061767578;
                double height = 23.333332061767578;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector-19-path''', id: 'I1:692;131:354;81:54', componentName:r'''Vector-19-path''');
                
                _Widget_I1_692_131_354_81_54State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector-19-path''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Vector-19-path');
            }            
            
            var painter = Node_I1_692_131_354_81_54();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Vector-19-path''', id: 'I1:692;131:354;81:54', widget: this, componentName:r'''Vector-19-path''');
                ComponentDescendantNotification(name: r'''Vector-19-path''', id: 'I1:692;131:354;81:54', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 23.333332061767578,
                                height: 23.333332061767578,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_I1_692_131_354_81_55 extends StatefulWidget {
            
        final String nodeName = r'''Vector-19-path''';
        final String name = r'''Vector-19-path''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_692_131_354_81_55({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_692_131_354_81_55 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_692_131_354_81_55(properties:properties);
        }
            @override
                _Widget_I1_692_131_354_81_55State createState() => _Widget_I1_692_131_354_81_55State(this.properties);
            }
            class _Widget_I1_692_131_354_81_55State extends BaseState<Widget_I1_692_131_354_81_55> {
                bool visible = true;
                bool isLoaded = false;
                double width = 10;
                double height = 1.6666667461395264;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector-19-path''', id: 'I1:692;131:354;81:55', componentName:r'''Vector-19-path''');
                
                _Widget_I1_692_131_354_81_55State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector-19-path''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Vector-19-path');
            }            
            
            var painter = Node_I1_692_131_354_81_55();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Vector-19-path''', id: 'I1:692;131:354;81:55', widget: this, componentName:r'''Vector-19-path''');
                ComponentDescendantNotification(name: r'''Vector-19-path''', id: 'I1:692;131:354;81:55', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 10,
                                height: 1.6666667461395264,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_I1_692_131_354_81_56 extends StatefulWidget {
            
        final String nodeName = r'''Vector-19-path''';
        final String name = r'''Vector-19-path''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_692_131_354_81_56({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_692_131_354_81_56 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_692_131_354_81_56(properties:properties);
        }
            @override
                _Widget_I1_692_131_354_81_56State createState() => _Widget_I1_692_131_354_81_56State(this.properties);
            }
            class _Widget_I1_692_131_354_81_56State extends BaseState<Widget_I1_692_131_354_81_56> {
                bool visible = true;
                bool isLoaded = false;
                double width = 1.6666667461395264;
                double height = 1.6666667461395264;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector-19-path''', id: 'I1:692;131:354;81:56', componentName:r'''Vector-19-path''');
                
                _Widget_I1_692_131_354_81_56State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector-19-path''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Vector-19-path');
            }            
            
            var painter = Node_I1_692_131_354_81_56();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Vector-19-path''', id: 'I1:692;131:354;81:56', widget: this, componentName:r'''Vector-19-path''');
                ComponentDescendantNotification(name: r'''Vector-19-path''', id: 'I1:692;131:354;81:56', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 1.6666667461395264,
                                height: 1.6666667461395264,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_I1_692_131_354_81_57 extends StatefulWidget {
            
        final String nodeName = r'''Vector-19-path''';
        final String name = r'''Vector-19-path''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_692_131_354_81_57({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_692_131_354_81_57 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_692_131_354_81_57(properties:properties);
        }
            @override
                _Widget_I1_692_131_354_81_57State createState() => _Widget_I1_692_131_354_81_57State(this.properties);
            }
            class _Widget_I1_692_131_354_81_57State extends BaseState<Widget_I1_692_131_354_81_57> {
                bool visible = true;
                bool isLoaded = false;
                double width = 1.6666667461395264;
                double height = 3.3333334922790527;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector-19-path''', id: 'I1:692;131:354;81:57', componentName:r'''Vector-19-path''');
                
                _Widget_I1_692_131_354_81_57State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector-19-path''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Vector-19-path');
            }            
            
            var painter = Node_I1_692_131_354_81_57();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Vector-19-path''', id: 'I1:692;131:354;81:57', widget: this, componentName:r'''Vector-19-path''');
                ComponentDescendantNotification(name: r'''Vector-19-path''', id: 'I1:692;131:354;81:57', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 1.6666667461395264,
                                height: 3.3333334922790527,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_I1_692_131_354_81_58 extends StatefulWidget {
            
        final String nodeName = r'''Vector-19-path''';
        final String name = r'''Vector-19-path''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_692_131_354_81_58({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_692_131_354_81_58 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_692_131_354_81_58(properties:properties);
        }
            @override
                _Widget_I1_692_131_354_81_58State createState() => _Widget_I1_692_131_354_81_58State(this.properties);
            }
            class _Widget_I1_692_131_354_81_58State extends BaseState<Widget_I1_692_131_354_81_58> {
                bool visible = true;
                bool isLoaded = false;
                double width = 1.6666667461395264;
                double height = 1.6666667461395264;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector-19-path''', id: 'I1:692;131:354;81:58', componentName:r'''Vector-19-path''');
                
                _Widget_I1_692_131_354_81_58State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector-19-path''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Vector-19-path');
            }            
            
            var painter = Node_I1_692_131_354_81_58();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Vector-19-path''', id: 'I1:692;131:354;81:58', widget: this, componentName:r'''Vector-19-path''');
                ComponentDescendantNotification(name: r'''Vector-19-path''', id: 'I1:692;131:354;81:58', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 1.6666667461395264,
                                height: 1.6666667461395264,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_I1_692_131_354_81_59 extends StatefulWidget {
            
        final String nodeName = r'''Vector-19-path''';
        final String name = r'''Vector-19-path''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_692_131_354_81_59({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_692_131_354_81_59 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_692_131_354_81_59(properties:properties);
        }
            @override
                _Widget_I1_692_131_354_81_59State createState() => _Widget_I1_692_131_354_81_59State(this.properties);
            }
            class _Widget_I1_692_131_354_81_59State extends BaseState<Widget_I1_692_131_354_81_59> {
                bool visible = true;
                bool isLoaded = false;
                double width = 1.6666667461395264;
                double height = 3.3333334922790527;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector-19-path''', id: 'I1:692;131:354;81:59', componentName:r'''Vector-19-path''');
                
                _Widget_I1_692_131_354_81_59State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector-19-path''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Vector-19-path');
            }            
            
            var painter = Node_I1_692_131_354_81_59();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Vector-19-path''', id: 'I1:692;131:354;81:59', widget: this, componentName:r'''Vector-19-path''');
                ComponentDescendantNotification(name: r'''Vector-19-path''', id: 'I1:692;131:354;81:59', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 1.6666667461395264,
                                height: 3.3333334922790527,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_I1_692_131_354_81_60 extends StatefulWidget {
            
        final String nodeName = r'''Vector-19-path''';
        final String name = r'''Vector-19-path''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_692_131_354_81_60({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_692_131_354_81_60 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_692_131_354_81_60(properties:properties);
        }
            @override
                _Widget_I1_692_131_354_81_60State createState() => _Widget_I1_692_131_354_81_60State(this.properties);
            }
            class _Widget_I1_692_131_354_81_60State extends BaseState<Widget_I1_692_131_354_81_60> {
                bool visible = true;
                bool isLoaded = false;
                double width = 2.8566668033599854;
                double height = 2.8566668033599854;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector-19-path''', id: 'I1:692;131:354;81:60', componentName:r'''Vector-19-path''');
                
                _Widget_I1_692_131_354_81_60State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector-19-path''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Vector-19-path');
            }            
            
            var painter = Node_I1_692_131_354_81_60();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Vector-19-path''', id: 'I1:692;131:354;81:60', widget: this, componentName:r'''Vector-19-path''');
                ComponentDescendantNotification(name: r'''Vector-19-path''', id: 'I1:692;131:354;81:60', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 2.8566668033599854,
                                height: 2.8566668033599854,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_1_693 extends StatefulWidget {
            
        final String nodeName = r'''Label''';
        final String name = r'''Label''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_693({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_693 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_693(properties:properties);
        }
            @override
                _Widget_1_693State createState() => _Widget_1_693State(this.properties);
            }
            class _Widget_1_693State extends BaseState<Widget_1_693> {
                bool visible = true;
                bool isLoaded = false;
                double width = 71;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Label''', id: '1:693', componentName:r'''Label''');
                
                _Widget_1_693State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''SCHEDULE''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((18/18).floor()) <=1 ? 1 : (18/18).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 13,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w600,
                                letterSpacing: -0.07800000160932541,
                                fontStyle: FontStyle.normal,
                                height: 1.3846153846153846,
                                color: Color.fromRGBO(60, 60, 67, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Label''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Label');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Label''', id: '1:693', widget: this, componentName:r'''Label''');
                ComponentDescendantNotification(name: r'''Label''', id: '1:693', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, -2.5, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 71,
                                height: 18,
                                alignment: Alignment(-1, -1),
                                child: Align(
                                    alignment: Alignment(0, -1),
                                    child: this.textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_1_694 extends StatefulWidget {
            
        final String nodeName = r'''Button''';
        final String name = r'''Button''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_694({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_694 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_694(properties:properties);
        }
            @override
                _Widget_1_694State createState() => _Widget_1_694State(this.properties);
            }
            class _Widget_1_694State extends BaseState<Widget_1_694> {
                bool visible = true;
                bool isLoaded = false;
                double width = 66;
                double height = 87;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Button''', id: '1:694', componentName:r'''Button''');
                
                _Widget_1_694State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Button''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Button');
            }            
            
            var painter = Node_1_694();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Button''', id: '1:694', widget: this, componentName:r'''Button''');
                ComponentDescendantNotification(name: r'''Button''', id: '1:694', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 66,
                                height: 87,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    SingleChildScrollView(
                scrollDirection: Axis.vertical,
                child: Flex(
                    mainAxisAlignment: MainAxisAlignment.start,
                    crossAxisAlignment: CrossAxisAlignment.center,
                    direction: Axis.vertical,
                    //spacing: 5,
                    //runSpacing: 5, // to apply margin in the cross axis of the wrap
                    clipBehavior: Clip.none,
                    children:[
            
                                                    
                                                                    TransparentPointer(
                                                                        child: Widget_1_695(key:UniqueKey())
                                                                    )
                                                                    , 
                                                    SizedBox(height: 5), 
                                                    Widget_1_696(key:UniqueKey())
                                                    ]))
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_I1_695_131_349 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 1''';
        final String name = r'''Ellipse 1''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_695_131_349({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_695_131_349 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_695_131_349(properties:properties);
        }
            @override
                _Widget_I1_695_131_349State createState() => _Widget_I1_695_131_349State(this.properties);
            }
            class _Widget_I1_695_131_349State extends BaseState<Widget_I1_695_131_349> {
                bool visible = true;
                bool isLoaded = false;
                double width = 64;
                double height = 64;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 1''', id: 'I1:695;131:349', componentName:r'''Ellipse 1''');
                
                _Widget_I1_695_131_349State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 1''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 1');
            }            
            
            var painter = Node_I1_695_131_349();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 1''', id: 'I1:695;131:349', widget: this, componentName:r'''Ellipse 1''');
                ComponentDescendantNotification(name: r'''Ellipse 1''', id: 'I1:695;131:349', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_695_131_350 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 2''';
        final String name = r'''Ellipse 2''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_695_131_350({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_695_131_350 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_695_131_350(properties:properties);
        }
            @override
                _Widget_I1_695_131_350State createState() => _Widget_I1_695_131_350State(this.properties);
            }
            class _Widget_I1_695_131_350State extends BaseState<Widget_I1_695_131_350> {
                bool visible = true;
                bool isLoaded = false;
                double width = 58;
                double height = 58;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 2''', id: 'I1:695;131:350', componentName:r'''Ellipse 2''');
                
                _Widget_I1_695_131_350State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 2''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 2');
            }            
            
            var painter = Node_I1_695_131_350();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 2''', id: 'I1:695;131:350', widget: this, componentName:r'''Ellipse 2''');
                ComponentDescendantNotification(name: r'''Ellipse 2''', id: 'I1:695;131:350', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_695_131_351 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 1433''';
        final String name = r'''Ellipse 1433''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_695_131_351({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_695_131_351 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_695_131_351(properties:properties);
        }
            @override
                _Widget_I1_695_131_351State createState() => _Widget_I1_695_131_351State(this.properties);
            }
            class _Widget_I1_695_131_351State extends BaseState<Widget_I1_695_131_351> {
                bool visible = true;
                bool isLoaded = false;
                double width = 58;
                double height = 58;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 1433''', id: 'I1:695;131:351', componentName:r'''Ellipse 1433''');
                
                _Widget_I1_695_131_351State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 1433''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 1433');
            }            
            
            var painter = Node_I1_695_131_351();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 1433''', id: 'I1:695;131:351', widget: this, componentName:r'''Ellipse 1433''');
                ComponentDescendantNotification(name: r'''Ellipse 1433''', id: 'I1:695;131:351', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_695_131_352 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 3 Blur''';
        final String name = r'''Ellipse 3 Blur''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_695_131_352({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_695_131_352 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_695_131_352(properties:properties);
        }
            @override
                _Widget_I1_695_131_352State createState() => _Widget_I1_695_131_352State(this.properties);
            }
            class _Widget_I1_695_131_352State extends BaseState<Widget_I1_695_131_352> {
                bool visible = true;
                bool isLoaded = false;
                double width = 60;
                double height = 60;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 3 Blur''', id: 'I1:695;131:352', componentName:r'''Ellipse 3 Blur''');
                
                _Widget_I1_695_131_352State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 3 Blur''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 3 Blur');
            }            
            
            var painter = Node_I1_695_131_352();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 3 Blur''', id: 'I1:695;131:352', widget: this, componentName:r'''Ellipse 3 Blur''');
                ComponentDescendantNotification(name: r'''Ellipse 3 Blur''', id: 'I1:695;131:352', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_695_131_353 extends StatefulWidget {
            
        final String nodeName = r'''Ellipse 4''';
        final String name = r'''Ellipse 4''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_695_131_353({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_695_131_353 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_695_131_353(properties:properties);
        }
            @override
                _Widget_I1_695_131_353State createState() => _Widget_I1_695_131_353State(this.properties);
            }
            class _Widget_I1_695_131_353State extends BaseState<Widget_I1_695_131_353> {
                bool visible = false;
                bool isLoaded = false;
                double width = 50;
                double height = 50;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Ellipse 4''', id: 'I1:695;131:353', componentName:r'''Ellipse 4''');
                
                _Widget_I1_695_131_353State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Ellipse 4''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Ellipse 4');
            }            
            
            var painter = Node_I1_695_131_353();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Ellipse 4''', id: 'I1:695;131:353', widget: this, componentName:r'''Ellipse 4''');
                ComponentDescendantNotification(name: r'''Ellipse 4''', id: 'I1:695;131:353', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                );
            }
        }
        

        class Widget_I1_695_131_354_81_62 extends StatefulWidget {
            
        final String nodeName = r'''Vector''';
        final String name = r'''Vector''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_695_131_354_81_62({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_695_131_354_81_62 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_695_131_354_81_62(properties:properties);
        }
            @override
                _Widget_I1_695_131_354_81_62State createState() => _Widget_I1_695_131_354_81_62State(this.properties);
            }
            class _Widget_I1_695_131_354_81_62State extends BaseState<Widget_I1_695_131_354_81_62> {
                bool visible = true;
                bool isLoaded = false;
                double width = 23.33313751220703;
                double height = 23.332019805908203;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector''', id: 'I1:695;131:354;81:62', componentName:r'''Vector''');
                
                _Widget_I1_695_131_354_81_62State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Vector');
            }            
            
            var painter = Node_I1_695_131_354_81_62();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Vector''', id: 'I1:695;131:354;81:62', widget: this, componentName:r'''Vector''');
                ComponentDescendantNotification(name: r'''Vector''', id: 'I1:695;131:354;81:62', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 23.33313751220703,
                                height: 23.332019805908203,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    child: LayoutBuilder( builder: (_, constraints) => Stack(
                                                fit: StackFit.expand,
                                                clipBehavior: Clip.none,
                                                children: [
                                                    
                                                    OverflowBox( 
                                                                        alignment: Alignment(0, 0),
                                                                        
                                                                        
                                                                        child:Container(
                                                                        alignment: Alignment(0, 0),
                                                                        margin: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                                                        constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                                                        
                                                                        
                                                                        
                                                                        child: 
                                                                    TransparentPointer(
                                                                        child: Widget_I1_695_131_354_81_63()
                                                                    )
                                                                    ))
                                                    
                                                ]
                                            ))
                                ),
                                
                            )
                        )
                        )
                        
                );
            }
        }
        

        class Widget_I1_695_131_354_81_63 extends StatefulWidget {
            
        final String nodeName = r'''Vector-28''';
        final String name = r'''Vector-28''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_695_131_354_81_63({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_695_131_354_81_63 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_695_131_354_81_63(properties:properties);
        }
            @override
                _Widget_I1_695_131_354_81_63State createState() => _Widget_I1_695_131_354_81_63State(this.properties);
            }
            class _Widget_I1_695_131_354_81_63State extends BaseState<Widget_I1_695_131_354_81_63> {
                bool visible = true;
                bool isLoaded = false;
                double width = 23.33313751220703;
                double height = 23.332019805908203;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector-28''', id: 'I1:695;131:354;81:63', componentName:r'''Vector-28''');
                
                _Widget_I1_695_131_354_81_63State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector-28''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Vector-28');
            }            
            
            var painter = Node_I1_695_131_354_81_63();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                
                
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Vector-28''', id: 'I1:695;131:354;81:63', widget: this, componentName:r'''Vector-28''');
                ComponentDescendantNotification(name: r'''Vector-28''', id: 'I1:695;131:354;81:63', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: 0, maxWidth: double.infinity, minHeight: 0, maxHeight: double.infinity),
                                width: mq_width,
                                height: mq_height,
                                child: CustomPaint(
                                    size: Size(constraints.widthConstraints().maxWidth, constraints.heightConstraints().maxHeight), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_I1_695_131_354_81_64 extends StatefulWidget {
            
        final String nodeName = r'''Vector-28-path''';
        final String name = r'''Vector-28-path''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_695_131_354_81_64({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_695_131_354_81_64 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_695_131_354_81_64(properties:properties);
        }
            @override
                _Widget_I1_695_131_354_81_64State createState() => _Widget_I1_695_131_354_81_64State(this.properties);
            }
            class _Widget_I1_695_131_354_81_64State extends BaseState<Widget_I1_695_131_354_81_64> {
                bool visible = true;
                bool isLoaded = false;
                double width = 22.14992904663086;
                double height = 23.332021713256836;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector-28-path''', id: 'I1:695;131:354;81:64', componentName:r'''Vector-28-path''');
                
                _Widget_I1_695_131_354_81_64State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector-28-path''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Vector-28-path');
            }            
            
            var painter = Node_I1_695_131_354_81_64();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Vector-28-path''', id: 'I1:695;131:354;81:64', widget: this, componentName:r'''Vector-28-path''');
                ComponentDescendantNotification(name: r'''Vector-28-path''', id: 'I1:695;131:354;81:64', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 22.14992904663086,
                                height: 23.332021713256836,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_I1_695_131_354_81_65 extends StatefulWidget {
            
        final String nodeName = r'''Vector-28-path''';
        final String name = r'''Vector-28-path''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_695_131_354_81_65({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_695_131_354_81_65 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_695_131_354_81_65(properties:properties);
        }
            @override
                _Widget_I1_695_131_354_81_65State createState() => _Widget_I1_695_131_354_81_65State(this.properties);
            }
            class _Widget_I1_695_131_354_81_65State extends BaseState<Widget_I1_695_131_354_81_65> {
                bool visible = true;
                bool isLoaded = false;
                double width = 1.6666666269302368;
                double height = 4.553333282470703;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector-28-path''', id: 'I1:695;131:354;81:65', componentName:r'''Vector-28-path''');
                
                _Widget_I1_695_131_354_81_65State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector-28-path''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Vector-28-path');
            }            
            
            var painter = Node_I1_695_131_354_81_65();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Vector-28-path''', id: 'I1:695;131:354;81:65', widget: this, componentName:r'''Vector-28-path''');
                ComponentDescendantNotification(name: r'''Vector-28-path''', id: 'I1:695;131:354;81:65', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 1.6666666269302368,
                                height: 4.553333282470703,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_I1_695_131_354_81_66 extends StatefulWidget {
            
        final String nodeName = r'''Vector-28-path''';
        final String name = r'''Vector-28-path''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_695_131_354_81_66({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_695_131_354_81_66 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_695_131_354_81_66(properties:properties);
        }
            @override
                _Widget_I1_695_131_354_81_66State createState() => _Widget_I1_695_131_354_81_66State(this.properties);
            }
            class _Widget_I1_695_131_354_81_66State extends BaseState<Widget_I1_695_131_354_81_66> {
                bool visible = true;
                bool isLoaded = false;
                double width = 4.414999961853027;
                double height = 1.6666666269302368;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector-28-path''', id: 'I1:695;131:354;81:66', componentName:r'''Vector-28-path''');
                
                _Widget_I1_695_131_354_81_66State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector-28-path''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Vector-28-path');
            }            
            
            var painter = Node_I1_695_131_354_81_66();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Vector-28-path''', id: 'I1:695;131:354;81:66', widget: this, componentName:r'''Vector-28-path''');
                ComponentDescendantNotification(name: r'''Vector-28-path''', id: 'I1:695;131:354;81:66', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 4.414999961853027,
                                height: 1.6666666269302368,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_I1_695_131_354_81_67 extends StatefulWidget {
            
        final String nodeName = r'''Vector-28-path''';
        final String name = r'''Vector-28-path''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_I1_695_131_354_81_67({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_I1_695_131_354_81_67 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_I1_695_131_354_81_67(properties:properties);
        }
            @override
                _Widget_I1_695_131_354_81_67State createState() => _Widget_I1_695_131_354_81_67State(this.properties);
            }
            class _Widget_I1_695_131_354_81_67State extends BaseState<Widget_I1_695_131_354_81_67> {
                bool visible = true;
                bool isLoaded = false;
                double width = 5;
                double height = 5;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Vector-28-path''', id: 'I1:695;131:354;81:67', componentName:r'''Vector-28-path''');
                
                _Widget_I1_695_131_354_81_67State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Vector-28-path''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Vector-28-path');
            }            
            
            var painter = Node_I1_695_131_354_81_67();
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Vector-28-path''', id: 'I1:695;131:354;81:67', widget: this, componentName:r'''Vector-28-path''');
                ComponentDescendantNotification(name: r'''Vector-28-path''', id: 'I1:695;131:354;81:67', widget: this)..dispatch(context);
                painter.properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                properties.forEach((k,v) => m[k]=m.containsKey(k)?m[k]:v);
                painter.properties = m;
                
                
                
                return Visibility(
                    visible: visible, 
                    child: 
                            TransparentPointer(
                                child: 
                        Opacity(
                            opacity: opacity,
                            child: LayoutBuilder( builder: (_, constraints) => Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 5,
                                height: 5,
                                child: CustomPaint(
                                    size: Size(this.width, this.height), 
                                    painter: this.painter,
                                    
                                ),
                                
                            )
                        ))
                        )
                        
                            )
                            
                );
            }
        }
        

        class Widget_1_696 extends StatefulWidget {
            
        final String nodeName = r'''Label''';
        final String name = r'''Label''';
        final String componentType = r'''''';
        final Map<String, dynamic> properties;
        
        Widget_1_696({Key key = const Key(''), this.properties = const {}}) : super(key: key);
        Widget_1_696 createInstance({Map<String, dynamic> properties = const {}}){
            return new Widget_1_696(properties:properties);
        }
            @override
                _Widget_1_696State createState() => _Widget_1_696State(this.properties);
            }
            class _Widget_1_696State extends BaseState<Widget_1_696> {
                bool visible = true;
                bool isLoaded = false;
                double width = 58;
                double height = 18;
                double opacity = 1;
                globals.Elem elem = globals.Elem(name: r'''Label''', id: '1:696', componentName:r'''Label''');
                
                _Widget_1_696State(Map<String, dynamic> props){
                    
                    super.properties = props;
                    
                }
                
            
            String chars = r'''HISTORY''';
            String get characters {
                return chars;
            }
            void set characters(String c) {
                chars = c;
            }
            Widget get textWidgets {
                double paragraphSpacing = 0;
                List<String> pars = this.characters.split('\n');
                if(paragraphSpacing > 0 && pars.length > 0) {
                    List<Widget> children = [];
                    for(var i=0; i<pars.length; i++){
                        children.add(Text(
                            pars[i],
                            style: this.textStyles[0],
                            textAlign: TextAlign.center
                        ));
                        if(i != pars.length - 1) {
                            children.add(SizedBox(height: paragraphSpacing));
                        }
                    }
                    return Column(
                        children: children
                    );
                }else{
                    return Text(
                        this.characters,
                        style: this.textStyles[0],
                        textAlign: TextAlign.center,
                        overflow: TextOverflow.ellipsis,
                        maxLines: ((18/18).floor()) <=1 ? 1 : (18/18).floor(),
                    );
                }
            }
            final List<TextStyle> textStyles = [

                        ((){
                            var style = TextStyle(
                                fontSize: 13,
                                fontFamily: 'SF Pro Text',
                                fontWeight: FontWeight.w600,
                                letterSpacing: -0.07800000160932541,
                                fontStyle: FontStyle.normal,
                                height: 1.3846153846153846,
                                color: Color.fromRGBO(60, 60, 67, 1)
                            );
                            try{
                                return GoogleFonts.getFont('SF Pro Text',
                                    textStyle: style,
                                );
                            } catch (e) {
                                return style;
                            }
                        })(),
                        
];
            @override
            void initState() {
                super.initState();
                
            }
            void widgetDidLoad(){
              if(!isLoaded) {
                isLoaded = true;
                Timer(Duration(milliseconds: 50), () => globals.triggerEvent('pageLoaded', r'''Label''', {'target':elem}) );
              }
              globals.triggerComponentEvent('loaded', this.widget.hashCode, 'Label');
            }            
            
            
            @override
        void dispose() { 
            
            if(globals.elementInstances.containsKey(this.widget.hashCode)){
              globals.elementInstances.remove(this.widget.hashCode);
            }
            super.dispose();
        }           
            @override
            Widget build(BuildContext context) {
                var mq = MediaQuery.of(context);
                var mq_width = mq.size.width * mq.devicePixelRatio;
                var mq_height = mq.size.height * mq.devicePixelRatio;
                Map<String, dynamic> m = {};
                if(properties.containsKey('width')){
                    this.width = properties['width'].toDouble();
                }
                if(properties.containsKey('height')){
                    this.height = properties['height'].toDouble();
                }
                if(properties.containsKey('visible')){
                    visible = properties['visible'] as bool;
                }
                
                
                globals.elementInstances[this.widget.hashCode] = globals.Elem(name: r'''Label''', id: '1:696', widget: this, componentName:r'''Label''');
                ComponentDescendantNotification(name: r'''Label''', id: '1:696', widget: this)..dispatch(context);
                
                
                        if(properties.containsKey('characters')){
                            characters = properties['characters'];
                        }
                        
                
                return Visibility(
                    visible: visible, 
                    child: 
                        Opacity(
                            opacity: opacity,
                            child:  Transform(
                            transform: Matrix4(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1),
                            alignment: Alignment(0, 0),
                            child: Container(
                                padding: EdgeInsets.fromLTRB(0, 0, 0, 0),
                                constraints: BoxConstraints(minWidth: this.width, maxWidth: this.width, minHeight: this.height, maxHeight: this.height),
                                width: 58,
                                height: 18,
                                alignment: Alignment(-1, -1),
                                child: Align(
                                    alignment: Alignment(0, -1),
                                    child: this.textWidgets)
                            )
                        )
                        )
                        
                );
            }
        }
        

                class BendisWidget extends StatefulWidget {
                    @override
                    _BendisWidgetState createState() {
                        
                                        globals.screenClasses['Android Large - 1'] = globals.Elem(
                                            name:'Android Large - 1', 
                                            id:'12:106', 
                                            widget:Widget_12_106(),
                                        );
                                        globals.screenClasses['Android Large - 1']?.type = 'screens';
                                        

                        return _BendisWidgetState();
                    }
                }

                class _BendisWidgetState extends State<BendisWidget> {

                    bool isLoadedOnce = false;
                    @override
                    void initState() {
                        super.initState();
                        if(!isLoadedOnce) {
                            isLoadedOnce = true;
                            WidgetsBinding.instance.addPostFrameCallback((_){
                                
                                Timer(Duration(milliseconds: 1), () => globals.triggerEvent('apploaded') );
                            });
                        }
                    }

                    @override
                    Widget build(BuildContext context) {
                        var screen =  Widget_12_106();
                        globals.currentScreenName = screen.nodeName;
                        return screen;
                    }
                }
                